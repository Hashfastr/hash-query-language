# Generated from Hac.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,11,155,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,4,3,32,8,3,11,3,12,3,33,1,3,1,3,1,4,4,4,39,8,4,11,4,12,
        4,40,1,4,4,4,44,8,4,11,4,12,4,45,1,4,1,4,1,5,1,5,1,5,4,5,53,8,5,
        11,5,12,5,54,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,113,8,8,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,3,9,152,8,9,1,10,1,10,0,0,11,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,1,0,2,2,0,9,9,32,32,2,0,10,10,13,13,
        168,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,1,23,1,0,0,0,3,25,1,0,0,0,5,27,1,0,0,0,7,29,1,0,0,0,
        9,38,1,0,0,0,11,49,1,0,0,0,13,56,1,0,0,0,15,58,1,0,0,0,17,112,1,
        0,0,0,19,151,1,0,0,0,21,153,1,0,0,0,23,24,5,42,0,0,24,2,1,0,0,0,
        25,26,7,0,0,0,26,4,1,0,0,0,27,28,7,1,0,0,28,6,1,0,0,0,29,31,5,47,
        0,0,30,32,3,1,0,0,31,30,1,0,0,0,32,33,1,0,0,0,33,31,1,0,0,0,33,34,
        1,0,0,0,34,35,1,0,0,0,35,36,3,5,2,0,36,8,1,0,0,0,37,39,3,3,1,0,38,
        37,1,0,0,0,39,40,1,0,0,0,40,38,1,0,0,0,40,41,1,0,0,0,41,43,1,0,0,
        0,42,44,3,1,0,0,43,42,1,0,0,0,44,45,1,0,0,0,45,43,1,0,0,0,45,46,
        1,0,0,0,46,47,1,0,0,0,47,48,5,47,0,0,48,10,1,0,0,0,49,50,3,3,1,0,
        50,52,3,1,0,0,51,53,3,3,1,0,52,51,1,0,0,0,53,54,1,0,0,0,54,52,1,
        0,0,0,54,55,1,0,0,0,55,12,1,0,0,0,56,57,5,64,0,0,57,14,1,0,0,0,58,
        59,5,45,0,0,59,16,1,0,0,0,60,61,5,116,0,0,61,62,5,105,0,0,62,63,
        5,116,0,0,63,64,5,108,0,0,64,113,5,101,0,0,65,66,5,97,0,0,66,67,
        5,117,0,0,67,68,5,116,0,0,68,69,5,104,0,0,69,70,5,111,0,0,70,113,
        5,114,0,0,71,72,5,105,0,0,72,113,5,100,0,0,73,74,5,115,0,0,74,75,
        5,116,0,0,75,76,5,97,0,0,76,77,5,116,0,0,77,78,5,117,0,0,78,113,
        5,115,0,0,79,80,5,108,0,0,80,81,5,101,0,0,81,82,5,118,0,0,82,83,
        5,101,0,0,83,113,5,108,0,0,84,85,5,100,0,0,85,86,5,101,0,0,86,87,
        5,115,0,0,87,88,5,99,0,0,88,89,5,114,0,0,89,90,5,105,0,0,90,91,5,
        112,0,0,91,92,5,116,0,0,92,93,5,105,0,0,93,94,5,111,0,0,94,113,5,
        110,0,0,95,96,5,116,0,0,96,97,5,114,0,0,97,98,5,105,0,0,98,99,5,
        97,0,0,99,100,5,103,0,0,100,113,5,101,0,0,101,102,5,97,0,0,102,103,
        5,117,0,0,103,104,5,116,0,0,104,105,5,104,0,0,105,106,5,111,0,0,
        106,107,5,114,0,0,107,108,5,110,0,0,108,109,5,111,0,0,109,110,5,
        116,0,0,110,111,5,101,0,0,111,113,5,115,0,0,112,60,1,0,0,0,112,65,
        1,0,0,0,112,71,1,0,0,0,112,73,1,0,0,0,112,79,1,0,0,0,112,84,1,0,
        0,0,112,95,1,0,0,0,112,101,1,0,0,0,113,18,1,0,0,0,114,115,5,116,
        0,0,115,116,5,97,0,0,116,117,5,103,0,0,117,152,5,115,0,0,118,119,
        5,102,0,0,119,120,5,97,0,0,120,121,5,108,0,0,121,122,5,115,0,0,122,
        123,5,101,0,0,123,124,5,112,0,0,124,125,5,111,0,0,125,126,5,115,
        0,0,126,127,5,105,0,0,127,128,5,116,0,0,128,129,5,105,0,0,129,130,
        5,118,0,0,130,131,5,101,0,0,131,152,5,115,0,0,132,133,5,114,0,0,
        133,134,5,101,0,0,134,135,5,102,0,0,135,136,5,101,0,0,136,137,5,
        114,0,0,137,138,5,101,0,0,138,139,5,110,0,0,139,140,5,99,0,0,140,
        141,5,101,0,0,141,152,5,115,0,0,142,143,5,99,0,0,143,144,5,104,0,
        0,144,145,5,97,0,0,145,146,5,110,0,0,146,147,5,103,0,0,147,148,5,
        101,0,0,148,149,5,108,0,0,149,150,5,111,0,0,150,152,5,103,0,0,151,
        114,1,0,0,0,151,118,1,0,0,0,151,132,1,0,0,0,151,142,1,0,0,0,152,
        20,1,0,0,0,153,154,8,1,0,0,154,22,1,0,0,0,7,0,33,40,45,54,112,151,
        0
    ]

class HacLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ASTERISK = 1
    SPACE = 2
    NEWLINE = 3
    COMMENTSTART = 4
    COMMENTEND = 5
    PRELINE = 6
    ATSIGN = 7
    DASH = 8
    TEXTTAG = 9
    LISTTAG = 10
    CHAR = 11

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'*'", "'@'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "ASTERISK", "SPACE", "NEWLINE", "COMMENTSTART", "COMMENTEND", 
            "PRELINE", "ATSIGN", "DASH", "TEXTTAG", "LISTTAG", "CHAR" ]

    ruleNames = [ "ASTERISK", "SPACE", "NEWLINE", "COMMENTSTART", "COMMENTEND", 
                  "PRELINE", "ATSIGN", "DASH", "TEXTTAG", "LISTTAG", "CHAR" ]

    grammarFileName = "Hac.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


