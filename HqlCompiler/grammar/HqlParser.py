# Generated from Hql.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,323,2864,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,1,0,
        1,0,1,1,1,1,1,1,5,1,620,8,1,10,1,12,1,623,9,1,1,1,3,1,626,8,1,1,
        1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,637,8,2,1,3,1,3,1,3,1,3,1,
        3,1,3,1,4,1,4,1,4,1,4,1,4,3,4,650,8,4,1,5,1,5,1,5,1,5,1,5,1,6,1,
        6,1,6,1,6,1,6,3,6,662,8,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,3,
        7,673,8,7,1,7,1,7,1,7,1,8,1,8,1,8,5,8,681,8,8,10,8,12,8,684,9,8,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,710,8,11,1,
        12,1,12,1,12,1,12,3,12,716,8,12,1,13,1,13,1,13,1,14,1,14,1,14,1,
        14,3,14,725,8,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,5,16,735,
        8,16,10,16,12,16,738,9,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,
        1,18,1,18,5,18,750,8,18,10,18,12,18,753,9,18,1,18,3,18,756,8,18,
        1,18,3,18,759,8,18,1,18,1,18,1,19,1,19,3,19,765,8,19,1,20,1,20,1,
        20,1,20,3,20,771,8,20,1,21,1,21,1,21,3,21,776,8,21,1,21,1,21,4,21,
        780,8,21,11,21,12,21,781,1,21,1,21,1,22,1,22,1,22,1,22,5,22,790,
        8,22,10,22,12,22,793,9,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,
        1,24,1,24,1,25,1,25,3,25,807,8,25,1,25,1,25,1,25,3,25,812,8,25,1,
        26,1,26,1,26,1,26,5,26,818,8,26,10,26,12,26,821,9,26,1,26,1,26,1,
        27,1,27,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,5,29,836,8,
        29,10,29,12,29,839,9,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,5,30,851,8,30,10,30,12,30,854,9,30,1,30,1,30,1,31,1,31,
        3,31,860,8,31,1,32,1,32,1,32,1,32,3,32,866,8,32,1,33,1,33,3,33,870,
        8,33,1,34,1,34,1,34,1,34,1,34,1,34,5,34,878,8,34,10,34,12,34,881,
        9,34,1,34,1,34,1,35,1,35,1,35,1,35,3,35,889,8,35,1,36,1,36,1,37,
        1,37,1,38,1,38,5,38,897,8,38,10,38,12,38,900,9,38,1,39,1,39,1,39,
        1,40,1,40,5,40,907,8,40,10,40,12,40,910,9,40,1,41,1,41,1,41,1,41,
        1,41,1,41,3,41,918,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,3,42,970,8,42,1,43,1,43,1,43,1,43,3,43,976,8,43,1,
        44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
        44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,1003,
        8,44,1,45,1,45,5,45,1007,8,45,10,45,12,45,1010,9,45,1,45,1,45,1,
        46,1,46,1,46,1,47,1,47,5,47,1019,8,47,10,47,12,47,1022,9,47,1,48,
        1,48,5,48,1026,8,48,10,48,12,48,1029,9,48,1,48,1,48,3,48,1033,8,
        48,1,49,1,49,5,49,1037,8,49,10,49,12,49,1040,9,49,1,49,1,49,3,49,
        1044,8,49,1,50,1,50,1,51,1,51,1,51,5,51,1051,8,51,10,51,12,51,1054,
        9,51,1,52,1,52,5,52,1058,8,52,10,52,12,52,1061,9,52,1,52,1,52,3,
        52,1065,8,52,1,53,1,53,1,53,1,54,1,54,1,54,1,54,5,54,1074,8,54,10,
        54,12,54,1077,9,54,1,55,1,55,1,56,1,56,1,56,1,56,1,56,5,56,1086,
        8,56,10,56,12,56,1089,9,56,1,56,1,56,3,56,1093,8,56,1,57,1,57,1,
        57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,3,59,1105,8,59,1,59,3,59,1108,
        8,59,1,59,1,59,1,59,3,59,1113,8,59,1,59,3,59,1116,8,59,1,60,5,60,
        1119,8,60,10,60,12,60,1122,9,60,1,60,3,60,1125,8,60,1,60,1,60,1,
        61,1,61,1,61,1,61,1,61,5,61,1134,8,61,10,61,12,61,1137,9,61,1,61,
        1,61,1,62,1,62,1,62,1,62,5,62,1145,8,62,10,62,12,62,1148,9,62,1,
        63,1,63,3,63,1152,8,63,1,64,1,64,3,64,1156,8,64,1,65,1,65,1,65,1,
        66,1,66,1,66,1,66,1,66,1,67,1,67,1,68,1,68,1,68,3,68,1171,8,68,1,
        69,1,69,1,70,1,70,1,70,5,70,1178,8,70,10,70,12,70,1181,9,70,1,71,
        1,71,3,71,1185,8,71,1,72,1,72,1,72,5,72,1190,8,72,10,72,12,72,1193,
        9,72,1,73,1,73,4,73,1197,8,73,11,73,12,73,1198,1,74,3,74,1202,8,
        74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,76,1,76,5,76,1213,8,76,10,
        76,12,76,1216,9,76,1,77,1,77,1,77,1,78,1,78,1,79,1,79,5,79,1225,
        8,79,10,79,12,79,1228,9,79,1,80,1,80,5,80,1232,8,80,10,80,12,80,
        1235,9,80,1,80,1,80,1,80,1,80,1,80,3,80,1242,8,80,1,80,3,80,1245,
        8,80,1,81,1,81,1,81,3,81,1250,8,81,1,82,1,82,1,82,1,82,1,83,1,83,
        1,84,1,84,1,84,3,84,1261,8,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,
        1,86,1,86,1,86,1,87,1,87,1,87,1,87,5,87,1277,8,87,10,87,12,87,1280,
        9,87,1,88,1,88,1,88,3,88,1285,8,88,1,89,1,89,1,89,1,89,1,89,1,90,
        1,90,3,90,1294,8,90,1,90,5,90,1297,8,90,10,90,12,90,1300,9,90,1,
        91,1,91,1,91,1,92,1,92,5,92,1307,8,92,10,92,12,92,1310,9,92,1,92,
        1,92,1,92,1,92,1,92,3,92,1317,8,92,1,92,3,92,1320,8,92,1,93,1,93,
        1,93,1,94,1,94,5,94,1327,8,94,10,94,12,94,1330,9,94,1,94,1,94,1,
        94,3,94,1335,8,94,1,95,1,95,1,95,1,95,5,95,1341,8,95,10,95,12,95,
        1344,9,95,3,95,1346,8,95,1,96,1,96,1,96,1,97,1,97,5,97,1353,8,97,
        10,97,12,97,1356,9,97,1,97,1,97,1,97,1,98,1,98,5,98,1363,8,98,10,
        98,12,98,1366,9,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,5,98,1375,
        8,98,10,98,12,98,1378,9,98,1,98,3,98,1381,8,98,1,98,1,98,1,99,1,
        99,1,99,3,99,1388,8,99,1,100,1,100,1,100,1,100,1,100,5,100,1395,
        8,100,10,100,12,100,1398,9,100,1,100,1,100,1,101,1,101,5,101,1404,
        8,101,10,101,12,101,1407,9,101,1,101,1,101,1,101,1,101,1,101,3,101,
        1414,8,101,1,101,3,101,1417,8,101,1,102,1,102,1,102,1,102,1,103,
        1,103,1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,104,1,105,
        1,105,5,105,1436,8,105,10,105,12,105,1439,9,105,1,105,1,105,1,105,
        5,105,1444,8,105,10,105,12,105,1447,9,105,1,105,1,105,1,105,3,105,
        1452,8,105,1,105,3,105,1455,8,105,1,106,1,106,1,106,1,107,1,107,
        3,107,1462,8,107,1,108,1,108,1,108,1,108,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,110,1,110,3,110,1480,8,110,
        1,110,1,110,3,110,1484,8,110,1,110,1,110,1,110,1,111,1,111,1,111,
        1,111,5,111,1493,8,111,10,111,12,111,1496,9,111,1,112,1,112,5,112,
        1500,8,112,10,112,12,112,1503,9,112,1,112,1,112,1,112,5,112,1508,
        8,112,10,112,12,112,1511,9,112,1,112,3,112,1514,8,112,1,112,3,112,
        1517,8,112,1,112,1,112,1,112,1,112,1,112,1,113,1,113,1,113,1,114,
        1,114,1,114,1,115,1,115,3,115,1532,8,115,1,116,1,116,1,116,1,117,
        1,117,5,117,1539,8,117,10,117,12,117,1542,9,117,1,117,1,117,1,117,
        5,117,1547,8,117,10,117,12,117,1550,9,117,1,117,3,117,1553,8,117,
        1,118,1,118,3,118,1557,8,118,1,119,1,119,3,119,1561,8,119,1,119,
        1,119,1,119,1,119,1,120,1,120,1,120,1,120,3,120,1571,8,120,1,121,
        1,121,1,121,1,121,1,122,1,122,1,122,3,122,1580,8,122,1,123,3,123,
        1583,8,123,1,123,5,123,1586,8,123,10,123,12,123,1589,9,123,1,123,
        3,123,1592,8,123,1,124,3,124,1595,8,124,1,124,1,124,3,124,1599,8,
        124,1,125,1,125,3,125,1603,8,125,1,125,1,125,1,125,1,125,1,126,1,
        126,1,126,1,126,3,126,1613,8,126,1,127,1,127,1,127,1,127,1,127,5,
        127,1620,8,127,10,127,12,127,1623,9,127,1,127,1,127,1,128,1,128,
        5,128,1629,8,128,10,128,12,128,1632,9,128,1,128,1,128,1,128,3,128,
        1637,8,128,1,128,1,128,3,128,1641,8,128,1,129,1,129,1,129,3,129,
        1646,8,129,1,130,1,130,1,130,1,130,1,131,1,131,1,131,1,131,1,132,
        1,132,5,132,1658,8,132,10,132,12,132,1661,9,132,1,132,1,132,3,132,
        1665,8,132,1,132,1,132,1,132,1,132,1,133,1,133,1,133,1,134,1,134,
        1,134,1,134,5,134,1678,8,134,10,134,12,134,1681,9,134,1,135,1,135,
        1,135,1,135,5,135,1687,8,135,10,135,12,135,1690,9,135,3,135,1692,
        8,135,1,136,1,136,1,136,1,136,5,136,1698,8,136,10,136,12,136,1701,
        9,136,1,137,1,137,1,137,1,137,5,137,1707,8,137,10,137,12,137,1710,
        9,137,3,137,1712,8,137,1,138,1,138,1,138,1,138,5,138,1718,8,138,
        10,138,12,138,1721,9,138,3,138,1723,8,138,1,139,1,139,1,139,1,139,
        5,139,1729,8,139,10,139,12,139,1732,9,139,3,139,1734,8,139,1,140,
        1,140,3,140,1738,8,140,1,141,1,141,5,141,1742,8,141,10,141,12,141,
        1745,9,141,1,141,1,141,1,141,3,141,1750,8,141,1,142,1,142,1,142,
        1,142,5,142,1756,8,142,10,142,12,142,1759,9,142,1,143,1,143,1,143,
        1,143,3,143,1765,8,143,1,144,1,144,1,144,1,144,1,144,5,144,1772,
        8,144,10,144,12,144,1775,9,144,3,144,1777,8,144,1,144,1,144,1,145,
        4,145,1782,8,145,11,145,12,145,1783,1,146,1,146,1,146,1,146,1,146,
        1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,
        1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,
        1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,
        1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,
        1,146,1,146,3,146,1837,8,146,1,147,1,147,1,147,5,147,1842,8,147,
        10,147,12,147,1845,9,147,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
        1,148,1,148,1,148,1,148,1,148,1,148,3,148,1860,8,148,1,149,1,149,
        5,149,1864,8,149,10,149,12,149,1867,9,149,1,149,1,149,1,149,1,149,
        1,150,1,150,5,150,1875,8,150,10,150,12,150,1878,9,150,1,150,1,150,
        1,151,1,151,5,151,1884,8,151,10,151,12,151,1887,9,151,1,151,3,151,
        1890,8,151,1,151,3,151,1893,8,151,1,151,3,151,1896,8,151,1,151,1,
        151,1,151,4,151,1901,8,151,11,151,12,151,1902,1,151,1,151,1,152,
        1,152,1,152,1,152,1,152,1,152,1,153,1,153,1,153,1,153,1,153,5,153,
        1918,8,153,10,153,12,153,1921,9,153,1,154,1,154,1,154,1,154,1,154,
        5,154,1928,8,154,10,154,12,154,1931,9,154,1,154,1,154,1,155,1,155,
        1,155,3,155,1938,8,155,1,155,3,155,1941,8,155,1,155,1,155,1,155,
        3,155,1946,8,155,1,155,1,155,1,156,1,156,1,156,1,156,1,157,1,157,
        1,157,1,157,5,157,1958,8,157,10,157,12,157,1961,9,157,1,158,1,158,
        1,158,1,158,1,159,1,159,5,159,1969,8,159,10,159,12,159,1972,9,159,
        1,159,3,159,1975,8,159,1,159,3,159,1978,8,159,1,159,1,159,1,159,
        3,159,1983,8,159,1,160,1,160,1,160,1,160,1,161,1,161,1,161,1,161,
        1,161,5,161,1994,8,161,10,161,12,161,1997,9,161,1,161,1,161,1,162,
        1,162,5,162,2003,8,162,10,162,12,162,2006,9,162,1,162,1,162,1,162,
        5,162,2011,8,162,10,162,12,162,2014,9,162,1,163,1,163,5,163,2018,
        8,163,10,163,12,163,2021,9,163,1,163,1,163,1,163,1,163,5,163,2027,
        8,163,10,163,12,163,2030,9,163,1,164,1,164,1,164,1,165,3,165,2036,
        8,165,1,165,1,165,3,165,2040,8,165,1,166,1,166,5,166,2044,8,166,
        10,166,12,166,2047,9,166,1,166,1,166,1,166,5,166,2052,8,166,10,166,
        12,166,2055,9,166,3,166,2057,8,166,1,166,3,166,2060,8,166,1,167,
        1,167,1,167,1,167,5,167,2066,8,167,10,167,12,167,2069,9,167,1,167,
        3,167,2072,8,167,1,168,1,168,1,168,1,168,1,169,1,169,5,169,2080,
        8,169,10,169,12,169,2083,9,169,1,169,1,169,1,169,1,169,1,169,5,169,
        2090,8,169,10,169,12,169,2093,9,169,3,169,2095,8,169,1,170,1,170,
        5,170,2099,8,170,10,170,12,170,2102,9,170,1,170,1,170,1,170,1,170,
        1,171,1,171,1,171,1,171,1,171,3,171,2113,8,171,1,172,1,172,1,172,
        1,173,1,173,1,173,5,173,2121,8,173,10,173,12,173,2124,9,173,1,174,
        1,174,3,174,2128,8,174,1,174,1,174,1,174,3,174,2133,8,174,1,174,
        1,174,1,174,1,175,1,175,1,175,1,175,1,175,1,176,1,176,5,176,2145,
        8,176,10,176,12,176,2148,9,176,1,176,1,176,1,176,5,176,2153,8,176,
        10,176,12,176,2156,9,176,1,177,1,177,1,177,3,177,2161,8,177,1,178,
        1,178,5,178,2165,8,178,10,178,12,178,2168,9,178,1,178,1,178,1,179,
        1,179,1,179,3,179,2175,8,179,1,180,1,180,1,180,1,180,5,180,2181,
        8,180,10,180,12,180,2184,9,180,3,180,2186,8,180,1,181,1,181,3,181,
        2190,8,181,1,182,1,182,5,182,2194,8,182,10,182,12,182,2197,9,182,
        1,183,1,183,1,183,1,184,1,184,1,184,1,184,3,184,2206,8,184,1,185,
        1,185,1,185,1,185,3,185,2212,8,185,1,186,1,186,1,186,1,186,3,186,
        2218,8,186,1,187,3,187,2221,8,187,1,187,1,187,1,188,1,188,3,188,
        2227,8,188,1,188,1,188,1,189,1,189,1,189,1,189,5,189,2235,8,189,
        10,189,12,189,2238,9,189,1,189,1,189,1,190,1,190,1,190,1,190,1,191,
        1,191,1,192,1,192,5,192,2250,8,192,10,192,12,192,2253,9,192,1,193,
        1,193,1,193,1,194,1,194,5,194,2260,8,194,10,194,12,194,2263,9,194,
        1,195,1,195,1,195,1,196,1,196,1,196,1,196,1,196,3,196,2273,8,196,
        1,197,1,197,1,197,1,197,1,198,1,198,1,198,1,198,1,198,1,198,5,198,
        2285,8,198,10,198,12,198,2288,9,198,1,198,1,198,1,199,1,199,1,199,
        1,199,1,199,1,199,1,199,1,199,1,200,1,200,1,200,1,200,1,201,1,201,
        1,201,3,201,2307,8,201,1,202,1,202,5,202,2311,8,202,10,202,12,202,
        2314,9,202,1,203,1,203,1,203,1,204,1,204,5,204,2321,8,204,10,204,
        12,204,2324,9,204,1,205,1,205,1,205,1,206,1,206,3,206,2331,8,206,
        1,207,1,207,5,207,2335,8,207,10,207,12,207,2338,9,207,1,208,1,208,
        3,208,2342,8,208,1,208,1,208,1,209,1,209,1,210,1,210,1,210,1,210,
        1,211,3,211,2353,8,211,1,211,1,211,1,212,1,212,1,212,3,212,2360,
        8,212,1,213,1,213,1,213,3,213,2365,8,213,1,214,1,214,4,214,2369,
        8,214,11,214,12,214,2370,1,215,1,215,1,215,3,215,2376,8,215,1,216,
        1,216,1,216,1,217,1,217,1,217,1,217,1,218,1,218,1,218,1,218,1,218,
        1,219,1,219,3,219,2392,8,219,1,219,1,219,1,219,1,219,1,220,1,220,
        3,220,2400,8,220,1,220,1,220,1,220,1,220,1,221,1,221,1,221,1,221,
        1,222,1,222,5,222,2412,8,222,10,222,12,222,2415,9,222,1,223,1,223,
        1,223,1,224,1,224,3,224,2422,8,224,1,225,1,225,1,225,1,225,1,225,
        5,225,2429,8,225,10,225,12,225,2432,9,225,3,225,2434,8,225,1,225,
        1,225,1,226,1,226,3,226,2440,8,226,1,227,1,227,1,227,3,227,2445,
        8,227,1,227,1,227,1,228,1,228,1,229,1,229,1,229,1,229,1,229,1,229,
        1,229,3,229,2458,8,229,1,230,1,230,3,230,2462,8,230,1,231,1,231,
        1,231,1,231,1,232,1,232,1,232,1,232,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,234,1,234,3,234,2483,8,234,1,235,1,235,
        4,235,2487,8,235,11,235,12,235,2488,1,236,1,236,1,236,3,236,2494,
        8,236,1,237,1,237,1,237,1,238,1,238,1,238,1,238,1,239,1,239,1,239,
        1,239,1,239,1,240,1,240,1,240,3,240,2511,8,240,1,241,1,241,1,242,
        1,242,1,243,1,243,1,244,1,244,1,244,3,244,2522,8,244,1,245,1,245,
        1,245,1,245,1,246,1,246,3,246,2530,8,246,1,247,1,247,1,247,1,247,
        1,248,1,248,5,248,2538,8,248,10,248,12,248,2541,9,248,1,248,1,248,
        1,248,3,248,2546,8,248,1,248,1,248,5,248,2550,8,248,10,248,12,248,
        2553,9,248,1,248,3,248,2556,8,248,1,248,1,248,1,249,1,249,3,249,
        2562,8,249,1,249,1,249,5,249,2566,8,249,10,249,12,249,2569,9,249,
        1,249,3,249,2572,8,249,1,249,1,249,1,250,1,250,1,250,1,250,1,251,
        1,251,5,251,2582,8,251,10,251,12,251,2585,9,251,1,251,1,251,1,251,
        1,251,1,251,5,251,2592,8,251,10,251,12,251,2595,9,251,1,251,1,251,
        3,251,2599,8,251,1,252,1,252,1,252,1,252,1,252,5,252,2606,8,252,
        10,252,12,252,2609,9,252,1,252,3,252,2612,8,252,3,252,2614,8,252,
        1,252,1,252,1,253,1,253,1,253,1,253,1,253,3,253,2623,8,253,1,254,
        1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,255,1,255,1,255,1,255,
        1,255,1,256,1,256,1,256,1,256,1,256,1,257,1,257,1,257,1,257,1,257,
        1,258,1,258,1,259,1,259,1,260,1,260,1,261,1,261,1,262,1,262,1,263,
        1,263,1,264,1,264,3,264,2662,8,264,1,265,1,265,1,265,3,265,2667,
        8,265,1,266,1,266,1,267,1,267,1,268,1,268,1,269,1,269,1,269,1,269,
        1,270,1,270,3,270,2681,8,270,1,271,1,271,1,271,3,271,2686,8,271,
        1,272,1,272,1,272,1,272,3,272,2692,8,272,1,273,1,273,1,273,3,273,
        2697,8,273,1,274,3,274,2700,8,274,1,274,1,274,5,274,2704,8,274,10,
        274,12,274,2707,9,274,1,275,1,275,1,275,3,275,2712,8,275,1,276,1,
        276,1,276,1,276,1,276,3,276,2719,8,276,1,277,1,277,3,277,2723,8,
        277,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,
        1,278,3,278,2736,8,278,1,279,1,279,1,279,1,279,1,279,1,279,1,279,
        3,279,2745,8,279,1,280,1,280,1,280,1,280,1,280,3,280,2752,8,280,
        1,281,1,281,3,281,2756,8,281,1,282,1,282,1,283,1,283,1,284,1,284,
        1,285,1,285,1,286,1,286,1,287,1,287,1,288,1,288,1,289,1,289,1,290,
        1,290,1,291,1,291,1,291,1,292,1,292,1,292,1,293,1,293,5,293,2784,
        8,293,10,293,12,293,2787,9,293,1,294,1,294,1,294,1,294,1,294,1,295,
        1,295,1,295,1,295,1,295,1,295,1,295,1,295,1,295,1,295,1,295,3,295,
        2805,8,295,1,296,1,296,1,296,1,296,5,296,2811,8,296,10,296,12,296,
        2814,9,296,3,296,2816,8,296,1,296,1,296,1,297,1,297,1,297,1,297,
        1,298,1,298,1,298,1,298,5,298,2828,8,298,10,298,12,298,2831,9,298,
        3,298,2833,8,298,1,298,1,298,1,299,1,299,1,300,1,300,1,301,1,301,
        1,302,1,302,1,303,1,303,5,303,2847,8,303,10,303,12,303,2850,9,303,
        1,304,1,304,1,305,3,305,2855,8,305,1,305,1,305,1,306,3,306,2860,
        8,306,1,306,1,306,1,306,0,0,307,0,2,4,6,8,10,12,14,16,18,20,22,24,
        26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
        70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
        110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
        142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
        174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,
        206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,
        238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,
        270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,
        302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,
        334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,
        366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,
        398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,
        430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,
        462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,
        494,496,498,500,502,504,506,508,510,512,514,516,518,520,522,524,
        526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,556,
        558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,
        590,592,594,596,598,600,602,604,606,608,610,612,0,37,2,0,12,13,25,
        25,2,0,14,14,26,26,1,0,6,7,2,0,78,78,162,162,1,0,12,13,2,0,158,158,
        160,160,2,0,159,159,161,161,2,0,217,218,230,230,3,0,48,48,76,76,
        98,99,15,0,37,37,44,44,46,46,52,52,58,58,60,60,139,139,147,148,203,
        204,225,225,235,235,240,240,243,245,253,253,321,321,4,0,74,74,154,
        154,233,234,257,257,2,0,146,146,150,150,2,0,113,113,260,260,3,0,
        50,50,163,163,194,194,3,0,42,42,140,140,163,163,2,0,190,190,231,
        231,2,0,48,48,76,76,2,0,92,92,140,140,2,0,145,145,241,241,2,0,90,
        90,261,261,14,0,51,51,56,56,67,68,73,73,85,85,97,97,114,124,130,
        130,135,136,138,138,202,202,232,232,263,266,268,269,14,0,51,51,56,
        56,67,68,73,73,85,85,114,124,130,130,135,136,138,138,202,202,232,
        232,263,266,268,269,321,321,3,0,18,18,20,20,28,28,3,0,106,107,131,
        132,176,177,2,0,54,54,165,165,2,0,22,24,27,27,2,0,11,11,33,33,3,
        0,1,1,32,32,35,35,11,0,19,19,21,21,62,64,79,80,105,105,108,112,143,
        144,155,155,166,175,178,183,236,237,2,0,42,42,126,126,3,0,138,138,
        264,264,268,268,1,0,87,88,4,0,310,310,312,312,315,316,318,320,4,
        0,281,287,289,291,294,299,306,309,1,0,281,306,39,0,38,38,40,42,50,
        50,53,53,55,55,59,59,69,69,72,72,74,75,78,78,82,83,89,89,94,95,113,
        113,125,125,127,129,133,133,141,142,146,146,148,150,154,154,162,
        163,184,185,187,188,192,193,198,199,201,201,205,205,214,216,219,
        221,228,228,233,234,238,238,242,242,254,254,257,260,262,262,270,
        281,289,289,25,0,39,39,47,47,57,57,61,62,66,66,71,71,77,77,86,87,
        90,91,105,105,131,131,134,134,145,145,156,156,186,186,195,195,206,
        206,222,224,226,227,229,229,231,231,239,239,241,241,246,252,261,
        261,2985,0,614,1,0,0,0,2,616,1,0,0,0,4,636,1,0,0,0,6,638,1,0,0,0,
        8,649,1,0,0,0,10,651,1,0,0,0,12,656,1,0,0,0,14,666,1,0,0,0,16,677,
        1,0,0,0,18,685,1,0,0,0,20,693,1,0,0,0,22,709,1,0,0,0,24,711,1,0,
        0,0,26,717,1,0,0,0,28,720,1,0,0,0,30,726,1,0,0,0,32,730,1,0,0,0,
        34,741,1,0,0,0,36,745,1,0,0,0,38,764,1,0,0,0,40,766,1,0,0,0,42,772,
        1,0,0,0,44,785,1,0,0,0,46,796,1,0,0,0,48,800,1,0,0,0,50,804,1,0,
        0,0,52,813,1,0,0,0,54,824,1,0,0,0,56,829,1,0,0,0,58,831,1,0,0,0,
        60,843,1,0,0,0,62,859,1,0,0,0,64,861,1,0,0,0,66,869,1,0,0,0,68,871,
        1,0,0,0,70,884,1,0,0,0,72,890,1,0,0,0,74,892,1,0,0,0,76,894,1,0,
        0,0,78,901,1,0,0,0,80,904,1,0,0,0,82,917,1,0,0,0,84,969,1,0,0,0,
        86,975,1,0,0,0,88,1002,1,0,0,0,90,1004,1,0,0,0,92,1013,1,0,0,0,94,
        1016,1,0,0,0,96,1023,1,0,0,0,98,1034,1,0,0,0,100,1045,1,0,0,0,102,
        1047,1,0,0,0,104,1055,1,0,0,0,106,1066,1,0,0,0,108,1069,1,0,0,0,
        110,1078,1,0,0,0,112,1080,1,0,0,0,114,1094,1,0,0,0,116,1097,1,0,
        0,0,118,1102,1,0,0,0,120,1120,1,0,0,0,122,1128,1,0,0,0,124,1140,
        1,0,0,0,126,1151,1,0,0,0,128,1153,1,0,0,0,130,1157,1,0,0,0,132,1160,
        1,0,0,0,134,1165,1,0,0,0,136,1167,1,0,0,0,138,1172,1,0,0,0,140,1174,
        1,0,0,0,142,1184,1,0,0,0,144,1186,1,0,0,0,146,1194,1,0,0,0,148,1201,
        1,0,0,0,150,1207,1,0,0,0,152,1210,1,0,0,0,154,1217,1,0,0,0,156,1220,
        1,0,0,0,158,1222,1,0,0,0,160,1229,1,0,0,0,162,1249,1,0,0,0,164,1251,
        1,0,0,0,166,1255,1,0,0,0,168,1257,1,0,0,0,170,1264,1,0,0,0,172,1269,
        1,0,0,0,174,1272,1,0,0,0,176,1281,1,0,0,0,178,1286,1,0,0,0,180,1291,
        1,0,0,0,182,1301,1,0,0,0,184,1304,1,0,0,0,186,1321,1,0,0,0,188,1324,
        1,0,0,0,190,1336,1,0,0,0,192,1347,1,0,0,0,194,1350,1,0,0,0,196,1360,
        1,0,0,0,198,1387,1,0,0,0,200,1389,1,0,0,0,202,1401,1,0,0,0,204,1418,
        1,0,0,0,206,1422,1,0,0,0,208,1427,1,0,0,0,210,1433,1,0,0,0,212,1456,
        1,0,0,0,214,1459,1,0,0,0,216,1463,1,0,0,0,218,1467,1,0,0,0,220,1479,
        1,0,0,0,222,1488,1,0,0,0,224,1497,1,0,0,0,226,1523,1,0,0,0,228,1526,
        1,0,0,0,230,1529,1,0,0,0,232,1533,1,0,0,0,234,1536,1,0,0,0,236,1554,
        1,0,0,0,238,1558,1,0,0,0,240,1566,1,0,0,0,242,1572,1,0,0,0,244,1576,
        1,0,0,0,246,1582,1,0,0,0,248,1594,1,0,0,0,250,1600,1,0,0,0,252,1608,
        1,0,0,0,254,1614,1,0,0,0,256,1626,1,0,0,0,258,1642,1,0,0,0,260,1647,
        1,0,0,0,262,1651,1,0,0,0,264,1655,1,0,0,0,266,1670,1,0,0,0,268,1673,
        1,0,0,0,270,1682,1,0,0,0,272,1693,1,0,0,0,274,1702,1,0,0,0,276,1713,
        1,0,0,0,278,1724,1,0,0,0,280,1735,1,0,0,0,282,1739,1,0,0,0,284,1751,
        1,0,0,0,286,1760,1,0,0,0,288,1766,1,0,0,0,290,1781,1,0,0,0,292,1836,
        1,0,0,0,294,1838,1,0,0,0,296,1859,1,0,0,0,298,1861,1,0,0,0,300,1872,
        1,0,0,0,302,1881,1,0,0,0,304,1906,1,0,0,0,306,1912,1,0,0,0,308,1922,
        1,0,0,0,310,1934,1,0,0,0,312,1949,1,0,0,0,314,1953,1,0,0,0,316,1962,
        1,0,0,0,318,1966,1,0,0,0,320,1984,1,0,0,0,322,1988,1,0,0,0,324,2000,
        1,0,0,0,326,2015,1,0,0,0,328,2031,1,0,0,0,330,2035,1,0,0,0,332,2041,
        1,0,0,0,334,2061,1,0,0,0,336,2073,1,0,0,0,338,2077,1,0,0,0,340,2096,
        1,0,0,0,342,2107,1,0,0,0,344,2114,1,0,0,0,346,2117,1,0,0,0,348,2125,
        1,0,0,0,350,2137,1,0,0,0,352,2142,1,0,0,0,354,2160,1,0,0,0,356,2162,
        1,0,0,0,358,2171,1,0,0,0,360,2176,1,0,0,0,362,2189,1,0,0,0,364,2191,
        1,0,0,0,366,2198,1,0,0,0,368,2201,1,0,0,0,370,2207,1,0,0,0,372,2213,
        1,0,0,0,374,2220,1,0,0,0,376,2226,1,0,0,0,378,2230,1,0,0,0,380,2241,
        1,0,0,0,382,2245,1,0,0,0,384,2247,1,0,0,0,386,2254,1,0,0,0,388,2257,
        1,0,0,0,390,2264,1,0,0,0,392,2272,1,0,0,0,394,2274,1,0,0,0,396,2278,
        1,0,0,0,398,2291,1,0,0,0,400,2299,1,0,0,0,402,2303,1,0,0,0,404,2308,
        1,0,0,0,406,2315,1,0,0,0,408,2318,1,0,0,0,410,2325,1,0,0,0,412,2330,
        1,0,0,0,414,2332,1,0,0,0,416,2341,1,0,0,0,418,2345,1,0,0,0,420,2347,
        1,0,0,0,422,2352,1,0,0,0,424,2359,1,0,0,0,426,2364,1,0,0,0,428,2366,
        1,0,0,0,430,2375,1,0,0,0,432,2377,1,0,0,0,434,2380,1,0,0,0,436,2384,
        1,0,0,0,438,2389,1,0,0,0,440,2397,1,0,0,0,442,2405,1,0,0,0,444,2409,
        1,0,0,0,446,2416,1,0,0,0,448,2421,1,0,0,0,450,2423,1,0,0,0,452,2439,
        1,0,0,0,454,2441,1,0,0,0,456,2448,1,0,0,0,458,2457,1,0,0,0,460,2459,
        1,0,0,0,462,2463,1,0,0,0,464,2467,1,0,0,0,466,2471,1,0,0,0,468,2482,
        1,0,0,0,470,2484,1,0,0,0,472,2493,1,0,0,0,474,2495,1,0,0,0,476,2498,
        1,0,0,0,478,2502,1,0,0,0,480,2510,1,0,0,0,482,2512,1,0,0,0,484,2514,
        1,0,0,0,486,2516,1,0,0,0,488,2521,1,0,0,0,490,2523,1,0,0,0,492,2529,
        1,0,0,0,494,2531,1,0,0,0,496,2535,1,0,0,0,498,2559,1,0,0,0,500,2575,
        1,0,0,0,502,2579,1,0,0,0,504,2600,1,0,0,0,506,2617,1,0,0,0,508,2624,
        1,0,0,0,510,2632,1,0,0,0,512,2637,1,0,0,0,514,2642,1,0,0,0,516,2647,
        1,0,0,0,518,2649,1,0,0,0,520,2651,1,0,0,0,522,2653,1,0,0,0,524,2655,
        1,0,0,0,526,2657,1,0,0,0,528,2661,1,0,0,0,530,2666,1,0,0,0,532,2668,
        1,0,0,0,534,2670,1,0,0,0,536,2672,1,0,0,0,538,2674,1,0,0,0,540,2680,
        1,0,0,0,542,2685,1,0,0,0,544,2691,1,0,0,0,546,2696,1,0,0,0,548,2699,
        1,0,0,0,550,2711,1,0,0,0,552,2718,1,0,0,0,554,2722,1,0,0,0,556,2735,
        1,0,0,0,558,2744,1,0,0,0,560,2751,1,0,0,0,562,2755,1,0,0,0,564,2757,
        1,0,0,0,566,2759,1,0,0,0,568,2761,1,0,0,0,570,2763,1,0,0,0,572,2765,
        1,0,0,0,574,2767,1,0,0,0,576,2769,1,0,0,0,578,2771,1,0,0,0,580,2773,
        1,0,0,0,582,2775,1,0,0,0,584,2778,1,0,0,0,586,2781,1,0,0,0,588,2788,
        1,0,0,0,590,2804,1,0,0,0,592,2806,1,0,0,0,594,2819,1,0,0,0,596,2823,
        1,0,0,0,598,2836,1,0,0,0,600,2838,1,0,0,0,602,2840,1,0,0,0,604,2842,
        1,0,0,0,606,2844,1,0,0,0,608,2851,1,0,0,0,610,2854,1,0,0,0,612,2859,
        1,0,0,0,614,615,3,2,1,0,615,1,1,0,0,0,616,621,3,4,2,0,617,618,5,
        34,0,0,618,620,3,4,2,0,619,617,1,0,0,0,620,623,1,0,0,0,621,619,1,
        0,0,0,621,622,1,0,0,0,622,625,1,0,0,0,623,621,1,0,0,0,624,626,5,
        34,0,0,625,624,1,0,0,0,625,626,1,0,0,0,626,627,1,0,0,0,627,628,5,
        0,0,1,628,3,1,0,0,0,629,637,3,6,3,0,630,637,3,40,20,0,631,637,3,
        68,34,0,632,637,3,8,4,0,633,637,3,72,36,0,634,637,3,60,30,0,635,
        637,3,64,32,0,636,629,1,0,0,0,636,630,1,0,0,0,636,631,1,0,0,0,636,
        632,1,0,0,0,636,633,1,0,0,0,636,634,1,0,0,0,636,635,1,0,0,0,637,
        5,1,0,0,0,638,639,5,41,0,0,639,640,5,69,0,0,640,641,3,542,271,0,
        641,642,5,17,0,0,642,643,3,382,191,0,643,7,1,0,0,0,644,650,3,12,
        6,0,645,650,3,14,7,0,646,650,3,10,5,0,647,650,3,18,9,0,648,650,3,
        20,10,0,649,644,1,0,0,0,649,645,1,0,0,0,649,646,1,0,0,0,649,647,
        1,0,0,0,649,648,1,0,0,0,650,9,1,0,0,0,651,652,5,142,0,0,652,653,
        3,542,271,0,653,654,5,17,0,0,654,655,3,74,37,0,655,11,1,0,0,0,656,
        657,5,142,0,0,657,658,3,542,271,0,658,659,5,17,0,0,659,661,5,31,
        0,0,660,662,3,22,11,0,661,660,1,0,0,0,661,662,1,0,0,0,662,663,1,
        0,0,0,663,664,5,8,0,0,664,665,3,36,18,0,665,13,1,0,0,0,666,667,5,
        142,0,0,667,668,3,542,271,0,668,669,5,17,0,0,669,670,5,259,0,0,670,
        672,5,31,0,0,671,673,3,16,8,0,672,671,1,0,0,0,672,673,1,0,0,0,673,
        674,1,0,0,0,674,675,5,8,0,0,675,676,3,36,18,0,676,15,1,0,0,0,677,
        682,3,24,12,0,678,679,5,9,0,0,679,681,3,24,12,0,680,678,1,0,0,0,
        681,684,1,0,0,0,682,680,1,0,0,0,682,683,1,0,0,0,683,17,1,0,0,0,684,
        682,1,0,0,0,685,686,5,142,0,0,686,687,3,542,271,0,687,688,5,17,0,
        0,688,689,5,156,0,0,689,690,5,31,0,0,690,691,3,76,38,0,691,692,5,
        8,0,0,692,19,1,0,0,0,693,694,5,142,0,0,694,695,3,542,271,0,695,696,
        5,17,0,0,696,697,3,200,100,0,697,21,1,0,0,0,698,699,3,28,14,0,699,
        700,5,9,0,0,700,701,3,28,14,0,701,702,1,0,0,0,702,703,5,9,0,0,703,
        704,3,24,12,0,704,710,1,0,0,0,705,706,3,24,12,0,706,707,5,9,0,0,
        707,708,3,24,12,0,708,710,1,0,0,0,709,698,1,0,0,0,709,705,1,0,0,
        0,710,23,1,0,0,0,711,712,3,520,260,0,712,713,5,10,0,0,713,715,3,
        516,258,0,714,716,3,26,13,0,715,714,1,0,0,0,715,716,1,0,0,0,716,
        25,1,0,0,0,717,718,5,17,0,0,718,719,3,554,277,0,719,27,1,0,0,0,720,
        721,3,520,260,0,721,724,5,10,0,0,722,725,3,30,15,0,723,725,3,32,
        16,0,724,722,1,0,0,0,724,723,1,0,0,0,725,29,1,0,0,0,726,727,5,31,
        0,0,727,728,5,1,0,0,728,729,5,8,0,0,729,31,1,0,0,0,730,731,5,31,
        0,0,731,736,3,34,17,0,732,733,5,9,0,0,733,735,3,34,17,0,734,732,
        1,0,0,0,735,738,1,0,0,0,736,734,1,0,0,0,736,737,1,0,0,0,737,739,
        1,0,0,0,738,736,1,0,0,0,739,740,5,8,0,0,740,33,1,0,0,0,741,742,3,
        520,260,0,742,743,5,10,0,0,743,744,3,516,258,0,744,35,1,0,0,0,745,
        751,5,29,0,0,746,747,3,38,19,0,747,748,5,34,0,0,748,750,1,0,0,0,
        749,746,1,0,0,0,750,753,1,0,0,0,751,749,1,0,0,0,751,752,1,0,0,0,
        752,755,1,0,0,0,753,751,1,0,0,0,754,756,3,74,37,0,755,754,1,0,0,
        0,755,756,1,0,0,0,756,758,1,0,0,0,757,759,5,34,0,0,758,757,1,0,0,
        0,758,759,1,0,0,0,759,760,1,0,0,0,760,761,5,4,0,0,761,37,1,0,0,0,
        762,765,3,8,4,0,763,765,3,68,34,0,764,762,1,0,0,0,764,763,1,0,0,
        0,765,39,1,0,0,0,766,767,5,72,0,0,767,768,5,201,0,0,768,770,3,522,
        261,0,769,771,3,42,21,0,770,769,1,0,0,0,770,771,1,0,0,0,771,41,1,
        0,0,0,772,773,5,17,0,0,773,775,3,44,22,0,774,776,3,48,24,0,775,774,
        1,0,0,0,775,776,1,0,0,0,776,777,1,0,0,0,777,779,5,29,0,0,778,780,
        3,50,25,0,779,778,1,0,0,0,780,781,1,0,0,0,781,779,1,0,0,0,781,782,
        1,0,0,0,782,783,1,0,0,0,783,784,5,4,0,0,784,43,1,0,0,0,785,786,5,
        31,0,0,786,791,3,46,23,0,787,788,5,9,0,0,788,790,3,46,23,0,789,787,
        1,0,0,0,790,793,1,0,0,0,791,789,1,0,0,0,791,792,1,0,0,0,792,794,
        1,0,0,0,793,791,1,0,0,0,794,795,5,8,0,0,795,45,1,0,0,0,796,797,3,
        520,260,0,797,798,5,10,0,0,798,799,3,516,258,0,799,47,1,0,0,0,800,
        801,5,30,0,0,801,802,3,46,23,0,802,803,5,5,0,0,803,49,1,0,0,0,804,
        806,3,52,26,0,805,807,3,54,27,0,806,805,1,0,0,0,806,807,1,0,0,0,
        807,808,1,0,0,0,808,809,5,17,0,0,809,811,3,58,29,0,810,812,5,34,
        0,0,811,810,1,0,0,0,811,812,1,0,0,0,812,51,1,0,0,0,813,814,5,31,
        0,0,814,819,3,56,28,0,815,816,5,9,0,0,816,818,3,56,28,0,817,815,
        1,0,0,0,818,821,1,0,0,0,819,817,1,0,0,0,819,820,1,0,0,0,820,822,
        1,0,0,0,821,819,1,0,0,0,822,823,5,8,0,0,823,53,1,0,0,0,824,825,5,
        15,0,0,825,826,5,30,0,0,826,827,3,56,28,0,827,828,5,5,0,0,828,55,
        1,0,0,0,829,830,3,586,293,0,830,57,1,0,0,0,831,837,5,29,0,0,832,
        833,3,38,19,0,833,834,5,34,0,0,834,836,1,0,0,0,835,832,1,0,0,0,836,
        839,1,0,0,0,837,835,1,0,0,0,837,838,1,0,0,0,838,840,1,0,0,0,839,
        837,1,0,0,0,840,841,3,74,37,0,841,842,5,4,0,0,842,59,1,0,0,0,843,
        844,5,221,0,0,844,845,5,38,0,0,845,846,5,247,0,0,846,847,5,31,0,
        0,847,852,3,62,31,0,848,849,5,9,0,0,849,851,3,62,31,0,850,848,1,
        0,0,0,851,854,1,0,0,0,852,850,1,0,0,0,852,853,1,0,0,0,853,855,1,
        0,0,0,854,852,1,0,0,0,855,856,5,8,0,0,856,61,1,0,0,0,857,860,3,522,
        261,0,858,860,3,488,244,0,859,857,1,0,0,0,859,858,1,0,0,0,860,63,
        1,0,0,0,861,862,5,229,0,0,862,865,3,540,270,0,863,864,5,17,0,0,864,
        866,3,66,33,0,865,863,1,0,0,0,865,866,1,0,0,0,866,65,1,0,0,0,867,
        870,3,540,270,0,868,870,3,554,277,0,869,867,1,0,0,0,869,868,1,0,
        0,0,870,67,1,0,0,0,871,872,5,72,0,0,872,873,5,214,0,0,873,874,5,
        31,0,0,874,879,3,70,35,0,875,876,5,9,0,0,876,878,3,70,35,0,877,875,
        1,0,0,0,878,881,1,0,0,0,879,877,1,0,0,0,879,880,1,0,0,0,880,882,
        1,0,0,0,881,879,1,0,0,0,882,883,5,8,0,0,883,69,1,0,0,0,884,885,3,
        520,260,0,885,886,5,10,0,0,886,888,3,516,258,0,887,889,3,26,13,0,
        888,887,1,0,0,0,888,889,1,0,0,0,889,71,1,0,0,0,890,891,3,74,37,0,
        891,73,1,0,0,0,892,893,3,76,38,0,893,75,1,0,0,0,894,898,3,82,41,
        0,895,897,3,78,39,0,896,895,1,0,0,0,897,900,1,0,0,0,898,896,1,0,
        0,0,898,899,1,0,0,0,899,77,1,0,0,0,900,898,1,0,0,0,901,902,5,3,0,
        0,902,903,3,84,42,0,903,79,1,0,0,0,904,908,3,84,42,0,905,907,3,78,
        39,0,906,905,1,0,0,0,907,910,1,0,0,0,908,906,1,0,0,0,908,909,1,0,
        0,0,909,81,1,0,0,0,910,908,1,0,0,0,911,918,3,86,43,0,912,918,3,268,
        134,0,913,918,3,196,98,0,914,918,3,466,233,0,915,918,3,380,190,0,
        916,918,3,382,191,0,917,911,1,0,0,0,917,912,1,0,0,0,917,913,1,0,
        0,0,917,914,1,0,0,0,917,915,1,0,0,0,917,916,1,0,0,0,918,83,1,0,0,
        0,919,970,3,90,45,0,920,970,3,92,46,0,921,970,3,94,47,0,922,970,
        3,96,48,0,923,970,3,98,49,0,924,970,3,110,55,0,925,970,3,108,54,
        0,926,970,3,112,56,0,927,970,3,118,59,0,928,970,3,146,73,0,929,970,
        3,156,78,0,930,970,3,158,79,0,931,970,3,160,80,0,932,970,3,176,88,
        0,933,970,3,184,92,0,934,970,3,178,89,0,935,970,3,186,93,0,936,970,
        3,188,94,0,937,970,3,194,97,0,938,970,3,202,101,0,939,970,3,210,
        105,0,940,970,3,234,117,0,941,970,3,224,112,0,942,970,3,104,52,0,
        943,970,3,238,119,0,944,970,3,252,126,0,945,970,3,250,125,0,946,
        970,3,256,128,0,947,970,3,264,132,0,948,970,3,274,137,0,949,970,
        3,270,135,0,950,970,3,276,138,0,951,970,3,278,139,0,952,970,3,272,
        136,0,953,970,3,282,141,0,954,970,3,286,143,0,955,970,3,300,150,
        0,956,970,3,298,149,0,957,970,3,302,151,0,958,970,3,318,159,0,959,
        970,3,324,162,0,960,970,3,326,163,0,961,970,3,332,166,0,962,970,
        3,338,169,0,963,970,3,342,171,0,964,970,3,340,170,0,965,970,3,346,
        173,0,966,970,3,352,176,0,967,970,3,356,178,0,968,970,3,358,179,
        0,969,919,1,0,0,0,969,920,1,0,0,0,969,921,1,0,0,0,969,922,1,0,0,
        0,969,923,1,0,0,0,969,924,1,0,0,0,969,925,1,0,0,0,969,926,1,0,0,
        0,969,927,1,0,0,0,969,928,1,0,0,0,969,929,1,0,0,0,969,930,1,0,0,
        0,969,931,1,0,0,0,969,932,1,0,0,0,969,933,1,0,0,0,969,934,1,0,0,
        0,969,935,1,0,0,0,969,936,1,0,0,0,969,937,1,0,0,0,969,938,1,0,0,
        0,969,939,1,0,0,0,969,940,1,0,0,0,969,941,1,0,0,0,969,942,1,0,0,
        0,969,943,1,0,0,0,969,944,1,0,0,0,969,945,1,0,0,0,969,946,1,0,0,
        0,969,947,1,0,0,0,969,948,1,0,0,0,969,949,1,0,0,0,969,950,1,0,0,
        0,969,951,1,0,0,0,969,952,1,0,0,0,969,953,1,0,0,0,969,954,1,0,0,
        0,969,955,1,0,0,0,969,956,1,0,0,0,969,957,1,0,0,0,969,958,1,0,0,
        0,969,959,1,0,0,0,969,960,1,0,0,0,969,961,1,0,0,0,969,962,1,0,0,
        0,969,963,1,0,0,0,969,964,1,0,0,0,969,965,1,0,0,0,969,966,1,0,0,
        0,969,967,1,0,0,0,969,968,1,0,0,0,970,85,1,0,0,0,971,976,3,118,59,
        0,972,976,3,318,159,0,973,976,3,352,176,0,974,976,3,104,52,0,975,
        971,1,0,0,0,975,972,1,0,0,0,975,973,1,0,0,0,975,974,1,0,0,0,976,
        87,1,0,0,0,977,1003,3,96,48,0,978,1003,3,108,54,0,979,1003,3,356,
        178,0,980,1003,3,238,119,0,981,1003,3,250,125,0,982,1003,3,338,169,
        0,983,1003,3,346,173,0,984,1003,3,274,137,0,985,1003,3,270,135,0,
        986,1003,3,276,138,0,987,1003,3,278,139,0,988,1003,3,272,136,0,989,
        1003,3,332,166,0,990,1003,3,98,49,0,991,1003,3,342,171,0,992,1003,
        3,340,170,0,993,1003,3,326,163,0,994,1003,3,234,117,0,995,1003,3,
        282,141,0,996,1003,3,300,150,0,997,1003,3,298,149,0,998,1003,3,90,
        45,0,999,1003,3,186,93,0,1000,1003,3,110,55,0,1001,1003,3,302,151,
        0,1002,977,1,0,0,0,1002,978,1,0,0,0,1002,979,1,0,0,0,1002,980,1,
        0,0,0,1002,981,1,0,0,0,1002,982,1,0,0,0,1002,983,1,0,0,0,1002,984,
        1,0,0,0,1002,985,1,0,0,0,1002,986,1,0,0,0,1002,987,1,0,0,0,1002,
        988,1,0,0,0,1002,989,1,0,0,0,1002,990,1,0,0,0,1002,991,1,0,0,0,1002,
        992,1,0,0,0,1002,993,1,0,0,0,1002,994,1,0,0,0,1002,995,1,0,0,0,1002,
        996,1,0,0,0,1002,997,1,0,0,0,1002,998,1,0,0,0,1002,999,1,0,0,0,1002,
        1000,1,0,0,0,1002,1001,1,0,0,0,1003,89,1,0,0,0,1004,1008,5,47,0,
        0,1005,1007,3,370,185,0,1006,1005,1,0,0,0,1007,1010,1,0,0,0,1008,
        1006,1,0,0,0,1008,1009,1,0,0,0,1009,1011,1,0,0,0,1010,1008,1,0,0,
        0,1011,1012,3,542,271,0,1012,91,1,0,0,0,1013,1014,5,49,0,0,1014,
        1015,3,498,249,0,1015,93,1,0,0,0,1016,1020,5,61,0,0,1017,1019,3,
        370,185,0,1018,1017,1,0,0,0,1019,1022,1,0,0,0,1020,1018,1,0,0,0,
        1020,1021,1,0,0,0,1021,95,1,0,0,0,1022,1020,1,0,0,0,1023,1027,5,
        66,0,0,1024,1026,3,370,185,0,1025,1024,1,0,0,0,1026,1029,1,0,0,0,
        1027,1025,1,0,0,0,1027,1028,1,0,0,0,1028,1032,1,0,0,0,1029,1027,
        1,0,0,0,1030,1031,5,47,0,0,1031,1033,3,530,265,0,1032,1030,1,0,0,
        0,1032,1033,1,0,0,0,1033,97,1,0,0,0,1034,1038,5,77,0,0,1035,1037,
        3,370,185,0,1036,1035,1,0,0,0,1037,1040,1,0,0,0,1038,1036,1,0,0,
        0,1038,1039,1,0,0,0,1039,1043,1,0,0,0,1040,1038,1,0,0,0,1041,1044,
        3,100,50,0,1042,1044,3,102,51,0,1043,1041,1,0,0,0,1043,1042,1,0,
        0,0,1044,99,1,0,0,0,1045,1046,5,1,0,0,1046,101,1,0,0,0,1047,1052,
        3,382,191,0,1048,1049,5,9,0,0,1049,1051,3,382,191,0,1050,1048,1,
        0,0,0,1051,1054,1,0,0,0,1052,1050,1,0,0,0,1052,1053,1,0,0,0,1053,
        103,1,0,0,0,1054,1052,1,0,0,0,1055,1059,5,82,0,0,1056,1058,3,370,
        185,0,1057,1056,1,0,0,0,1058,1061,1,0,0,0,1059,1057,1,0,0,0,1059,
        1060,1,0,0,0,1060,1062,1,0,0,0,1061,1059,1,0,0,0,1062,1064,3,448,
        224,0,1063,1065,3,106,53,0,1064,1063,1,0,0,0,1064,1065,1,0,0,0,1065,
        105,1,0,0,0,1066,1067,5,10,0,0,1067,1068,3,498,249,0,1068,107,1,
        0,0,0,1069,1070,5,86,0,0,1070,1075,3,374,187,0,1071,1072,5,9,0,0,
        1072,1074,3,374,187,0,1073,1071,1,0,0,0,1074,1077,1,0,0,0,1075,1073,
        1,0,0,0,1075,1076,1,0,0,0,1076,109,1,0,0,0,1077,1075,1,0,0,0,1078,
        1079,5,84,0,0,1079,111,1,0,0,0,1080,1081,5,89,0,0,1081,1082,5,57,
        0,0,1082,1087,3,468,234,0,1083,1084,5,9,0,0,1084,1086,3,468,234,
        0,1085,1083,1,0,0,0,1086,1089,1,0,0,0,1087,1085,1,0,0,0,1087,1088,
        1,0,0,0,1088,1092,1,0,0,0,1089,1087,1,0,0,0,1090,1093,3,114,57,0,
        1091,1093,3,116,58,0,1092,1090,1,0,0,0,1092,1091,1,0,0,0,1092,1093,
        1,0,0,0,1093,113,1,0,0,0,1094,1095,5,262,0,0,1095,1096,3,88,44,0,
        1096,115,1,0,0,0,1097,1098,5,262,0,0,1098,1099,5,31,0,0,1099,1100,
        3,152,76,0,1100,1101,5,8,0,0,1101,117,1,0,0,0,1102,1104,5,91,0,0,
        1103,1105,3,462,231,0,1104,1103,1,0,0,0,1104,1105,1,0,0,0,1105,1107,
        1,0,0,0,1106,1108,3,120,60,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,
        1108,1109,1,0,0,0,1109,1112,3,382,191,0,1110,1113,3,124,62,0,1111,
        1113,3,134,67,0,1112,1110,1,0,0,0,1112,1111,1,0,0,0,1112,1113,1,
        0,0,0,1113,1115,1,0,0,0,1114,1116,3,136,68,0,1115,1114,1,0,0,0,1115,
        1116,1,0,0,0,1116,119,1,0,0,0,1117,1119,3,370,185,0,1118,1117,1,
        0,0,0,1119,1122,1,0,0,0,1120,1118,1,0,0,0,1120,1121,1,0,0,0,1121,
        1124,1,0,0,0,1122,1120,1,0,0,0,1123,1125,3,122,61,0,1124,1123,1,
        0,0,0,1124,1125,1,0,0,0,1125,1126,1,0,0,0,1126,1127,5,261,0,0,1127,
        121,1,0,0,0,1128,1129,5,131,0,0,1129,1130,5,31,0,0,1130,1135,3,142,
        71,0,1131,1132,5,9,0,0,1132,1134,3,142,71,0,1133,1131,1,0,0,0,1134,
        1137,1,0,0,0,1135,1133,1,0,0,0,1135,1136,1,0,0,0,1136,1138,1,0,0,
        0,1137,1135,1,0,0,0,1138,1139,5,8,0,0,1139,123,1,0,0,0,1140,1141,
        5,207,0,0,1141,1146,3,126,63,0,1142,1143,5,9,0,0,1143,1145,3,126,
        63,0,1144,1142,1,0,0,0,1145,1148,1,0,0,0,1146,1144,1,0,0,0,1146,
        1147,1,0,0,0,1147,125,1,0,0,0,1148,1146,1,0,0,0,1149,1152,3,128,
        64,0,1150,1152,3,132,66,0,1151,1149,1,0,0,0,1151,1150,1,0,0,0,1152,
        127,1,0,0,0,1153,1155,3,520,260,0,1154,1156,3,130,65,0,1155,1154,
        1,0,0,0,1155,1156,1,0,0,0,1156,129,1,0,0,0,1157,1158,5,10,0,0,1158,
        1159,3,518,259,0,1159,131,1,0,0,0,1160,1161,5,193,0,0,1161,1162,
        5,31,0,0,1162,1163,5,1,0,0,1163,1164,5,8,0,0,1164,133,1,0,0,0,1165,
        1166,5,213,0,0,1166,135,1,0,0,0,1167,1170,5,209,0,0,1168,1171,3,
        138,69,0,1169,1171,3,140,70,0,1170,1168,1,0,0,0,1170,1169,1,0,0,
        0,1171,137,1,0,0,0,1172,1173,5,1,0,0,1173,139,1,0,0,0,1174,1179,
        3,128,64,0,1175,1176,5,9,0,0,1176,1178,3,128,64,0,1177,1175,1,0,
        0,0,1178,1181,1,0,0,0,1179,1177,1,0,0,0,1179,1180,1,0,0,0,1180,141,
        1,0,0,0,1181,1179,1,0,0,0,1182,1185,3,144,72,0,1183,1185,3,488,244,
        0,1184,1182,1,0,0,0,1184,1183,1,0,0,0,1185,143,1,0,0,0,1186,1191,
        3,482,241,0,1187,1188,5,3,0,0,1188,1190,3,90,45,0,1189,1187,1,0,
        0,0,1190,1193,1,0,0,0,1191,1189,1,0,0,0,1191,1192,1,0,0,0,1192,145,
        1,0,0,0,1193,1191,1,0,0,0,1194,1196,5,94,0,0,1195,1197,3,148,74,
        0,1196,1195,1,0,0,0,1197,1198,1,0,0,0,1198,1196,1,0,0,0,1198,1199,
        1,0,0,0,1199,147,1,0,0,0,1200,1202,3,150,75,0,1201,1200,1,0,0,0,
        1201,1202,1,0,0,0,1202,1203,1,0,0,0,1203,1204,5,31,0,0,1204,1205,
        3,152,76,0,1205,1206,5,8,0,0,1206,149,1,0,0,0,1207,1208,3,542,271,
        0,1208,1209,5,17,0,0,1209,151,1,0,0,0,1210,1214,3,88,44,0,1211,1213,
        3,154,77,0,1212,1211,1,0,0,0,1213,1216,1,0,0,0,1214,1212,1,0,0,0,
        1214,1215,1,0,0,0,1215,153,1,0,0,0,1216,1214,1,0,0,0,1217,1218,5,
        3,0,0,1218,1219,3,88,44,0,1219,155,1,0,0,0,1220,1221,5,96,0,0,1221,
        157,1,0,0,0,1222,1226,5,100,0,0,1223,1225,3,370,185,0,1224,1223,
        1,0,0,0,1225,1228,1,0,0,0,1226,1224,1,0,0,0,1226,1227,1,0,0,0,1227,
        159,1,0,0,0,1228,1226,1,0,0,0,1229,1233,5,101,0,0,1230,1232,3,370,
        185,0,1231,1230,1,0,0,0,1232,1235,1,0,0,0,1233,1231,1,0,0,0,1233,
        1234,1,0,0,0,1234,1236,1,0,0,0,1235,1233,1,0,0,0,1236,1237,3,162,
        81,0,1237,1238,5,9,0,0,1238,1239,3,162,81,0,1239,1241,1,0,0,0,1240,
        1242,3,172,86,0,1241,1240,1,0,0,0,1241,1242,1,0,0,0,1242,1244,1,
        0,0,0,1243,1245,3,174,87,0,1244,1243,1,0,0,0,1244,1245,1,0,0,0,1245,
        161,1,0,0,0,1246,1250,3,164,82,0,1247,1250,3,166,83,0,1248,1250,
        3,168,84,0,1249,1246,1,0,0,0,1249,1247,1,0,0,0,1249,1248,1,0,0,0,
        1250,163,1,0,0,0,1251,1252,5,31,0,0,1252,1253,3,542,271,0,1253,1254,
        5,8,0,0,1254,165,1,0,0,0,1255,1256,7,0,0,0,1256,167,1,0,0,0,1257,
        1258,7,1,0,0,1258,1260,3,542,271,0,1259,1261,3,170,85,0,1260,1259,
        1,0,0,0,1260,1261,1,0,0,0,1261,1262,1,0,0,0,1262,1263,7,2,0,0,1263,
        169,1,0,0,0,1264,1265,5,1,0,0,1265,1266,3,422,211,0,1266,1267,5,
        16,0,0,1267,1268,3,422,211,0,1268,171,1,0,0,0,1269,1270,5,261,0,
        0,1270,1271,3,74,37,0,1271,173,1,0,0,0,1272,1273,5,207,0,0,1273,
        1278,3,374,187,0,1274,1275,5,9,0,0,1275,1277,3,374,187,0,1276,1274,
        1,0,0,0,1277,1280,1,0,0,0,1278,1276,1,0,0,0,1278,1279,1,0,0,0,1279,
        175,1,0,0,0,1280,1278,1,0,0,0,1281,1282,5,102,0,0,1282,1284,3,422,
        211,0,1283,1285,3,190,95,0,1284,1283,1,0,0,0,1284,1285,1,0,0,0,1285,
        177,1,0,0,0,1286,1287,5,104,0,0,1287,1288,3,180,90,0,1288,1289,5,
        9,0,0,1289,1290,3,180,90,0,1290,179,1,0,0,0,1291,1293,7,3,0,0,1292,
        1294,3,182,91,0,1293,1292,1,0,0,0,1293,1294,1,0,0,0,1294,1298,1,
        0,0,0,1295,1297,3,370,185,0,1296,1295,1,0,0,0,1297,1300,1,0,0,0,
        1298,1296,1,0,0,0,1298,1299,1,0,0,0,1299,181,1,0,0,0,1300,1298,1,
        0,0,0,1301,1302,5,47,0,0,1302,1303,3,542,271,0,1303,183,1,0,0,0,
        1304,1308,5,103,0,0,1305,1307,3,370,185,0,1306,1305,1,0,0,0,1307,
        1310,1,0,0,0,1308,1306,1,0,0,0,1308,1309,1,0,0,0,1309,1311,1,0,0,
        0,1310,1308,1,0,0,0,1311,1312,3,162,81,0,1312,1313,5,9,0,0,1313,
        1314,3,162,81,0,1314,1316,1,0,0,0,1315,1317,3,172,86,0,1316,1315,
        1,0,0,0,1316,1317,1,0,0,0,1317,1319,1,0,0,0,1318,1320,3,174,87,0,
        1319,1318,1,0,0,0,1319,1320,1,0,0,0,1320,185,1,0,0,0,1321,1322,5,
        134,0,0,1322,1323,3,444,222,0,1323,187,1,0,0,0,1324,1328,5,137,0,
        0,1325,1327,3,370,185,0,1326,1325,1,0,0,0,1327,1330,1,0,0,0,1328,
        1326,1,0,0,0,1328,1329,1,0,0,0,1329,1331,1,0,0,0,1330,1328,1,0,0,
        0,1331,1334,3,382,191,0,1332,1335,3,190,95,0,1333,1335,3,192,96,
        0,1334,1332,1,0,0,0,1334,1333,1,0,0,0,1334,1335,1,0,0,0,1335,189,
        1,0,0,0,1336,1345,5,187,0,0,1337,1342,3,382,191,0,1338,1339,5,9,
        0,0,1339,1341,3,382,191,0,1340,1338,1,0,0,0,1341,1344,1,0,0,0,1342,
        1340,1,0,0,0,1342,1343,1,0,0,0,1343,1346,1,0,0,0,1344,1342,1,0,0,
        0,1345,1337,1,0,0,0,1345,1346,1,0,0,0,1346,191,1,0,0,0,1347,1348,
        5,261,0,0,1348,1349,3,382,191,0,1349,193,1,0,0,0,1350,1354,5,149,
        0,0,1351,1353,3,370,185,0,1352,1351,1,0,0,0,1353,1356,1,0,0,0,1354,
        1352,1,0,0,0,1354,1355,1,0,0,0,1355,1357,1,0,0,0,1356,1354,1,0,0,
        0,1357,1358,3,382,191,0,1358,1359,3,190,95,0,1359,195,1,0,0,0,1360,
        1364,5,151,0,0,1361,1363,3,370,185,0,1362,1361,1,0,0,0,1363,1366,
        1,0,0,0,1364,1362,1,0,0,0,1364,1365,1,0,0,0,1365,1367,1,0,0,0,1366,
        1364,1,0,0,0,1367,1368,3,198,99,0,1368,1369,5,47,0,0,1369,1370,3,
        542,271,0,1370,1371,5,31,0,0,1371,1376,3,4,2,0,1372,1373,5,34,0,
        0,1373,1375,3,4,2,0,1374,1372,1,0,0,0,1375,1378,1,0,0,0,1376,1374,
        1,0,0,0,1376,1377,1,0,0,0,1377,1380,1,0,0,0,1378,1376,1,0,0,0,1379,
        1381,5,34,0,0,1380,1379,1,0,0,0,1380,1381,1,0,0,0,1381,1382,1,0,
        0,0,1382,1383,5,8,0,0,1383,197,1,0,0,0,1384,1388,3,200,100,0,1385,
        1388,3,522,261,0,1386,1388,3,468,234,0,1387,1384,1,0,0,0,1387,1385,
        1,0,0,0,1387,1386,1,0,0,0,1388,199,1,0,0,0,1389,1390,5,81,0,0,1390,
        1391,5,30,0,0,1391,1396,3,382,191,0,1392,1393,5,9,0,0,1393,1395,
        3,382,191,0,1394,1392,1,0,0,0,1395,1398,1,0,0,0,1396,1394,1,0,0,
        0,1396,1397,1,0,0,0,1397,1399,1,0,0,0,1398,1396,1,0,0,0,1399,1400,
        5,5,0,0,1400,201,1,0,0,0,1401,1405,5,152,0,0,1402,1404,3,370,185,
        0,1403,1402,1,0,0,0,1404,1407,1,0,0,0,1405,1403,1,0,0,0,1405,1406,
        1,0,0,0,1406,1408,1,0,0,0,1407,1405,1,0,0,0,1408,1409,3,522,261,
        0,1409,1410,7,4,0,0,1410,1413,3,522,261,0,1411,1414,3,204,102,0,
        1412,1414,3,206,103,0,1413,1411,1,0,0,0,1413,1412,1,0,0,0,1413,1414,
        1,0,0,0,1414,1416,1,0,0,0,1415,1417,3,208,104,0,1416,1415,1,0,0,
        0,1416,1417,1,0,0,0,1417,203,1,0,0,0,1418,1419,5,267,0,0,1419,1420,
        5,17,0,0,1420,1421,3,542,271,0,1421,205,1,0,0,0,1422,1423,5,262,
        0,0,1423,1424,3,422,211,0,1424,1425,5,187,0,0,1425,1426,3,522,261,
        0,1426,207,1,0,0,0,1427,1428,5,200,0,0,1428,1429,3,470,235,0,1429,
        1430,5,31,0,0,1430,1431,3,362,181,0,1431,1432,5,8,0,0,1432,209,1,
        0,0,0,1433,1437,5,153,0,0,1434,1436,3,370,185,0,1435,1434,1,0,0,
        0,1436,1439,1,0,0,0,1437,1435,1,0,0,0,1437,1438,1,0,0,0,1438,1440,
        1,0,0,0,1439,1437,1,0,0,0,1440,1445,3,214,107,0,1441,1442,5,9,0,
        0,1442,1444,3,214,107,0,1443,1441,1,0,0,0,1444,1447,1,0,0,0,1445,
        1443,1,0,0,0,1445,1446,1,0,0,0,1446,1448,1,0,0,0,1447,1445,1,0,0,
        0,1448,1451,3,212,106,0,1449,1452,3,218,109,0,1450,1452,3,220,110,
        0,1451,1449,1,0,0,0,1451,1450,1,0,0,0,1452,1454,1,0,0,0,1453,1455,
        3,222,111,0,1454,1453,1,0,0,0,1454,1455,1,0,0,0,1455,211,1,0,0,0,
        1456,1457,5,187,0,0,1457,1458,3,374,187,0,1458,213,1,0,0,0,1459,
        1461,3,374,187,0,1460,1462,3,216,108,0,1461,1460,1,0,0,0,1461,1462,
        1,0,0,0,1462,215,1,0,0,0,1463,1464,5,74,0,0,1464,1465,5,17,0,0,1465,
        1466,3,374,187,0,1466,217,1,0,0,0,1467,1468,5,131,0,0,1468,1469,
        5,215,0,0,1469,1470,5,31,0,0,1470,1471,3,374,187,0,1471,1472,5,9,
        0,0,1472,1473,3,374,187,0,1473,1474,5,9,0,0,1474,1475,3,374,187,
        0,1475,1476,5,8,0,0,1476,219,1,0,0,0,1477,1478,5,95,0,0,1478,1480,
        3,374,187,0,1479,1477,1,0,0,0,1479,1480,1,0,0,0,1480,1483,1,0,0,
        0,1481,1482,5,247,0,0,1482,1484,3,374,187,0,1483,1481,1,0,0,0,1483,
        1484,1,0,0,0,1484,1485,1,0,0,0,1485,1486,5,238,0,0,1486,1487,3,374,
        187,0,1487,221,1,0,0,0,1488,1489,5,57,0,0,1489,1494,3,374,187,0,
        1490,1491,5,9,0,0,1491,1493,3,374,187,0,1492,1490,1,0,0,0,1493,1496,
        1,0,0,0,1494,1492,1,0,0,0,1494,1495,1,0,0,0,1495,223,1,0,0,0,1496,
        1494,1,0,0,0,1497,1501,7,5,0,0,1498,1500,3,368,184,0,1499,1498,1,
        0,0,0,1500,1503,1,0,0,0,1501,1499,1,0,0,0,1501,1502,1,0,0,0,1502,
        1504,1,0,0,0,1503,1501,1,0,0,0,1504,1509,3,230,115,0,1505,1506,5,
        9,0,0,1506,1508,3,230,115,0,1507,1505,1,0,0,0,1508,1511,1,0,0,0,
        1509,1507,1,0,0,0,1509,1510,1,0,0,0,1510,1513,1,0,0,0,1511,1509,
        1,0,0,0,1512,1514,3,226,113,0,1513,1512,1,0,0,0,1513,1514,1,0,0,
        0,1514,1516,1,0,0,0,1515,1517,3,228,114,0,1516,1515,1,0,0,0,1516,
        1517,1,0,0,0,1517,1518,1,0,0,0,1518,1519,5,187,0,0,1519,1520,5,31,
        0,0,1520,1521,3,362,181,0,1521,1522,5,8,0,0,1522,225,1,0,0,0,1523,
        1524,5,145,0,0,1524,1525,3,564,282,0,1525,227,1,0,0,0,1526,1527,
        5,129,0,0,1527,1528,5,320,0,0,1528,229,1,0,0,0,1529,1531,3,374,187,
        0,1530,1532,3,232,116,0,1531,1530,1,0,0,0,1531,1532,1,0,0,0,1532,
        231,1,0,0,0,1533,1534,5,247,0,0,1534,1535,3,516,258,0,1535,233,1,
        0,0,0,1536,1540,7,6,0,0,1537,1539,3,368,184,0,1538,1537,1,0,0,0,
        1539,1542,1,0,0,0,1540,1538,1,0,0,0,1540,1541,1,0,0,0,1541,1543,
        1,0,0,0,1542,1540,1,0,0,0,1543,1548,3,236,118,0,1544,1545,5,9,0,
        0,1545,1547,3,236,118,0,1546,1544,1,0,0,0,1547,1550,1,0,0,0,1548,
        1546,1,0,0,0,1548,1549,1,0,0,0,1549,1552,1,0,0,0,1550,1548,1,0,0,
        0,1551,1553,3,226,113,0,1552,1551,1,0,0,0,1552,1553,1,0,0,0,1553,
        235,1,0,0,0,1554,1556,3,374,187,0,1555,1557,3,232,116,0,1556,1555,
        1,0,0,0,1556,1557,1,0,0,0,1557,237,1,0,0,0,1558,1560,5,195,0,0,1559,
        1561,3,240,120,0,1560,1559,1,0,0,0,1560,1561,1,0,0,0,1561,1562,1,
        0,0,0,1562,1563,3,382,191,0,1563,1564,5,262,0,0,1564,1565,3,246,
        123,0,1565,239,1,0,0,0,1566,1567,5,138,0,0,1567,1568,5,17,0,0,1568,
        1570,7,7,0,0,1569,1571,3,242,121,0,1570,1569,1,0,0,0,1570,1571,1,
        0,0,0,1571,241,1,0,0,0,1572,1573,5,93,0,0,1573,1574,5,17,0,0,1574,
        1575,5,321,0,0,1575,243,1,0,0,0,1576,1579,3,522,261,0,1577,1578,
        5,10,0,0,1578,1580,3,516,258,0,1579,1577,1,0,0,0,1579,1580,1,0,0,
        0,1580,245,1,0,0,0,1581,1583,3,244,122,0,1582,1581,1,0,0,0,1582,
        1583,1,0,0,0,1583,1587,1,0,0,0,1584,1586,3,248,124,0,1585,1584,1,
        0,0,0,1586,1589,1,0,0,0,1587,1585,1,0,0,0,1587,1588,1,0,0,0,1588,
        1591,1,0,0,0,1589,1587,1,0,0,0,1590,1592,5,1,0,0,1591,1590,1,0,0,
        0,1591,1592,1,0,0,0,1592,247,1,0,0,0,1593,1595,5,1,0,0,1594,1593,
        1,0,0,0,1594,1595,1,0,0,0,1595,1596,1,0,0,0,1596,1598,3,586,293,
        0,1597,1599,3,244,122,0,1598,1597,1,0,0,0,1598,1599,1,0,0,0,1599,
        249,1,0,0,0,1600,1602,5,197,0,0,1601,1603,3,240,120,0,1602,1601,
        1,0,0,0,1602,1603,1,0,0,0,1603,1604,1,0,0,0,1604,1605,3,382,191,
        0,1605,1606,5,262,0,0,1606,1607,3,246,123,0,1607,251,1,0,0,0,1608,
        1609,5,196,0,0,1609,1610,3,382,191,0,1610,1612,3,498,249,0,1611,
        1613,3,254,127,0,1612,1611,1,0,0,0,1612,1613,1,0,0,0,1613,253,1,
        0,0,0,1614,1615,5,262,0,0,1615,1616,5,31,0,0,1616,1621,3,372,186,
        0,1617,1618,5,9,0,0,1618,1620,3,372,186,0,1619,1617,1,0,0,0,1620,
        1623,1,0,0,0,1621,1619,1,0,0,0,1621,1622,1,0,0,0,1622,1624,1,0,0,
        0,1623,1621,1,0,0,0,1624,1625,5,8,0,0,1625,255,1,0,0,0,1626,1630,
        5,198,0,0,1627,1629,3,370,185,0,1628,1627,1,0,0,0,1629,1632,1,0,
        0,0,1630,1628,1,0,0,0,1630,1631,1,0,0,0,1631,1633,1,0,0,0,1632,1630,
        1,0,0,0,1633,1634,5,57,0,0,1634,1636,3,468,234,0,1635,1637,3,258,
        129,0,1636,1635,1,0,0,0,1636,1637,1,0,0,0,1637,1640,1,0,0,0,1638,
        1641,3,260,130,0,1639,1641,3,262,131,0,1640,1638,1,0,0,0,1640,1639,
        1,0,0,0,1641,257,1,0,0,0,1642,1645,5,131,0,0,1643,1646,3,448,224,
        0,1644,1646,3,588,294,0,1645,1643,1,0,0,0,1645,1644,1,0,0,0,1646,
        259,1,0,0,0,1647,1648,5,31,0,0,1648,1649,3,80,40,0,1649,1650,5,8,
        0,0,1650,261,1,0,0,0,1651,1652,5,29,0,0,1652,1653,3,76,38,0,1653,
        1654,5,4,0,0,1654,263,1,0,0,0,1655,1659,5,199,0,0,1656,1658,3,370,
        185,0,1657,1656,1,0,0,0,1658,1661,1,0,0,0,1659,1657,1,0,0,0,1659,
        1660,1,0,0,0,1660,1662,1,0,0,0,1661,1659,1,0,0,0,1662,1664,3,468,
        234,0,1663,1665,3,266,133,0,1664,1663,1,0,0,0,1664,1665,1,0,0,0,
        1665,1666,1,0,0,0,1666,1667,5,31,0,0,1667,1668,3,362,181,0,1668,
        1669,5,8,0,0,1669,265,1,0,0,0,1670,1671,5,129,0,0,1671,1672,5,320,
        0,0,1672,267,1,0,0,0,1673,1674,5,206,0,0,1674,1679,3,374,187,0,1675,
        1676,5,9,0,0,1676,1678,3,374,187,0,1677,1675,1,0,0,0,1678,1681,1,
        0,0,0,1679,1677,1,0,0,0,1679,1680,1,0,0,0,1680,269,1,0,0,0,1681,
        1679,1,0,0,0,1682,1691,5,208,0,0,1683,1688,3,528,264,0,1684,1685,
        5,9,0,0,1685,1687,3,528,264,0,1686,1684,1,0,0,0,1687,1690,1,0,0,
        0,1688,1686,1,0,0,0,1688,1689,1,0,0,0,1689,1692,1,0,0,0,1690,1688,
        1,0,0,0,1691,1683,1,0,0,0,1691,1692,1,0,0,0,1692,271,1,0,0,0,1693,
        1694,5,210,0,0,1694,1699,3,528,264,0,1695,1696,5,9,0,0,1696,1698,
        3,528,264,0,1697,1695,1,0,0,0,1698,1701,1,0,0,0,1699,1697,1,0,0,
        0,1699,1700,1,0,0,0,1700,273,1,0,0,0,1701,1699,1,0,0,0,1702,1711,
        5,207,0,0,1703,1708,3,374,187,0,1704,1705,5,9,0,0,1705,1707,3,374,
        187,0,1706,1704,1,0,0,0,1707,1710,1,0,0,0,1708,1706,1,0,0,0,1708,
        1709,1,0,0,0,1709,1712,1,0,0,0,1710,1708,1,0,0,0,1711,1703,1,0,0,
        0,1711,1712,1,0,0,0,1712,275,1,0,0,0,1713,1722,5,211,0,0,1714,1719,
        3,374,187,0,1715,1716,5,9,0,0,1716,1718,3,374,187,0,1717,1715,1,
        0,0,0,1718,1721,1,0,0,0,1719,1717,1,0,0,0,1719,1720,1,0,0,0,1720,
        1723,1,0,0,0,1721,1719,1,0,0,0,1722,1714,1,0,0,0,1722,1723,1,0,0,
        0,1723,277,1,0,0,0,1724,1733,5,212,0,0,1725,1730,3,280,140,0,1726,
        1727,5,9,0,0,1727,1729,3,280,140,0,1728,1726,1,0,0,0,1729,1732,1,
        0,0,0,1730,1728,1,0,0,0,1730,1731,1,0,0,0,1731,1734,1,0,0,0,1732,
        1730,1,0,0,0,1733,1725,1,0,0,0,1733,1734,1,0,0,0,1734,279,1,0,0,
        0,1735,1737,3,528,264,0,1736,1738,7,8,0,0,1737,1736,1,0,0,0,1737,
        1738,1,0,0,0,1738,281,1,0,0,0,1739,1743,5,216,0,0,1740,1742,3,368,
        184,0,1741,1740,1,0,0,0,1742,1745,1,0,0,0,1743,1741,1,0,0,0,1743,
        1744,1,0,0,0,1744,1746,1,0,0,0,1745,1743,1,0,0,0,1746,1747,5,57,
        0,0,1747,1749,3,374,187,0,1748,1750,3,284,142,0,1749,1748,1,0,0,
        0,1749,1750,1,0,0,0,1750,283,1,0,0,0,1751,1752,5,262,0,0,1752,1757,
        3,374,187,0,1753,1754,5,9,0,0,1754,1756,3,374,187,0,1755,1753,1,
        0,0,0,1756,1759,1,0,0,0,1757,1755,1,0,0,0,1757,1758,1,0,0,0,1758,
        285,1,0,0,0,1759,1757,1,0,0,0,1760,1761,5,219,0,0,1761,1764,7,9,
        0,0,1762,1765,3,288,144,0,1763,1765,3,290,145,0,1764,1762,1,0,0,
        0,1764,1763,1,0,0,0,1764,1765,1,0,0,0,1765,287,1,0,0,0,1766,1767,
        5,262,0,0,1767,1776,5,31,0,0,1768,1773,3,292,146,0,1769,1770,5,9,
        0,0,1770,1772,3,292,146,0,1771,1769,1,0,0,0,1772,1775,1,0,0,0,1773,
        1771,1,0,0,0,1773,1774,1,0,0,0,1774,1777,1,0,0,0,1775,1773,1,0,0,
        0,1776,1768,1,0,0,0,1776,1777,1,0,0,0,1777,1778,1,0,0,0,1778,1779,
        5,8,0,0,1779,289,1,0,0,0,1780,1782,3,296,148,0,1781,1780,1,0,0,0,
        1782,1783,1,0,0,0,1783,1781,1,0,0,0,1783,1784,1,0,0,0,1784,291,1,
        0,0,0,1785,1786,5,246,0,0,1786,1787,5,17,0,0,1787,1837,3,424,212,
        0,1788,1789,5,271,0,0,1789,1790,5,17,0,0,1790,1837,3,522,261,0,1791,
        1792,5,228,0,0,1792,1793,5,17,0,0,1793,1837,3,294,147,0,1794,1795,
        5,276,0,0,1795,1796,5,17,0,0,1796,1837,3,294,147,0,1797,1798,5,45,
        0,0,1798,1799,5,17,0,0,1799,1837,3,294,147,0,1800,1801,5,138,0,0,
        1801,1802,5,17,0,0,1802,1837,7,10,0,0,1803,1804,5,274,0,0,1804,1805,
        5,17,0,0,1805,1837,3,424,212,0,1806,1807,5,280,0,0,1807,1808,5,17,
        0,0,1808,1837,3,424,212,0,1809,1810,5,270,0,0,1810,1811,5,17,0,0,
        1811,1837,7,11,0,0,1812,1813,5,275,0,0,1813,1814,5,17,0,0,1814,1837,
        7,11,0,0,1815,1816,5,141,0,0,1816,1817,5,17,0,0,1817,1837,7,12,0,
        0,1818,1819,5,279,0,0,1819,1820,5,17,0,0,1820,1837,7,13,0,0,1821,
        1822,5,39,0,0,1822,1823,5,17,0,0,1823,1837,5,315,0,0,1824,1825,5,
        278,0,0,1825,1826,5,17,0,0,1826,1837,3,560,280,0,1827,1828,5,277,
        0,0,1828,1829,5,17,0,0,1829,1837,3,560,280,0,1830,1831,5,273,0,0,
        1831,1832,5,17,0,0,1832,1837,3,554,277,0,1833,1834,5,272,0,0,1834,
        1835,5,17,0,0,1835,1837,3,554,277,0,1836,1785,1,0,0,0,1836,1788,
        1,0,0,0,1836,1791,1,0,0,0,1836,1794,1,0,0,0,1836,1797,1,0,0,0,1836,
        1800,1,0,0,0,1836,1803,1,0,0,0,1836,1806,1,0,0,0,1836,1809,1,0,0,
        0,1836,1812,1,0,0,0,1836,1815,1,0,0,0,1836,1818,1,0,0,0,1836,1821,
        1,0,0,0,1836,1824,1,0,0,0,1836,1827,1,0,0,0,1836,1830,1,0,0,0,1836,
        1833,1,0,0,0,1837,293,1,0,0,0,1838,1843,3,524,262,0,1839,1840,5,
        9,0,0,1840,1842,3,524,262,0,1841,1839,1,0,0,0,1842,1845,1,0,0,0,
        1843,1841,1,0,0,0,1843,1844,1,0,0,0,1844,295,1,0,0,0,1845,1843,1,
        0,0,0,1846,1847,5,246,0,0,1847,1848,5,17,0,0,1848,1860,3,586,293,
        0,1849,1850,5,138,0,0,1850,1851,5,17,0,0,1851,1860,7,10,0,0,1852,
        1853,5,262,0,0,1853,1860,3,586,293,0,1854,1855,5,57,0,0,1855,1860,
        3,294,147,0,1856,1857,5,39,0,0,1857,1858,5,17,0,0,1858,1860,5,315,
        0,0,1859,1846,1,0,0,0,1859,1849,1,0,0,0,1859,1852,1,0,0,0,1859,1854,
        1,0,0,0,1859,1856,1,0,0,0,1860,297,1,0,0,0,1861,1865,5,223,0,0,1862,
        1864,3,368,184,0,1863,1862,1,0,0,0,1864,1867,1,0,0,0,1865,1863,1,
        0,0,0,1865,1866,1,0,0,0,1866,1868,1,0,0,0,1867,1865,1,0,0,0,1868,
        1869,3,374,187,0,1869,1870,5,186,0,0,1870,1871,3,374,187,0,1871,
        299,1,0,0,0,1872,1876,5,222,0,0,1873,1875,3,368,184,0,1874,1873,
        1,0,0,0,1875,1878,1,0,0,0,1876,1874,1,0,0,0,1876,1877,1,0,0,0,1877,
        1879,1,0,0,0,1878,1876,1,0,0,0,1879,1880,3,374,187,0,1880,301,1,
        0,0,0,1881,1885,5,224,0,0,1882,1884,3,370,185,0,1883,1882,1,0,0,
        0,1884,1887,1,0,0,0,1885,1883,1,0,0,0,1885,1886,1,0,0,0,1886,1889,
        1,0,0,0,1887,1885,1,0,0,0,1888,1890,3,304,152,0,1889,1888,1,0,0,
        0,1889,1890,1,0,0,0,1890,1892,1,0,0,0,1891,1893,3,306,153,0,1892,
        1891,1,0,0,0,1892,1893,1,0,0,0,1893,1895,1,0,0,0,1894,1896,3,308,
        154,0,1895,1894,1,0,0,0,1895,1896,1,0,0,0,1896,1897,1,0,0,0,1897,
        1898,5,262,0,0,1898,1900,5,31,0,0,1899,1901,3,310,155,0,1900,1899,
        1,0,0,0,1901,1902,1,0,0,0,1902,1900,1,0,0,0,1902,1903,1,0,0,0,1903,
        1904,1,0,0,0,1904,1905,5,8,0,0,1905,303,1,0,0,0,1906,1907,5,190,
        0,0,1907,1908,5,57,0,0,1908,1909,3,328,164,0,1909,1910,5,9,0,0,1910,
        1911,3,328,164,0,1911,305,1,0,0,0,1912,1913,5,198,0,0,1913,1914,
        5,57,0,0,1914,1919,3,382,191,0,1915,1916,5,9,0,0,1916,1918,3,382,
        191,0,1917,1915,1,0,0,0,1918,1921,1,0,0,0,1919,1917,1,0,0,0,1919,
        1920,1,0,0,0,1920,307,1,0,0,0,1921,1919,1,0,0,0,1922,1923,5,72,0,
        0,1923,1924,5,31,0,0,1924,1929,3,24,12,0,1925,1926,5,9,0,0,1926,
        1928,3,24,12,0,1927,1925,1,0,0,0,1928,1931,1,0,0,0,1929,1927,1,0,
        0,0,1929,1930,1,0,0,0,1930,1932,1,0,0,0,1931,1929,1,0,0,0,1932,1933,
        5,8,0,0,1933,309,1,0,0,0,1934,1935,5,238,0,0,1935,1937,3,520,260,
        0,1936,1938,5,188,0,0,1937,1936,1,0,0,0,1937,1938,1,0,0,0,1938,1940,
        1,0,0,0,1939,1941,3,312,156,0,1940,1939,1,0,0,0,1940,1941,1,0,0,
        0,1941,1942,1,0,0,0,1942,1943,5,10,0,0,1943,1945,3,382,191,0,1944,
        1946,3,314,157,0,1945,1944,1,0,0,0,1945,1946,1,0,0,0,1946,1947,1,
        0,0,0,1947,1948,5,34,0,0,1948,311,1,0,0,0,1949,1950,5,192,0,0,1950,
        1951,5,17,0,0,1951,1952,7,14,0,0,1952,313,1,0,0,0,1953,1954,5,36,
        0,0,1954,1959,3,316,158,0,1955,1956,5,9,0,0,1956,1958,3,316,158,
        0,1957,1955,1,0,0,0,1958,1961,1,0,0,0,1959,1957,1,0,0,0,1959,1960,
        1,0,0,0,1960,315,1,0,0,0,1961,1959,1,0,0,0,1962,1963,3,520,260,0,
        1963,1964,5,17,0,0,1964,1965,3,382,191,0,1965,317,1,0,0,0,1966,1970,
        5,226,0,0,1967,1969,3,370,185,0,1968,1967,1,0,0,0,1969,1972,1,0,
        0,0,1970,1968,1,0,0,0,1970,1971,1,0,0,0,1971,1974,1,0,0,0,1972,1970,
        1,0,0,0,1973,1975,3,462,231,0,1974,1973,1,0,0,0,1974,1975,1,0,0,
        0,1975,1977,1,0,0,0,1976,1978,3,322,161,0,1977,1976,1,0,0,0,1977,
        1978,1,0,0,0,1978,1982,1,0,0,0,1979,1983,3,382,191,0,1980,1983,3,
        456,228,0,1981,1983,3,320,160,0,1982,1979,1,0,0,0,1982,1980,1,0,
        0,0,1982,1981,1,0,0,0,1983,319,1,0,0,0,1984,1985,5,1,0,0,1985,1986,
        5,43,0,0,1986,1987,3,382,191,0,1987,321,1,0,0,0,1988,1989,5,131,
        0,0,1989,1990,5,31,0,0,1990,1995,3,142,71,0,1991,1992,5,9,0,0,1992,
        1994,3,142,71,0,1993,1991,1,0,0,0,1994,1997,1,0,0,0,1995,1993,1,
        0,0,0,1995,1996,1,0,0,0,1996,1998,1,0,0,0,1997,1995,1,0,0,0,1998,
        1999,5,8,0,0,1999,323,1,0,0,0,2000,2004,5,227,0,0,2001,2003,3,368,
        184,0,2002,2001,1,0,0,0,2003,2006,1,0,0,0,2004,2002,1,0,0,0,2004,
        2005,1,0,0,0,2005,2007,1,0,0,0,2006,2004,1,0,0,0,2007,2012,3,374,
        187,0,2008,2009,5,9,0,0,2009,2011,3,374,187,0,2010,2008,1,0,0,0,
        2011,2014,1,0,0,0,2012,2010,1,0,0,0,2012,2013,1,0,0,0,2013,325,1,
        0,0,0,2014,2012,1,0,0,0,2015,2019,7,15,0,0,2016,2018,3,370,185,0,
        2017,2016,1,0,0,0,2018,2021,1,0,0,0,2019,2017,1,0,0,0,2019,2020,
        1,0,0,0,2020,2022,1,0,0,0,2021,2019,1,0,0,0,2022,2023,5,57,0,0,2023,
        2028,3,328,164,0,2024,2025,5,9,0,0,2025,2027,3,328,164,0,2026,2024,
        1,0,0,0,2027,2030,1,0,0,0,2028,2026,1,0,0,0,2028,2029,1,0,0,0,2029,
        327,1,0,0,0,2030,2028,1,0,0,0,2031,2032,3,374,187,0,2032,2033,3,
        330,165,0,2033,329,1,0,0,0,2034,2036,7,16,0,0,2035,2034,1,0,0,0,
        2035,2036,1,0,0,0,2036,2039,1,0,0,0,2037,2038,5,185,0,0,2038,2040,
        7,17,0,0,2039,2037,1,0,0,0,2039,2040,1,0,0,0,2040,331,1,0,0,0,2041,
        2045,5,239,0,0,2042,2044,3,368,184,0,2043,2042,1,0,0,0,2044,2047,
        1,0,0,0,2045,2043,1,0,0,0,2045,2046,1,0,0,0,2046,2056,1,0,0,0,2047,
        2045,1,0,0,0,2048,2053,3,374,187,0,2049,2050,5,9,0,0,2050,2052,3,
        374,187,0,2051,2049,1,0,0,0,2052,2055,1,0,0,0,2053,2051,1,0,0,0,
        2053,2054,1,0,0,0,2054,2057,1,0,0,0,2055,2053,1,0,0,0,2056,2048,
        1,0,0,0,2056,2057,1,0,0,0,2057,2059,1,0,0,0,2058,2060,3,334,167,
        0,2059,2058,1,0,0,0,2059,2060,1,0,0,0,2060,333,1,0,0,0,2061,2062,
        5,57,0,0,2062,2067,3,374,187,0,2063,2064,5,9,0,0,2064,2066,3,374,
        187,0,2065,2063,1,0,0,0,2066,2069,1,0,0,0,2067,2065,1,0,0,0,2067,
        2068,1,0,0,0,2068,2071,1,0,0,0,2069,2067,1,0,0,0,2070,2072,3,336,
        168,0,2071,2070,1,0,0,0,2071,2072,1,0,0,0,2072,335,1,0,0,0,2073,
        2074,5,55,0,0,2074,2075,5,17,0,0,2075,2076,3,558,279,0,2076,337,
        1,0,0,0,2077,2081,7,18,0,0,2078,2080,3,368,184,0,2079,2078,1,0,0,
        0,2080,2083,1,0,0,0,2081,2079,1,0,0,0,2081,2082,1,0,0,0,2082,2084,
        1,0,0,0,2083,2081,1,0,0,0,2084,2094,3,382,191,0,2085,2086,5,95,0,
        0,2086,2091,3,530,265,0,2087,2088,5,9,0,0,2088,2090,3,530,265,0,
        2089,2087,1,0,0,0,2090,2093,1,0,0,0,2091,2089,1,0,0,0,2091,2092,
        1,0,0,0,2092,2095,1,0,0,0,2093,2091,1,0,0,0,2094,2085,1,0,0,0,2094,
        2095,1,0,0,0,2095,339,1,0,0,0,2096,2100,5,248,0,0,2097,2099,3,368,
        184,0,2098,2097,1,0,0,0,2099,2102,1,0,0,0,2100,2098,1,0,0,0,2100,
        2101,1,0,0,0,2101,2103,1,0,0,0,2102,2100,1,0,0,0,2103,2104,3,374,
        187,0,2104,2105,5,57,0,0,2105,2106,3,328,164,0,2106,341,1,0,0,0,
        2107,2108,5,249,0,0,2108,2109,3,374,187,0,2109,2110,5,186,0,0,2110,
        2112,3,374,187,0,2111,2113,3,344,172,0,2112,2111,1,0,0,0,2112,2113,
        1,0,0,0,2113,343,1,0,0,0,2114,2115,5,57,0,0,2115,2116,3,328,164,
        0,2116,345,1,0,0,0,2117,2122,3,348,174,0,2118,2119,5,9,0,0,2119,
        2121,3,348,174,0,2120,2118,1,0,0,0,2121,2124,1,0,0,0,2122,2120,1,
        0,0,0,2122,2123,1,0,0,0,2123,347,1,0,0,0,2124,2122,1,0,0,0,2125,
        2127,5,250,0,0,2126,2128,3,374,187,0,2127,2126,1,0,0,0,2127,2128,
        1,0,0,0,2128,2129,1,0,0,0,2129,2130,5,186,0,0,2130,2132,3,374,187,
        0,2131,2133,3,350,175,0,2132,2131,1,0,0,0,2132,2133,1,0,0,0,2133,
        2134,1,0,0,0,2134,2135,5,57,0,0,2135,2136,3,328,164,0,2136,349,1,
        0,0,0,2137,2138,5,262,0,0,2138,2139,5,191,0,0,2139,2140,5,17,0,0,
        2140,2141,3,374,187,0,2141,351,1,0,0,0,2142,2146,5,255,0,0,2143,
        2145,3,370,185,0,2144,2143,1,0,0,0,2145,2148,1,0,0,0,2146,2144,1,
        0,0,0,2146,2147,1,0,0,0,2147,2149,1,0,0,0,2148,2146,1,0,0,0,2149,
        2154,3,354,177,0,2150,2151,5,9,0,0,2151,2153,3,354,177,0,2152,2150,
        1,0,0,0,2153,2156,1,0,0,0,2154,2152,1,0,0,0,2154,2155,1,0,0,0,2155,
        353,1,0,0,0,2156,2154,1,0,0,0,2157,2161,3,488,244,0,2158,2161,3,
        482,241,0,2159,2161,3,464,232,0,2160,2157,1,0,0,0,2160,2158,1,0,
        0,0,2160,2159,1,0,0,0,2161,355,1,0,0,0,2162,2166,7,19,0,0,2163,2165,
        3,368,184,0,2164,2163,1,0,0,0,2165,2168,1,0,0,0,2166,2164,1,0,0,
        0,2166,2167,1,0,0,0,2167,2169,1,0,0,0,2168,2166,1,0,0,0,2169,2170,
        3,374,187,0,2170,357,1,0,0,0,2171,2172,5,256,0,0,2172,2174,3,382,
        191,0,2173,2175,3,360,180,0,2174,2173,1,0,0,0,2174,2175,1,0,0,0,
        2175,359,1,0,0,0,2176,2185,5,187,0,0,2177,2182,3,530,265,0,2178,
        2179,5,9,0,0,2179,2181,3,530,265,0,2180,2178,1,0,0,0,2181,2184,1,
        0,0,0,2182,2180,1,0,0,0,2182,2183,1,0,0,0,2183,2186,1,0,0,0,2184,
        2182,1,0,0,0,2185,2177,1,0,0,0,2185,2186,1,0,0,0,2186,361,1,0,0,
        0,2187,2190,3,80,40,0,2188,2190,3,364,182,0,2189,2187,1,0,0,0,2189,
        2188,1,0,0,0,2190,363,1,0,0,0,2191,2195,3,494,247,0,2192,2194,3,
        366,183,0,2193,2192,1,0,0,0,2194,2197,1,0,0,0,2195,2193,1,0,0,0,
        2195,2196,1,0,0,0,2196,365,1,0,0,0,2197,2195,1,0,0,0,2198,2199,5,
        3,0,0,2199,2200,3,84,42,0,2200,367,1,0,0,0,2201,2202,7,20,0,0,2202,
        2205,5,17,0,0,2203,2206,3,540,270,0,2204,2206,3,554,277,0,2205,2203,
        1,0,0,0,2205,2204,1,0,0,0,2206,369,1,0,0,0,2207,2208,7,21,0,0,2208,
        2211,5,17,0,0,2209,2212,3,540,270,0,2210,2212,3,554,277,0,2211,2209,
        1,0,0,0,2211,2210,1,0,0,0,2212,371,1,0,0,0,2213,2214,5,321,0,0,2214,
        2217,5,17,0,0,2215,2218,3,540,270,0,2216,2218,3,554,277,0,2217,2215,
        1,0,0,0,2217,2216,1,0,0,0,2218,373,1,0,0,0,2219,2221,3,376,188,0,
        2220,2219,1,0,0,0,2220,2221,1,0,0,0,2221,2222,1,0,0,0,2222,2223,
        3,382,191,0,2223,375,1,0,0,0,2224,2227,3,544,272,0,2225,2227,3,378,
        189,0,2226,2224,1,0,0,0,2226,2225,1,0,0,0,2227,2228,1,0,0,0,2228,
        2229,5,17,0,0,2229,377,1,0,0,0,2230,2231,5,31,0,0,2231,2236,3,544,
        272,0,2232,2233,5,9,0,0,2233,2235,3,544,272,0,2234,2232,1,0,0,0,
        2235,2238,1,0,0,0,2236,2234,1,0,0,0,2236,2237,1,0,0,0,2237,2239,
        1,0,0,0,2238,2236,1,0,0,0,2239,2240,5,8,0,0,2240,379,1,0,0,0,2241,
        2242,3,522,261,0,2242,2243,5,15,0,0,2243,2244,3,448,224,0,2244,381,
        1,0,0,0,2245,2246,3,384,192,0,2246,383,1,0,0,0,2247,2251,3,388,194,
        0,2248,2250,3,386,193,0,2249,2248,1,0,0,0,2250,2253,1,0,0,0,2251,
        2249,1,0,0,0,2251,2252,1,0,0,0,2252,385,1,0,0,0,2253,2251,1,0,0,
        0,2254,2255,5,189,0,0,2255,2256,3,388,194,0,2256,387,1,0,0,0,2257,
        2261,3,392,196,0,2258,2260,3,390,195,0,2259,2258,1,0,0,0,2260,2263,
        1,0,0,0,2261,2259,1,0,0,0,2261,2262,1,0,0,0,2262,389,1,0,0,0,2263,
        2261,1,0,0,0,2264,2265,5,43,0,0,2265,2266,3,392,196,0,2266,391,1,
        0,0,0,2267,2273,3,402,201,0,2268,2273,3,394,197,0,2269,2273,3,396,
        198,0,2270,2273,3,398,199,0,2271,2273,3,400,200,0,2272,2267,1,0,
        0,0,2272,2268,1,0,0,0,2272,2269,1,0,0,0,2272,2270,1,0,0,0,2272,2271,
        1,0,0,0,2273,393,1,0,0,0,2274,2275,3,402,201,0,2275,2276,7,22,0,
        0,2276,2277,3,402,201,0,2277,395,1,0,0,0,2278,2279,3,402,201,0,2279,
        2280,7,23,0,0,2280,2281,5,31,0,0,2281,2286,3,422,211,0,2282,2283,
        5,9,0,0,2283,2285,3,422,211,0,2284,2282,1,0,0,0,2285,2288,1,0,0,
        0,2286,2284,1,0,0,0,2286,2287,1,0,0,0,2287,2289,1,0,0,0,2288,2286,
        1,0,0,0,2289,2290,5,8,0,0,2290,397,1,0,0,0,2291,2292,3,402,201,0,
        2292,2293,7,24,0,0,2293,2294,5,31,0,0,2294,2295,3,422,211,0,2295,
        2296,5,16,0,0,2296,2297,3,422,211,0,2297,2298,5,8,0,0,2298,399,1,
        0,0,0,2299,2300,5,1,0,0,2300,2301,5,18,0,0,2301,2302,3,402,201,0,
        2302,401,1,0,0,0,2303,2306,3,404,202,0,2304,2305,7,25,0,0,2305,2307,
        3,404,202,0,2306,2304,1,0,0,0,2306,2307,1,0,0,0,2307,403,1,0,0,0,
        2308,2312,3,408,204,0,2309,2311,3,406,203,0,2310,2309,1,0,0,0,2311,
        2314,1,0,0,0,2312,2310,1,0,0,0,2312,2313,1,0,0,0,2313,405,1,0,0,
        0,2314,2312,1,0,0,0,2315,2316,7,26,0,0,2316,2317,3,408,204,0,2317,
        407,1,0,0,0,2318,2322,3,412,206,0,2319,2321,3,410,205,0,2320,2319,
        1,0,0,0,2321,2324,1,0,0,0,2322,2320,1,0,0,0,2322,2323,1,0,0,0,2323,
        409,1,0,0,0,2324,2322,1,0,0,0,2325,2326,7,27,0,0,2326,2327,3,412,
        206,0,2327,411,1,0,0,0,2328,2331,3,414,207,0,2329,2331,3,420,210,
        0,2330,2328,1,0,0,0,2330,2329,1,0,0,0,2331,413,1,0,0,0,2332,2336,
        3,422,211,0,2333,2335,3,416,208,0,2334,2333,1,0,0,0,2335,2338,1,
        0,0,0,2336,2334,1,0,0,0,2336,2337,1,0,0,0,2337,415,1,0,0,0,2338,
        2336,1,0,0,0,2339,2342,3,418,209,0,2340,2342,5,10,0,0,2341,2339,
        1,0,0,0,2341,2340,1,0,0,0,2342,2343,1,0,0,0,2343,2344,3,422,211,
        0,2344,417,1,0,0,0,2345,2346,7,28,0,0,2346,419,1,0,0,0,2347,2348,
        5,1,0,0,2348,2349,3,418,209,0,2349,2350,3,422,211,0,2350,421,1,0,
        0,0,2351,2353,7,26,0,0,2352,2351,1,0,0,0,2352,2353,1,0,0,0,2353,
        2354,1,0,0,0,2354,2355,3,424,212,0,2355,423,1,0,0,0,2356,2360,3,
        426,213,0,2357,2360,3,428,214,0,2358,2360,3,440,220,0,2359,2356,
        1,0,0,0,2359,2357,1,0,0,0,2359,2358,1,0,0,0,2360,425,1,0,0,0,2361,
        2365,3,444,222,0,2362,2365,3,458,229,0,2363,2365,3,438,219,0,2364,
        2361,1,0,0,0,2364,2362,1,0,0,0,2364,2363,1,0,0,0,2365,427,1,0,0,
        0,2366,2368,3,426,213,0,2367,2369,3,430,215,0,2368,2367,1,0,0,0,
        2369,2370,1,0,0,0,2370,2368,1,0,0,0,2370,2371,1,0,0,0,2371,429,1,
        0,0,0,2372,2376,3,432,216,0,2373,2376,3,434,217,0,2374,2376,3,436,
        218,0,2375,2372,1,0,0,0,2375,2373,1,0,0,0,2375,2374,1,0,0,0,2376,
        431,1,0,0,0,2377,2378,5,15,0,0,2378,2379,3,542,271,0,2379,433,1,
        0,0,0,2380,2381,5,30,0,0,2381,2382,3,382,191,0,2382,2383,5,5,0,0,
        2383,435,1,0,0,0,2384,2385,5,15,0,0,2385,2386,5,30,0,0,2386,2387,
        3,382,191,0,2387,2388,5,5,0,0,2388,437,1,0,0,0,2389,2391,5,251,0,
        0,2390,2392,3,442,221,0,2391,2390,1,0,0,0,2391,2392,1,0,0,0,2392,
        2393,1,0,0,0,2393,2394,5,31,0,0,2394,2395,3,76,38,0,2395,2396,5,
        8,0,0,2396,439,1,0,0,0,2397,2399,5,252,0,0,2398,2400,3,442,221,0,
        2399,2398,1,0,0,0,2399,2400,1,0,0,0,2400,2401,1,0,0,0,2401,2402,
        5,31,0,0,2402,2403,3,76,38,0,2403,2404,5,8,0,0,2404,441,1,0,0,0,
        2405,2406,5,138,0,0,2406,2407,5,17,0,0,2407,2408,5,164,0,0,2408,
        443,1,0,0,0,2409,2413,3,448,224,0,2410,2412,3,446,223,0,2411,2410,
        1,0,0,0,2412,2415,1,0,0,0,2413,2411,1,0,0,0,2413,2414,1,0,0,0,2414,
        445,1,0,0,0,2415,2413,1,0,0,0,2416,2417,5,15,0,0,2417,2418,3,448,
        224,0,2418,447,1,0,0,0,2419,2422,3,450,225,0,2420,2422,3,454,227,
        0,2421,2419,1,0,0,0,2421,2420,1,0,0,0,2422,449,1,0,0,0,2423,2424,
        3,522,261,0,2424,2433,5,31,0,0,2425,2430,3,452,226,0,2426,2427,5,
        9,0,0,2427,2429,3,452,226,0,2428,2426,1,0,0,0,2429,2432,1,0,0,0,
        2430,2428,1,0,0,0,2430,2431,1,0,0,0,2431,2434,1,0,0,0,2432,2430,
        1,0,0,0,2433,2425,1,0,0,0,2433,2434,1,0,0,0,2434,2435,1,0,0,0,2435,
        2436,5,8,0,0,2436,451,1,0,0,0,2437,2440,3,374,187,0,2438,2440,3,
        456,228,0,2439,2437,1,0,0,0,2439,2438,1,0,0,0,2440,453,1,0,0,0,2441,
        2442,5,66,0,0,2442,2444,5,31,0,0,2443,2445,3,374,187,0,2444,2443,
        1,0,0,0,2444,2445,1,0,0,0,2445,2446,1,0,0,0,2446,2447,5,8,0,0,2447,
        455,1,0,0,0,2448,2449,5,1,0,0,2449,457,1,0,0,0,2450,2458,3,556,278,
        0,2451,2458,3,460,230,0,2452,2458,3,496,248,0,2453,2458,3,502,251,
        0,2454,2458,3,494,247,0,2455,2458,3,508,254,0,2456,2458,3,464,232,
        0,2457,2450,1,0,0,0,2457,2451,1,0,0,0,2457,2452,1,0,0,0,2457,2453,
        1,0,0,0,2457,2454,1,0,0,0,2457,2455,1,0,0,0,2457,2456,1,0,0,0,2458,
        459,1,0,0,0,2459,2461,3,522,261,0,2460,2462,3,462,231,0,2461,2460,
        1,0,0,0,2461,2462,1,0,0,0,2462,461,1,0,0,0,2463,2464,5,70,0,0,2464,
        2465,5,17,0,0,2465,2466,7,29,0,0,2466,463,1,0,0,0,2467,2468,5,31,
        0,0,2468,2469,3,74,37,0,2469,2470,5,8,0,0,2470,465,1,0,0,0,2471,
        2472,5,215,0,0,2472,2473,3,522,261,0,2473,2474,5,95,0,0,2474,2475,
        3,382,191,0,2475,2476,5,247,0,0,2476,2477,3,382,191,0,2477,2478,
        5,238,0,0,2478,2479,3,382,191,0,2479,467,1,0,0,0,2480,2483,3,482,
        241,0,2481,2483,3,470,235,0,2482,2480,1,0,0,0,2482,2481,1,0,0,0,
        2483,469,1,0,0,0,2484,2486,3,482,241,0,2485,2487,3,472,236,0,2486,
        2485,1,0,0,0,2487,2488,1,0,0,0,2488,2486,1,0,0,0,2488,2489,1,0,0,
        0,2489,471,1,0,0,0,2490,2494,3,474,237,0,2491,2494,3,476,238,0,2492,
        2494,3,478,239,0,2493,2490,1,0,0,0,2493,2491,1,0,0,0,2493,2492,1,
        0,0,0,2494,473,1,0,0,0,2495,2496,5,15,0,0,2496,2497,3,480,240,0,
        2497,475,1,0,0,0,2498,2499,5,30,0,0,2499,2500,3,382,191,0,2500,2501,
        5,5,0,0,2501,477,1,0,0,0,2502,2503,5,15,0,0,2503,2504,5,30,0,0,2504,
        2505,3,382,191,0,2505,2506,5,5,0,0,2506,479,1,0,0,0,2507,2511,3,
        484,242,0,2508,2511,3,544,272,0,2509,2511,3,486,243,0,2510,2507,
        1,0,0,0,2510,2508,1,0,0,0,2510,2509,1,0,0,0,2511,481,1,0,0,0,2512,
        2513,3,480,240,0,2513,483,1,0,0,0,2514,2515,5,2,0,0,2515,485,1,0,
        0,0,2516,2517,7,30,0,0,2517,487,1,0,0,0,2518,2522,3,526,263,0,2519,
        2522,3,444,222,0,2520,2522,3,490,245,0,2521,2518,1,0,0,0,2521,2519,
        1,0,0,0,2521,2520,1,0,0,0,2522,489,1,0,0,0,2523,2524,3,444,222,0,
        2524,2525,5,15,0,0,2525,2526,3,492,246,0,2526,491,1,0,0,0,2527,2530,
        3,548,274,0,2528,2530,3,480,240,0,2529,2527,1,0,0,0,2529,2528,1,
        0,0,0,2530,493,1,0,0,0,2531,2532,5,65,0,0,2532,2533,5,320,0,0,2533,
        2534,3,498,249,0,2534,495,1,0,0,0,2535,2539,5,71,0,0,2536,2538,3,
        370,185,0,2537,2536,1,0,0,0,2538,2541,1,0,0,0,2539,2537,1,0,0,0,
        2539,2540,1,0,0,0,2540,2542,1,0,0,0,2541,2539,1,0,0,0,2542,2543,
        3,498,249,0,2543,2545,5,30,0,0,2544,2546,3,554,277,0,2545,2544,1,
        0,0,0,2545,2546,1,0,0,0,2546,2551,1,0,0,0,2547,2548,5,9,0,0,2548,
        2550,3,554,277,0,2549,2547,1,0,0,0,2550,2553,1,0,0,0,2551,2549,1,
        0,0,0,2551,2552,1,0,0,0,2552,2555,1,0,0,0,2553,2551,1,0,0,0,2554,
        2556,5,9,0,0,2555,2554,1,0,0,0,2555,2556,1,0,0,0,2556,2557,1,0,0,
        0,2557,2558,5,5,0,0,2558,497,1,0,0,0,2559,2561,5,31,0,0,2560,2562,
        3,500,250,0,2561,2560,1,0,0,0,2561,2562,1,0,0,0,2562,2567,1,0,0,
        0,2563,2564,5,9,0,0,2564,2566,3,500,250,0,2565,2563,1,0,0,0,2566,
        2569,1,0,0,0,2567,2565,1,0,0,0,2567,2568,1,0,0,0,2568,2571,1,0,0,
        0,2569,2567,1,0,0,0,2570,2572,5,9,0,0,2571,2570,1,0,0,0,2571,2572,
        1,0,0,0,2572,2573,1,0,0,0,2573,2574,5,8,0,0,2574,499,1,0,0,0,2575,
        2576,3,520,260,0,2576,2577,5,10,0,0,2577,2578,3,516,258,0,2578,501,
        1,0,0,0,2579,2583,7,31,0,0,2580,2582,3,370,185,0,2581,2580,1,0,0,
        0,2582,2585,1,0,0,0,2583,2581,1,0,0,0,2583,2584,1,0,0,0,2584,2586,
        1,0,0,0,2585,2583,1,0,0,0,2586,2587,3,498,249,0,2587,2588,5,30,0,
        0,2588,2593,3,586,293,0,2589,2590,5,9,0,0,2590,2592,3,586,293,0,
        2591,2589,1,0,0,0,2592,2595,1,0,0,0,2593,2591,1,0,0,0,2593,2594,
        1,0,0,0,2594,2596,1,0,0,0,2595,2593,1,0,0,0,2596,2598,5,5,0,0,2597,
        2599,3,504,252,0,2598,2597,1,0,0,0,2598,2599,1,0,0,0,2599,503,1,
        0,0,0,2600,2601,5,262,0,0,2601,2613,5,31,0,0,2602,2607,3,506,253,
        0,2603,2604,5,9,0,0,2604,2606,3,506,253,0,2605,2603,1,0,0,0,2606,
        2609,1,0,0,0,2607,2605,1,0,0,0,2607,2608,1,0,0,0,2608,2611,1,0,0,
        0,2609,2607,1,0,0,0,2610,2612,5,9,0,0,2611,2610,1,0,0,0,2611,2612,
        1,0,0,0,2612,2614,1,0,0,0,2613,2602,1,0,0,0,2613,2614,1,0,0,0,2614,
        2615,1,0,0,0,2615,2616,5,8,0,0,2616,505,1,0,0,0,2617,2618,3,520,
        260,0,2618,2622,5,17,0,0,2619,2623,3,586,293,0,2620,2623,7,32,0,
        0,2621,2623,3,520,260,0,2622,2619,1,0,0,0,2622,2620,1,0,0,0,2622,
        2621,1,0,0,0,2623,507,1,0,0,0,2624,2625,5,157,0,0,2625,2626,5,31,
        0,0,2626,2627,3,586,293,0,2627,2628,5,8,0,0,2628,2629,3,510,255,
        0,2629,2630,3,512,256,0,2630,2631,3,514,257,0,2631,509,1,0,0,0,2632,
        2633,5,53,0,0,2633,2634,5,31,0,0,2634,2635,3,74,37,0,2635,2636,5,
        8,0,0,2636,511,1,0,0,0,2637,2638,5,75,0,0,2638,2639,5,31,0,0,2639,
        2640,3,74,37,0,2640,2641,5,8,0,0,2641,513,1,0,0,0,2642,2643,5,40,
        0,0,2643,2644,5,31,0,0,2644,2645,3,332,166,0,2645,2646,5,8,0,0,2646,
        515,1,0,0,0,2647,2648,7,33,0,0,2648,517,1,0,0,0,2649,2650,7,34,0,
        0,2650,519,1,0,0,0,2651,2652,3,544,272,0,2652,521,1,0,0,0,2653,2654,
        3,542,271,0,2654,523,1,0,0,0,2655,2656,3,544,272,0,2656,525,1,0,
        0,0,2657,2658,3,548,274,0,2658,527,1,0,0,0,2659,2662,3,522,261,0,
        2660,2662,3,526,263,0,2661,2659,1,0,0,0,2661,2660,1,0,0,0,2662,529,
        1,0,0,0,2663,2667,3,548,274,0,2664,2667,3,532,266,0,2665,2667,3,
        538,269,0,2666,2663,1,0,0,0,2666,2664,1,0,0,0,2666,2665,1,0,0,0,
        2667,531,1,0,0,0,2668,2669,5,321,0,0,2669,533,1,0,0,0,2670,2671,
        7,35,0,0,2671,535,1,0,0,0,2672,2673,7,36,0,0,2673,537,1,0,0,0,2674,
        2675,5,30,0,0,2675,2676,3,586,293,0,2676,2677,5,5,0,0,2677,539,1,
        0,0,0,2678,2681,3,532,266,0,2679,2681,3,534,267,0,2680,2678,1,0,
        0,0,2680,2679,1,0,0,0,2681,541,1,0,0,0,2682,2686,3,532,266,0,2683,
        2686,3,534,267,0,2684,2686,3,538,269,0,2685,2682,1,0,0,0,2685,2683,
        1,0,0,0,2685,2684,1,0,0,0,2686,543,1,0,0,0,2687,2692,3,532,266,0,
        2688,2692,3,534,267,0,2689,2692,3,536,268,0,2690,2692,3,538,269,
        0,2691,2687,1,0,0,0,2691,2688,1,0,0,0,2691,2689,1,0,0,0,2691,2690,
        1,0,0,0,2692,545,1,0,0,0,2693,2697,3,532,266,0,2694,2697,3,534,267,
        0,2695,2697,3,536,268,0,2696,2693,1,0,0,0,2696,2694,1,0,0,0,2696,
        2695,1,0,0,0,2697,547,1,0,0,0,2698,2700,3,550,275,0,2699,2698,1,
        0,0,0,2699,2700,1,0,0,0,2700,2701,1,0,0,0,2701,2705,5,1,0,0,2702,
        2704,3,552,276,0,2703,2702,1,0,0,0,2704,2707,1,0,0,0,2705,2703,1,
        0,0,0,2705,2706,1,0,0,0,2706,549,1,0,0,0,2707,2705,1,0,0,0,2708,
        2712,5,321,0,0,2709,2712,3,534,267,0,2710,2712,3,536,268,0,2711,
        2708,1,0,0,0,2711,2709,1,0,0,0,2711,2710,1,0,0,0,2712,551,1,0,0,
        0,2713,2719,5,321,0,0,2714,2719,3,534,267,0,2715,2719,3,536,268,
        0,2716,2719,5,310,0,0,2717,2719,5,1,0,0,2718,2713,1,0,0,0,2718,2714,
        1,0,0,0,2718,2715,1,0,0,0,2718,2716,1,0,0,0,2718,2717,1,0,0,0,2719,
        553,1,0,0,0,2720,2723,3,562,281,0,2721,2723,3,556,278,0,2722,2720,
        1,0,0,0,2722,2721,1,0,0,0,2723,555,1,0,0,0,2724,2736,3,564,282,0,
        2725,2736,3,566,283,0,2726,2736,3,568,284,0,2727,2736,3,570,285,
        0,2728,2736,3,572,286,0,2729,2736,3,574,287,0,2730,2736,3,576,288,
        0,2731,2736,3,578,289,0,2732,2736,3,580,290,0,2733,2736,3,586,293,
        0,2734,2736,3,588,294,0,2735,2724,1,0,0,0,2735,2725,1,0,0,0,2735,
        2726,1,0,0,0,2735,2727,1,0,0,0,2735,2728,1,0,0,0,2735,2729,1,0,0,
        0,2735,2730,1,0,0,0,2735,2731,1,0,0,0,2735,2732,1,0,0,0,2735,2733,
        1,0,0,0,2735,2734,1,0,0,0,2736,557,1,0,0,0,2737,2745,3,564,282,0,
        2738,2745,3,566,283,0,2739,2745,3,568,284,0,2740,2745,3,570,285,
        0,2741,2745,3,562,281,0,2742,2745,3,572,286,0,2743,2745,3,574,287,
        0,2744,2737,1,0,0,0,2744,2738,1,0,0,0,2744,2739,1,0,0,0,2744,2740,
        1,0,0,0,2744,2741,1,0,0,0,2744,2742,1,0,0,0,2744,2743,1,0,0,0,2745,
        559,1,0,0,0,2746,2752,3,564,282,0,2747,2752,3,566,283,0,2748,2752,
        3,568,284,0,2749,2752,3,570,285,0,2750,2752,3,562,281,0,2751,2746,
        1,0,0,0,2751,2747,1,0,0,0,2751,2748,1,0,0,0,2751,2749,1,0,0,0,2751,
        2750,1,0,0,0,2752,561,1,0,0,0,2753,2756,3,582,291,0,2754,2756,3,
        584,292,0,2755,2753,1,0,0,0,2755,2754,1,0,0,0,2756,563,1,0,0,0,2757,
        2758,5,310,0,0,2758,565,1,0,0,0,2759,2760,5,311,0,0,2760,567,1,0,
        0,0,2761,2762,5,312,0,0,2762,569,1,0,0,0,2763,2764,5,313,0,0,2764,
        571,1,0,0,0,2765,2766,5,316,0,0,2766,573,1,0,0,0,2767,2768,5,317,
        0,0,2768,575,1,0,0,0,2769,2770,5,315,0,0,2770,577,1,0,0,0,2771,2772,
        5,320,0,0,2772,579,1,0,0,0,2773,2774,5,318,0,0,2774,581,1,0,0,0,
        2775,2776,7,26,0,0,2776,2777,5,310,0,0,2777,583,1,0,0,0,2778,2779,
        7,26,0,0,2779,2780,5,312,0,0,2780,585,1,0,0,0,2781,2785,5,314,0,
        0,2782,2784,5,314,0,0,2783,2782,1,0,0,0,2784,2787,1,0,0,0,2785,2783,
        1,0,0,0,2785,2786,1,0,0,0,2786,587,1,0,0,0,2787,2785,1,0,0,0,2788,
        2789,5,287,0,0,2789,2790,5,31,0,0,2790,2791,3,590,295,0,2791,2792,
        5,8,0,0,2792,589,1,0,0,0,2793,2805,3,596,298,0,2794,2805,3,598,299,
        0,2795,2805,3,600,300,0,2796,2805,3,602,301,0,2797,2805,3,610,305,
        0,2798,2805,3,604,302,0,2799,2805,3,592,296,0,2800,2805,3,612,306,
        0,2801,2805,3,606,303,0,2802,2805,3,608,304,0,2803,2805,3,588,294,
        0,2804,2793,1,0,0,0,2804,2794,1,0,0,0,2804,2795,1,0,0,0,2804,2796,
        1,0,0,0,2804,2797,1,0,0,0,2804,2798,1,0,0,0,2804,2799,1,0,0,0,2804,
        2800,1,0,0,0,2804,2801,1,0,0,0,2804,2802,1,0,0,0,2804,2803,1,0,0,
        0,2805,591,1,0,0,0,2806,2815,5,29,0,0,2807,2812,3,594,297,0,2808,
        2809,5,9,0,0,2809,2811,3,594,297,0,2810,2808,1,0,0,0,2811,2814,1,
        0,0,0,2812,2810,1,0,0,0,2812,2813,1,0,0,0,2813,2816,1,0,0,0,2814,
        2812,1,0,0,0,2815,2807,1,0,0,0,2815,2816,1,0,0,0,2816,2817,1,0,0,
        0,2817,2818,5,4,0,0,2818,593,1,0,0,0,2819,2820,5,314,0,0,2820,2821,
        5,10,0,0,2821,2822,3,590,295,0,2822,595,1,0,0,0,2823,2832,5,30,0,
        0,2824,2829,3,590,295,0,2825,2826,5,9,0,0,2826,2828,3,590,295,0,
        2827,2825,1,0,0,0,2828,2831,1,0,0,0,2829,2827,1,0,0,0,2829,2830,
        1,0,0,0,2830,2833,1,0,0,0,2831,2829,1,0,0,0,2832,2824,1,0,0,0,2832,
        2833,1,0,0,0,2833,2834,1,0,0,0,2834,2835,5,5,0,0,2835,597,1,0,0,
        0,2836,2837,5,315,0,0,2837,599,1,0,0,0,2838,2839,5,316,0,0,2839,
        601,1,0,0,0,2840,2841,5,320,0,0,2841,603,1,0,0,0,2842,2843,5,184,
        0,0,2843,605,1,0,0,0,2844,2848,5,314,0,0,2845,2847,5,314,0,0,2846,
        2845,1,0,0,0,2847,2850,1,0,0,0,2848,2846,1,0,0,0,2848,2849,1,0,0,
        0,2849,607,1,0,0,0,2850,2848,1,0,0,0,2851,2852,5,317,0,0,2852,609,
        1,0,0,0,2853,2855,5,11,0,0,2854,2853,1,0,0,0,2854,2855,1,0,0,0,2855,
        2856,1,0,0,0,2856,2857,5,310,0,0,2857,611,1,0,0,0,2858,2860,5,11,
        0,0,2859,2858,1,0,0,0,2859,2860,1,0,0,0,2860,2861,1,0,0,0,2861,2862,
        5,312,0,0,2862,613,1,0,0,0,267,621,625,636,649,661,672,682,709,715,
        724,736,751,755,758,764,770,775,781,791,806,811,819,837,852,859,
        865,869,879,888,898,908,917,969,975,1002,1008,1020,1027,1032,1038,
        1043,1052,1059,1064,1075,1087,1092,1104,1107,1112,1115,1120,1124,
        1135,1146,1151,1155,1170,1179,1184,1191,1198,1201,1214,1226,1233,
        1241,1244,1249,1260,1278,1284,1293,1298,1308,1316,1319,1328,1334,
        1342,1345,1354,1364,1376,1380,1387,1396,1405,1413,1416,1437,1445,
        1451,1454,1461,1479,1483,1494,1501,1509,1513,1516,1531,1540,1548,
        1552,1556,1560,1570,1579,1582,1587,1591,1594,1598,1602,1612,1621,
        1630,1636,1640,1645,1659,1664,1679,1688,1691,1699,1708,1711,1719,
        1722,1730,1733,1737,1743,1749,1757,1764,1773,1776,1783,1836,1843,
        1859,1865,1876,1885,1889,1892,1895,1902,1919,1929,1937,1940,1945,
        1959,1970,1974,1977,1982,1995,2004,2012,2019,2028,2035,2039,2045,
        2053,2056,2059,2067,2071,2081,2091,2094,2100,2112,2122,2127,2132,
        2146,2154,2160,2166,2174,2182,2185,2189,2195,2205,2211,2217,2220,
        2226,2236,2251,2261,2272,2286,2306,2312,2322,2330,2336,2341,2352,
        2359,2364,2370,2375,2391,2399,2413,2421,2430,2433,2439,2444,2457,
        2461,2482,2488,2493,2510,2521,2529,2539,2545,2551,2555,2561,2567,
        2571,2583,2593,2598,2607,2611,2613,2622,2661,2666,2680,2685,2691,
        2696,2699,2705,2711,2718,2722,2735,2744,2751,2755,2785,2804,2812,
        2815,2829,2832,2848,2854,2859
    ]

class HqlParser ( Parser ):

    grammarFileName = "Hql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'*'", "'@'", "'|'", "'}'", "']'", "']-'", 
                     "']->'", "')'", "','", "':'", "'-'", "'--'", "'-->'", 
                     "'-['", "'.'", "'..'", "'='", "'=='", "'=~'", "'!='", 
                     "'!~'", "'>'", "'>='", "'<'", "'<--'", "'<-['", "'<='", 
                     "'<>'", "'{'", "'['", "'('", "'%'", "'+'", "';'", "'/'", 
                     "'=>'", "'3Dchart'", "'access'", "'accumulate'", "'aggregations'", 
                     "'alias'", "'all'", "'and'", "'anomalychart'", "'anomalycolumns'", 
                     "'areachart'", "'as'", "'asc'", "'assert-schema'", 
                     "'axes'", "'bagexpansion'", "'barchart'", "'base'", 
                     "'between'", "'bin'", "'bin_legacy'", "'by'", "'card'", 
                     "'cluster'", "'columnchart'", "'consume'", "'contains'", 
                     "'containscs'", "'contains_cs'", "'__contextual_datatable'", 
                     "'count'", "'__crossCluster'", "'__crossDB'", "'database'", 
                     "'datascope'", "'datatable'", "'declare'", "'decodeblocks'", 
                     "'default'", "'delta'", "'desc'", "'distinct'", "'edges'", 
                     "'endswith'", "'endswith_cs'", "'entity_group'", "'evaluate'", 
                     "'execute'", "'__executeAndCache'", "'expandoutput'", 
                     "'extend'", "'externaldata'", "'external_data'", "'facet'", 
                     "'filter'", "'find'", "'first'", "'flags'", "'fork'", 
                     "'from'", "'getschema'", "'global'", "'granny-asc'", 
                     "'granny-desc'", "'graph-mark-components'", "'graph-match'", 
                     "'graph-merge'", "'graph-shortest-paths'", "'graph-to-table'", 
                     "'has'", "'has_all'", "'has_any'", "'has_cs'", "'hasprefix'", 
                     "'hasprefix_cs'", "'hassuffix'", "'hassuffix_cs'", 
                     "'hidden'", "'hint.concurrency'", "'hint.distribution'", 
                     "'hint.materialized'", "'hint.num_partitions'", "'hint.pass_filters'", 
                     "'hint.pass_filters_column'", "'hint.progressive_top'", 
                     "'hint.remote'", "'hint.shufflekey'", "'hint.spread'", 
                     "'hint.strategy'", "'hot'", "'hotcache'", "'hotdata'", 
                     "'hotindex'", "'id'", "'__id'", "'in'", "'in~'", "'into'", 
                     "'invoke'", "'isfuzzy'", "'__isFuzzy'", "'join'", "'kind'", 
                     "'ladderchart'", "'last'", "'legend'", "'let'", "'like'", 
                     "'likecs'", "'limit'", "'linear'", "'linechart'", "'list'", 
                     "'lookup'", "'log'", "'macro-expand'", "'make-graph'", 
                     "'make-series'", "'map'", "'matches regex'", "'materialize'", 
                     "'materialized-view-combine'", "'mv-apply'", "'mv-expand'", 
                     "'mvapply'", "'mvexpand'", "'nodes'", "'none'", "'nooptimization'", 
                     "'!between'", "'!contains'", "'!contains_cs'", "'!endswith_cs'", 
                     "'!endswith'", "'!has'", "'!has_cs'", "'!hasprefix'", 
                     "'!hasprefix_cs'", "'!hassuffix'", "'!hassuffix_cs'", 
                     "'!in'", "'!in~'", "'!startswith'", "'!startswith_cs'", 
                     "'notcontains'", "'notcontainscs'", "'notlike'", "'notlikecs'", 
                     "'null'", "'nulls'", "'of'", "'on'", "'optional'", 
                     "'or'", "'order'", "'others'", "'output'", "'pack'", 
                     "'panels'", "'parse'", "'parse-kv'", "'parse-where'", 
                     "'partition'", "'__partitionby'", "'partitioned-by'", 
                     "'pattern'", "'__packedColumn'", "'piechart'", "'pivotchart'", 
                     "'plugin'", "'print'", "'project'", "'project-away'", 
                     "'__projectAway'", "'project-keep'", "'project-rename'", 
                     "'project-reorder'", "'project-smart'", "'query_parameters'", 
                     "'range'", "'reduce'", "'regex'", "'relaxed'", "'render'", 
                     "'replace'", "'restrict'", "'sample'", "'sample-distinct'", 
                     "'scan'", "'scatterchart'", "'search'", "'serialize'", 
                     "'series'", "'set'", "'simple'", "'sort'", "'__sourceColumnIndex'", 
                     "'stacked'", "'stacked100'", "'stackedareachart'", 
                     "'startswith'", "'startswith_cs'", "'step'", "'summarize'", 
                     "'table'", "'take'", "'threshold'", "'timechart'", 
                     "'timeline'", "'timepivot'", "'title'", "'to'", "'top'", 
                     "'top-hitters'", "'top-nested'", "'toscalar'", "'totable'", 
                     "'treemap'", "'typeof'", "'union'", "'unnest'", "'unstacked'", 
                     "'uuid'", "'view'", "'visible'", "'where'", "'with'", 
                     "'__noWithSource'", "'withsource'", "'with_itemindex'", 
                     "'with_match_id'", "'with_node_id'", "'with_source'", 
                     "'with_step_name'", "'xaxis'", "'xcolumn'", "'xmax'", 
                     "'xmin'", "'xtitle'", "'yaxis'", "'ycolumns'", "'ymax'", 
                     "'ymin'", "'ysplit'", "'ytitle'", "'bool'", "'boolean'", 
                     "'date'", "'datetime'", "'decimal'", "'double'", "'dynamic'", 
                     "'float'", "'guid'", "'int'", "'int8'", "'int16'", 
                     "'int32'", "'int64'", "'long'", "'string'", "'real'", 
                     "'time'", "'timespan'", "'uint'", "'uint8'", "'uint16'", 
                     "'uint32'", "'uint64'", "'ulong'", "'uniqueid'", "'ip4'", 
                     "'ip6'", "'ip'" ]

    symbolicNames = [ "<INVALID>", "ASTERISK", "ATSIGN", "BAR", "CLOSEBRACE", 
                      "CLOSEBRACKET", "CLOSEBRACKET_DASH", "CLOSEBRACKET_DASH_GREATERTHAN", 
                      "CLOSEPAREN", "COMMA", "COLON", "DASH", "DASHDASH", 
                      "DASHDASH_GREATERTHAN", "DASH_OPENBRACKET", "DOT", 
                      "DOTDOT", "EQUAL", "EQUALEQUAL", "EQUALTILDE", "EXCLAIMATIONPOINT_EQUAL", 
                      "EXCLAIMATIONPOINT_TILDE", "GREATERTHAN", "GREATERTHAN_EQUAL", 
                      "LESSTHAN", "LESSTHAN_DASHDASH", "LESSTHAN_DASH_OPENBRACKET", 
                      "LESSTHAN_EQUAL", "LESSTHAN_GREATERTHAN", "OPENBRACE", 
                      "OPENBRACKET", "OPENPAREN", "PERCENTSIGN", "PLUS", 
                      "SEMICOLON", "SLASH", "EQUAL_GREATERTHAN", "CHART3D_", 
                      "ACCESS", "ACCUMULATE", "AGGREGATIONS", "ALIAS", "ALL", 
                      "AND", "ANOMALYCHART", "ANOMALYCOLUMNS", "AREACHART", 
                      "AS", "ASC", "ASSERTSCHEMA", "AXES", "BAGEXPANSION", 
                      "BARCHART", "BASE", "BETWEEN", "BIN", "BIN_LEGACY", 
                      "BY", "CARD", "CLUSTER", "COLUMNCHART", "CONSUME", 
                      "CONTAINS", "CONTAINSCS", "CONTAINS_CS", "CONTEXTUAL_DATATABLE", 
                      "COUNT", "CROSSCLUSTER__", "CROSSDB__", "DATABASE", 
                      "DATASCOPE", "DATATABLE", "DECLARE", "DECODEBLOCKS", 
                      "DEFAULT", "DELTA", "DESC", "DISTINCT", "EDGES", "ENDSWITH", 
                      "ENDSWITH_CS", "ENTITYGROUP", "EVALUATE", "EXECUTE", 
                      "EXECUTE_AND_CACHE", "EXPANDOUTPUT", "EXTEND", "EXTERNALDATA", 
                      "EXTERNAL_DATA", "FACET", "FILTER", "FIND", "FIRST", 
                      "FLAGS", "FORK", "FROM", "GETSCHEMA", "GLOBAL", "GRANNYASC", 
                      "GRANNYDESC", "GRAPHMARKCOMPONENTS", "GRAPHMATCH", 
                      "GRAPHMERGE", "GRAPHSHORTESTPATHS", "GRAPHTOTABLE", 
                      "HAS", "HAS_ALL", "HAS_ANY", "HAS_CS", "HASPREFIX", 
                      "HASPREFIX_CS", "HASSUFFIX", "HASSUFFIX_CS", "HIDDEN_", 
                      "HINT_CONCURRENCY", "HINT_DISTRIBUTION", "HINT_MATERIALIZED", 
                      "HINT_NUM_PARTITIONS", "HINT_PASS_FILTERS", "HINT_PASS_FILTERS_COLUMN", 
                      "HINT_PROGRESSIVE_TOP", "HINT_REMOTE", "HINT_SUFFLEKEY", 
                      "HINT_SPREAD", "HINT_STRATEGY", "HOT", "HOTCACHE", 
                      "HOTDATA", "HOTINDEX", "ID", "ID__", "IN", "IN_CI", 
                      "INTO", "INVOKE", "ISFUZZY", "ISFUZZY__", "JOIN", 
                      "KIND", "LADDERCHART", "LAST", "LEGEND", "LET", "LIKE", 
                      "LIKECS", "LIMIT", "LINEAR", "LINECHART", "LIST", 
                      "LOOKUP", "LOG", "MACROEXPAND", "MAKEGRAPH", "MAKESERIES", 
                      "MAP", "MATCHES_REGEX", "MATERIALIZE", "MATERIALIZED_VIEW_COMBINE", 
                      "MV_APPLY", "MV_EXPAND", "MVAPPLY", "MVEXPAND", "NODES", 
                      "NONE", "NOOPTIMIZATION", "NOT_BETWEEN", "NOT_CONTAINS", 
                      "NOT_CONTAINS_CS", "NOT_ENDSWITH_CS", "NOT_ENDSWITH", 
                      "NOT_HAS", "NOT_HAS_CS", "NOT_HASPREFIX", "NOT_HASPREFIX_CS", 
                      "NOT_HASSUFFIX", "NOT_HASSUFFIX_CS", "NOT_IN", "NOT_IN_CI", 
                      "NOT_STARTSWITH", "NOT_STARTSWITH_CS", "NOTCONTAINS", 
                      "NOTCONTAINSCS", "NOTLIKE", "NOTLIKECS", "NULL", "NULLS", 
                      "OF", "ON", "OPTIONAL", "OR", "ORDER", "OTHERS", "OUTPUT", 
                      "PACK", "PANELS", "PARSE", "PARSEKV", "PARSEWHERE", 
                      "PARTITION", "PARTITIONBY", "PARTITIONEDBY", "PATTERN", 
                      "PACKEDCOLUMN__", "PIECHART", "PIVOTCHART", "PLUGIN", 
                      "PRINT", "PROJECT", "PROJECTAWAY", "PROJECTAWAY_", 
                      "PROJECTKEEP", "PROJECTRENAME", "PROJECTREORDER", 
                      "PROJECTSMART", "QUERYPARAMETERS", "RANGE", "REDUCE", 
                      "REGEX", "RELAXED", "RENDER", "REPLACE", "RESTRICT", 
                      "SAMPLE", "SAMPLE_DISTINCT", "SCAN", "SCATTERCHART", 
                      "SEARCH", "SERIALIZE", "SERIES", "SET", "SIMPLE", 
                      "SORT", "SOURCECOLUMNINDEX__", "STACKED", "STACKED100", 
                      "STACKEDAREACHART", "STARTSWITH", "STARTSWITH_CS", 
                      "STEP", "SUMMARIZE", "TABLE", "TAKE", "THRESHOLD", 
                      "TIMECHART", "TIMELINE", "TIMEPIVOT", "TITLE", "TO", 
                      "TOP", "TOP_HITTERS", "TOP_NESTED", "TOSCALAR", "TOTABLE", 
                      "TREEMAP", "TYPEOF", "UNION", "UNNEST", "UNSTACKED", 
                      "UUID", "VIEW", "VISIBLE", "WHERE", "WITH", "WITHNOSOURCE__", 
                      "WITHSOURCE", "WITH_ITEM_INDEX", "WITH_MATCH_ID", 
                      "WITH_NODE_ID", "WITH_SOURCE", "WITH_STEP_NAME", "XAXIS", 
                      "XCOLUMN", "XMAX", "XMIN", "XTITLE", "YAXIS", "YCOLUMNS", 
                      "YMAX", "YMIN", "YSPLIT", "YTITLE", "BOOL", "BOOLEAN", 
                      "DATE", "DATETIME", "DECIMAL", "DOUBLE", "DYNAMIC", 
                      "FLOAT", "GUID", "INT", "INT8", "INT16", "INT32", 
                      "INT64", "LONG", "STRING", "REAL", "TIME", "TIMESPAN", 
                      "UINT", "UINT8", "UINT16", "UINT32", "UINT64", "ULONG", 
                      "UNIQUEID", "IP4", "IP6", "IP", "LONGLITERAL", "INTLITERAL", 
                      "REALLITERAL", "DECIMALLITERAL", "STRINGLITERAL", 
                      "BOOLEANLITERAL", "DATETIMELITERAL", "TIMESPANLITERAL", 
                      "TYPELITERAL", "RAWGUIDLITERAL", "GUIDLITERAL", "IDENTIFIER", 
                      "WHITESPACE", "COMMENT" ]

    RULE_top = 0
    RULE_query = 1
    RULE_statement = 2
    RULE_aliasDatabaseStatement = 3
    RULE_letStatement = 4
    RULE_letVariableDeclaration = 5
    RULE_letFunctionDeclaration = 6
    RULE_letViewDeclaration = 7
    RULE_letViewParameterList = 8
    RULE_letMaterializeDeclaration = 9
    RULE_letEntityGroupDeclaration = 10
    RULE_letFunctionParameterList = 11
    RULE_scalarParameter = 12
    RULE_scalarParameterDefault = 13
    RULE_tabularParameter = 14
    RULE_tabularParameterOpenSchema = 15
    RULE_tabularParameterRowSchema = 16
    RULE_tabularParameterRowSchemaColumnDeclaration = 17
    RULE_letFunctionBody = 18
    RULE_letFunctionBodyStatement = 19
    RULE_declarePatternStatement = 20
    RULE_declarePatternDefinition = 21
    RULE_declarePatternParameterList = 22
    RULE_declarePatternParameter = 23
    RULE_declarePatternPathParameter = 24
    RULE_declarePatternRule = 25
    RULE_declarePatternRuleArgumentList = 26
    RULE_declarePatternRulePathArgument = 27
    RULE_declarePatternRuleArgument = 28
    RULE_declarePatternBody = 29
    RULE_restrictAccessStatement = 30
    RULE_restrictAccessStatementEntity = 31
    RULE_setStatement = 32
    RULE_setStatementOptionValue = 33
    RULE_declareQueryParametersStatement = 34
    RULE_declareQueryParametersStatementParameter = 35
    RULE_queryStatement = 36
    RULE_expression = 37
    RULE_pipeExpression = 38
    RULE_pipedOperator = 39
    RULE_pipeSubExpression = 40
    RULE_beforePipeExpression = 41
    RULE_afterPipeOperator = 42
    RULE_beforeOrAfterPipeOperator = 43
    RULE_forkPipeOperator = 44
    RULE_asOperator = 45
    RULE_assertSchemaOperator = 46
    RULE_consumeOperator = 47
    RULE_countOperator = 48
    RULE_distinctOperator = 49
    RULE_distinctOperatorStarTarget = 50
    RULE_distinctOperatorColumnListTarget = 51
    RULE_evaluateOperator = 52
    RULE_evaluateOperatorSchemaClause = 53
    RULE_extendOperator = 54
    RULE_executeAndCacheOperator = 55
    RULE_facetByOperator = 56
    RULE_facetByOperatorWithOperatorClause = 57
    RULE_facetByOperatorWithExpressionClause = 58
    RULE_findOperator = 59
    RULE_findOperatorParametersWhereClause = 60
    RULE_findOperatorInClause = 61
    RULE_findOperatorProjectClause = 62
    RULE_findOperatorProjectExpression = 63
    RULE_findOperatorColumnExpression = 64
    RULE_findOperatorOptionalColumnType = 65
    RULE_findOperatorPackExpression = 66
    RULE_findOperatorProjectSmartClause = 67
    RULE_findOperatorProjectAwayClause = 68
    RULE_findOperatorProjectAwayStar = 69
    RULE_findOperatorProjectAwayColumnList = 70
    RULE_findOperatorSource = 71
    RULE_findOperatorSourceEntityExpression = 72
    RULE_forkOperator = 73
    RULE_forkOperatorFork = 74
    RULE_forkOperatorExpressionName = 75
    RULE_forkOperatorExpression = 76
    RULE_forkOperatorPipedOperator = 77
    RULE_getSchemaOperator = 78
    RULE_graphMarkComponentsOperator = 79
    RULE_graphMatchOperator = 80
    RULE_graphMatchPattern = 81
    RULE_graphMatchPatternNode = 82
    RULE_graphMatchPatternUnnamedEdge = 83
    RULE_graphMatchPatternNamedEdge = 84
    RULE_graphMatchPatternRange = 85
    RULE_graphMatchWhereClause = 86
    RULE_graphMatchProjectClause = 87
    RULE_graphMergeOperator = 88
    RULE_graphToTableOperator = 89
    RULE_graphToTableOutput = 90
    RULE_graphToTableAsClause = 91
    RULE_graphShortestPathsOperator = 92
    RULE_invokeOperator = 93
    RULE_joinOperator = 94
    RULE_joinOperatorOnClause = 95
    RULE_joinOperatorWhereClause = 96
    RULE_lookupOperator = 97
    RULE_macroExpandOperator = 98
    RULE_macroExpandEntityGroup = 99
    RULE_entityGroupExpression = 100
    RULE_makeGraphOperator = 101
    RULE_makeGraphIdClause = 102
    RULE_makeGraphTablesAndKeysClause = 103
    RULE_makeGraphPartitionedByClause = 104
    RULE_makeSeriesOperator = 105
    RULE_makeSeriesOperatorOnClause = 106
    RULE_makeSeriesOperatorAggregation = 107
    RULE_makeSeriesOperatorExpressionDefaultClause = 108
    RULE_makeSeriesOperatorInRangeClause = 109
    RULE_makeSeriesOperatorFromToStepClause = 110
    RULE_makeSeriesOperatorByClause = 111
    RULE_mvapplyOperator = 112
    RULE_mvapplyOperatorLimitClause = 113
    RULE_mvapplyOperatorIdClause = 114
    RULE_mvapplyOperatorExpression = 115
    RULE_mvapplyOperatorExpressionToClause = 116
    RULE_mvexpandOperator = 117
    RULE_mvexpandOperatorExpression = 118
    RULE_parseOperator = 119
    RULE_parseOperatorKindClause = 120
    RULE_parseOperatorFlagsClause = 121
    RULE_parseOperatorNameAndOptionalType = 122
    RULE_parseOperatorPattern = 123
    RULE_parseOperatorPatternSegment = 124
    RULE_parseWhereOperator = 125
    RULE_parseKvOperator = 126
    RULE_parseKvWithClause = 127
    RULE_partitionOperator = 128
    RULE_partitionOperatorInClause = 129
    RULE_partitionOperatorSubExpressionBody = 130
    RULE_partitionOperatorFullExpressionBody = 131
    RULE_partitionByOperator = 132
    RULE_partitionByOperatorIdClause = 133
    RULE_printOperator = 134
    RULE_projectAwayOperator = 135
    RULE_projectKeepOperator = 136
    RULE_projectOperator = 137
    RULE_projectRenameOperator = 138
    RULE_projectReorderOperator = 139
    RULE_projectReorderExpression = 140
    RULE_reduceByOperator = 141
    RULE_reduceByWithClause = 142
    RULE_renderOperator = 143
    RULE_renderOperatorWithClause = 144
    RULE_renderOperatorLegacyPropertyList = 145
    RULE_renderOperatorProperty = 146
    RULE_renderPropertyNameList = 147
    RULE_renderOperatorLegacyProperty = 148
    RULE_sampleDistinctOperator = 149
    RULE_sampleOperator = 150
    RULE_scanOperator = 151
    RULE_scanOperatorOrderByClause = 152
    RULE_scanOperatorPartitionByClause = 153
    RULE_scanOperatorDeclareClause = 154
    RULE_scanOperatorStep = 155
    RULE_scanOperatorStepOutputClause = 156
    RULE_scanOperatorBody = 157
    RULE_scanOperatorAssignment = 158
    RULE_searchOperator = 159
    RULE_searchOperatorStarAndExpression = 160
    RULE_searchOperatorInClause = 161
    RULE_serializeOperator = 162
    RULE_sortOperator = 163
    RULE_orderedExpression = 164
    RULE_sortOrdering = 165
    RULE_summarizeOperator = 166
    RULE_summarizeOperatorByClause = 167
    RULE_summarizeOperatorLegacyBinClause = 168
    RULE_takeOperator = 169
    RULE_topOperator = 170
    RULE_topHittersOperator = 171
    RULE_topHittersOperatorByClause = 172
    RULE_topNestedOperator = 173
    RULE_topNestedOperatorPart = 174
    RULE_topNestedOperatorWithOthersClause = 175
    RULE_unionOperator = 176
    RULE_unionOperatorExpression = 177
    RULE_whereOperator = 178
    RULE_unnestOperator = 179
    RULE_unnestOperatorOnClause = 180
    RULE_contextualSubExpression = 181
    RULE_contextualPipeExpression = 182
    RULE_contextualPipeExpressionPipedOperator = 183
    RULE_strictQueryOperatorParameter = 184
    RULE_relaxedQueryOperatorParameter = 185
    RULE_queryOperatorProperty = 186
    RULE_namedExpression = 187
    RULE_namedExpressionNameClause = 188
    RULE_namedExpressionNameList = 189
    RULE_scopedFunctionCallExpression = 190
    RULE_unnamedExpression = 191
    RULE_logicalOrExpression = 192
    RULE_logicalOrOperation = 193
    RULE_logicalAndExpression = 194
    RULE_logicalAndOperation = 195
    RULE_equalityExpression = 196
    RULE_equalsEqualityExpression = 197
    RULE_listEqualityExpression = 198
    RULE_betweenEqualityExpression = 199
    RULE_starEqualityExpression = 200
    RULE_relationalExpression = 201
    RULE_additiveExpression = 202
    RULE_additiveOperation = 203
    RULE_multiplicativeExpression = 204
    RULE_multiplicativeOperation = 205
    RULE_stringOperatorExpression = 206
    RULE_stringBinaryOperatorExpression = 207
    RULE_stringBinaryOperation = 208
    RULE_stringBinaryOperator = 209
    RULE_stringStarOperatorExpression = 210
    RULE_invocationExpression = 211
    RULE_functionCallOrPathExpression = 212
    RULE_functionCallOrPathRoot = 213
    RULE_functionCallOrPathPathExpression = 214
    RULE_functionCallOrPathOperation = 215
    RULE_functionalCallOrPathPathOperation = 216
    RULE_functionCallOrPathElementOperation = 217
    RULE_legacyFunctionCallOrPathElementOperation = 218
    RULE_toScalarExpression = 219
    RULE_toTableExpression = 220
    RULE_noOptimizationParameter = 221
    RULE_dotCompositeFunctionCallExpression = 222
    RULE_dotCompositeFunctionCallOperation = 223
    RULE_functionCallExpression = 224
    RULE_namedFunctionCallExpression = 225
    RULE_argumentExpression = 226
    RULE_countExpression = 227
    RULE_starExpression = 228
    RULE_primaryExpression = 229
    RULE_nameReferenceWithDataScope = 230
    RULE_dataScopeClause = 231
    RULE_parenthesizedExpression = 232
    RULE_rangeExpression = 233
    RULE_entityExpression = 234
    RULE_entityPathOrElementExpression = 235
    RULE_entityPathOrElementOperator = 236
    RULE_entityPathOperator = 237
    RULE_entityElementOperator = 238
    RULE_legacyEntityPathElementOperator = 239
    RULE_entityName = 240
    RULE_entityNameReference = 241
    RULE_atSignName = 242
    RULE_extendedPathName = 243
    RULE_wildcardedEntityExpression = 244
    RULE_wildcardedPathExpression = 245
    RULE_wildcardedPathName = 246
    RULE_contextualDataTableExpression = 247
    RULE_dataTableExpression = 248
    RULE_rowSchema = 249
    RULE_rowSchemaColumnDeclaration = 250
    RULE_externalDataExpression = 251
    RULE_externalDataWithClause = 252
    RULE_externalDataWithClauseProperty = 253
    RULE_materializedViewCombineExpression = 254
    RULE_materializeViewCombineBaseClause = 255
    RULE_materializedViewCombineDeltaClause = 256
    RULE_materializedViewCombineAggregationsClause = 257
    RULE_scalarType = 258
    RULE_extendedScalarType = 259
    RULE_parameterName = 260
    RULE_simpleNameReference = 261
    RULE_extendedNameReference = 262
    RULE_wildcardedNameReference = 263
    RULE_simpleOrWildcardedNameReference = 264
    RULE_tableNameReference = 265
    RULE_identifierName = 266
    RULE_keywordName = 267
    RULE_extendedKeywordName = 268
    RULE_escapedName = 269
    RULE_identifierOrKeywordName = 270
    RULE_identifierOrKeywordOrEscapedName = 271
    RULE_identifierOrExtendedKeywordOrEscapedName = 272
    RULE_identifierOrExtendedKeywordName = 273
    RULE_wildcardedName = 274
    RULE_wildcardedNamePrefix = 275
    RULE_wildcardedNameSegment = 276
    RULE_literalExpression = 277
    RULE_unsignedLiteralExpression = 278
    RULE_numberLikeLiteralExpression = 279
    RULE_numericLiteralExpression = 280
    RULE_signedLiteralExpression = 281
    RULE_longLiteralExpression = 282
    RULE_intLiteralExpression = 283
    RULE_realLiteralExpression = 284
    RULE_decimalLiteralExpression = 285
    RULE_dateTimeLiteralExpression = 286
    RULE_timeSpanLiteralExpression = 287
    RULE_booleanLiteralExpression = 288
    RULE_guidLiteralExpression = 289
    RULE_typeLiteralExpression = 290
    RULE_signedLongLiteralExpression = 291
    RULE_signedRealLiteralExpression = 292
    RULE_stringLiteralExpression = 293
    RULE_dynamicLiteralExpression = 294
    RULE_jsonValue = 295
    RULE_jsonObject = 296
    RULE_jsonPair = 297
    RULE_jsonArray = 298
    RULE_jsonBoolean = 299
    RULE_jsonDateTime = 300
    RULE_jsonGuid = 301
    RULE_jsonNull = 302
    RULE_jsonString = 303
    RULE_jsonTimeSpan = 304
    RULE_jsonLong = 305
    RULE_jsonReal = 306

    ruleNames =  [ "top", "query", "statement", "aliasDatabaseStatement", 
                   "letStatement", "letVariableDeclaration", "letFunctionDeclaration", 
                   "letViewDeclaration", "letViewParameterList", "letMaterializeDeclaration", 
                   "letEntityGroupDeclaration", "letFunctionParameterList", 
                   "scalarParameter", "scalarParameterDefault", "tabularParameter", 
                   "tabularParameterOpenSchema", "tabularParameterRowSchema", 
                   "tabularParameterRowSchemaColumnDeclaration", "letFunctionBody", 
                   "letFunctionBodyStatement", "declarePatternStatement", 
                   "declarePatternDefinition", "declarePatternParameterList", 
                   "declarePatternParameter", "declarePatternPathParameter", 
                   "declarePatternRule", "declarePatternRuleArgumentList", 
                   "declarePatternRulePathArgument", "declarePatternRuleArgument", 
                   "declarePatternBody", "restrictAccessStatement", "restrictAccessStatementEntity", 
                   "setStatement", "setStatementOptionValue", "declareQueryParametersStatement", 
                   "declareQueryParametersStatementParameter", "queryStatement", 
                   "expression", "pipeExpression", "pipedOperator", "pipeSubExpression", 
                   "beforePipeExpression", "afterPipeOperator", "beforeOrAfterPipeOperator", 
                   "forkPipeOperator", "asOperator", "assertSchemaOperator", 
                   "consumeOperator", "countOperator", "distinctOperator", 
                   "distinctOperatorStarTarget", "distinctOperatorColumnListTarget", 
                   "evaluateOperator", "evaluateOperatorSchemaClause", "extendOperator", 
                   "executeAndCacheOperator", "facetByOperator", "facetByOperatorWithOperatorClause", 
                   "facetByOperatorWithExpressionClause", "findOperator", 
                   "findOperatorParametersWhereClause", "findOperatorInClause", 
                   "findOperatorProjectClause", "findOperatorProjectExpression", 
                   "findOperatorColumnExpression", "findOperatorOptionalColumnType", 
                   "findOperatorPackExpression", "findOperatorProjectSmartClause", 
                   "findOperatorProjectAwayClause", "findOperatorProjectAwayStar", 
                   "findOperatorProjectAwayColumnList", "findOperatorSource", 
                   "findOperatorSourceEntityExpression", "forkOperator", 
                   "forkOperatorFork", "forkOperatorExpressionName", "forkOperatorExpression", 
                   "forkOperatorPipedOperator", "getSchemaOperator", "graphMarkComponentsOperator", 
                   "graphMatchOperator", "graphMatchPattern", "graphMatchPatternNode", 
                   "graphMatchPatternUnnamedEdge", "graphMatchPatternNamedEdge", 
                   "graphMatchPatternRange", "graphMatchWhereClause", "graphMatchProjectClause", 
                   "graphMergeOperator", "graphToTableOperator", "graphToTableOutput", 
                   "graphToTableAsClause", "graphShortestPathsOperator", 
                   "invokeOperator", "joinOperator", "joinOperatorOnClause", 
                   "joinOperatorWhereClause", "lookupOperator", "macroExpandOperator", 
                   "macroExpandEntityGroup", "entityGroupExpression", "makeGraphOperator", 
                   "makeGraphIdClause", "makeGraphTablesAndKeysClause", 
                   "makeGraphPartitionedByClause", "makeSeriesOperator", 
                   "makeSeriesOperatorOnClause", "makeSeriesOperatorAggregation", 
                   "makeSeriesOperatorExpressionDefaultClause", "makeSeriesOperatorInRangeClause", 
                   "makeSeriesOperatorFromToStepClause", "makeSeriesOperatorByClause", 
                   "mvapplyOperator", "mvapplyOperatorLimitClause", "mvapplyOperatorIdClause", 
                   "mvapplyOperatorExpression", "mvapplyOperatorExpressionToClause", 
                   "mvexpandOperator", "mvexpandOperatorExpression", "parseOperator", 
                   "parseOperatorKindClause", "parseOperatorFlagsClause", 
                   "parseOperatorNameAndOptionalType", "parseOperatorPattern", 
                   "parseOperatorPatternSegment", "parseWhereOperator", 
                   "parseKvOperator", "parseKvWithClause", "partitionOperator", 
                   "partitionOperatorInClause", "partitionOperatorSubExpressionBody", 
                   "partitionOperatorFullExpressionBody", "partitionByOperator", 
                   "partitionByOperatorIdClause", "printOperator", "projectAwayOperator", 
                   "projectKeepOperator", "projectOperator", "projectRenameOperator", 
                   "projectReorderOperator", "projectReorderExpression", 
                   "reduceByOperator", "reduceByWithClause", "renderOperator", 
                   "renderOperatorWithClause", "renderOperatorLegacyPropertyList", 
                   "renderOperatorProperty", "renderPropertyNameList", "renderOperatorLegacyProperty", 
                   "sampleDistinctOperator", "sampleOperator", "scanOperator", 
                   "scanOperatorOrderByClause", "scanOperatorPartitionByClause", 
                   "scanOperatorDeclareClause", "scanOperatorStep", "scanOperatorStepOutputClause", 
                   "scanOperatorBody", "scanOperatorAssignment", "searchOperator", 
                   "searchOperatorStarAndExpression", "searchOperatorInClause", 
                   "serializeOperator", "sortOperator", "orderedExpression", 
                   "sortOrdering", "summarizeOperator", "summarizeOperatorByClause", 
                   "summarizeOperatorLegacyBinClause", "takeOperator", "topOperator", 
                   "topHittersOperator", "topHittersOperatorByClause", "topNestedOperator", 
                   "topNestedOperatorPart", "topNestedOperatorWithOthersClause", 
                   "unionOperator", "unionOperatorExpression", "whereOperator", 
                   "unnestOperator", "unnestOperatorOnClause", "contextualSubExpression", 
                   "contextualPipeExpression", "contextualPipeExpressionPipedOperator", 
                   "strictQueryOperatorParameter", "relaxedQueryOperatorParameter", 
                   "queryOperatorProperty", "namedExpression", "namedExpressionNameClause", 
                   "namedExpressionNameList", "scopedFunctionCallExpression", 
                   "unnamedExpression", "logicalOrExpression", "logicalOrOperation", 
                   "logicalAndExpression", "logicalAndOperation", "equalityExpression", 
                   "equalsEqualityExpression", "listEqualityExpression", 
                   "betweenEqualityExpression", "starEqualityExpression", 
                   "relationalExpression", "additiveExpression", "additiveOperation", 
                   "multiplicativeExpression", "multiplicativeOperation", 
                   "stringOperatorExpression", "stringBinaryOperatorExpression", 
                   "stringBinaryOperation", "stringBinaryOperator", "stringStarOperatorExpression", 
                   "invocationExpression", "functionCallOrPathExpression", 
                   "functionCallOrPathRoot", "functionCallOrPathPathExpression", 
                   "functionCallOrPathOperation", "functionalCallOrPathPathOperation", 
                   "functionCallOrPathElementOperation", "legacyFunctionCallOrPathElementOperation", 
                   "toScalarExpression", "toTableExpression", "noOptimizationParameter", 
                   "dotCompositeFunctionCallExpression", "dotCompositeFunctionCallOperation", 
                   "functionCallExpression", "namedFunctionCallExpression", 
                   "argumentExpression", "countExpression", "starExpression", 
                   "primaryExpression", "nameReferenceWithDataScope", "dataScopeClause", 
                   "parenthesizedExpression", "rangeExpression", "entityExpression", 
                   "entityPathOrElementExpression", "entityPathOrElementOperator", 
                   "entityPathOperator", "entityElementOperator", "legacyEntityPathElementOperator", 
                   "entityName", "entityNameReference", "atSignName", "extendedPathName", 
                   "wildcardedEntityExpression", "wildcardedPathExpression", 
                   "wildcardedPathName", "contextualDataTableExpression", 
                   "dataTableExpression", "rowSchema", "rowSchemaColumnDeclaration", 
                   "externalDataExpression", "externalDataWithClause", "externalDataWithClauseProperty", 
                   "materializedViewCombineExpression", "materializeViewCombineBaseClause", 
                   "materializedViewCombineDeltaClause", "materializedViewCombineAggregationsClause", 
                   "scalarType", "extendedScalarType", "parameterName", 
                   "simpleNameReference", "extendedNameReference", "wildcardedNameReference", 
                   "simpleOrWildcardedNameReference", "tableNameReference", 
                   "identifierName", "keywordName", "extendedKeywordName", 
                   "escapedName", "identifierOrKeywordName", "identifierOrKeywordOrEscapedName", 
                   "identifierOrExtendedKeywordOrEscapedName", "identifierOrExtendedKeywordName", 
                   "wildcardedName", "wildcardedNamePrefix", "wildcardedNameSegment", 
                   "literalExpression", "unsignedLiteralExpression", "numberLikeLiteralExpression", 
                   "numericLiteralExpression", "signedLiteralExpression", 
                   "longLiteralExpression", "intLiteralExpression", "realLiteralExpression", 
                   "decimalLiteralExpression", "dateTimeLiteralExpression", 
                   "timeSpanLiteralExpression", "booleanLiteralExpression", 
                   "guidLiteralExpression", "typeLiteralExpression", "signedLongLiteralExpression", 
                   "signedRealLiteralExpression", "stringLiteralExpression", 
                   "dynamicLiteralExpression", "jsonValue", "jsonObject", 
                   "jsonPair", "jsonArray", "jsonBoolean", "jsonDateTime", 
                   "jsonGuid", "jsonNull", "jsonString", "jsonTimeSpan", 
                   "jsonLong", "jsonReal" ]

    EOF = Token.EOF
    ASTERISK=1
    ATSIGN=2
    BAR=3
    CLOSEBRACE=4
    CLOSEBRACKET=5
    CLOSEBRACKET_DASH=6
    CLOSEBRACKET_DASH_GREATERTHAN=7
    CLOSEPAREN=8
    COMMA=9
    COLON=10
    DASH=11
    DASHDASH=12
    DASHDASH_GREATERTHAN=13
    DASH_OPENBRACKET=14
    DOT=15
    DOTDOT=16
    EQUAL=17
    EQUALEQUAL=18
    EQUALTILDE=19
    EXCLAIMATIONPOINT_EQUAL=20
    EXCLAIMATIONPOINT_TILDE=21
    GREATERTHAN=22
    GREATERTHAN_EQUAL=23
    LESSTHAN=24
    LESSTHAN_DASHDASH=25
    LESSTHAN_DASH_OPENBRACKET=26
    LESSTHAN_EQUAL=27
    LESSTHAN_GREATERTHAN=28
    OPENBRACE=29
    OPENBRACKET=30
    OPENPAREN=31
    PERCENTSIGN=32
    PLUS=33
    SEMICOLON=34
    SLASH=35
    EQUAL_GREATERTHAN=36
    CHART3D_=37
    ACCESS=38
    ACCUMULATE=39
    AGGREGATIONS=40
    ALIAS=41
    ALL=42
    AND=43
    ANOMALYCHART=44
    ANOMALYCOLUMNS=45
    AREACHART=46
    AS=47
    ASC=48
    ASSERTSCHEMA=49
    AXES=50
    BAGEXPANSION=51
    BARCHART=52
    BASE=53
    BETWEEN=54
    BIN=55
    BIN_LEGACY=56
    BY=57
    CARD=58
    CLUSTER=59
    COLUMNCHART=60
    CONSUME=61
    CONTAINS=62
    CONTAINSCS=63
    CONTAINS_CS=64
    CONTEXTUAL_DATATABLE=65
    COUNT=66
    CROSSCLUSTER__=67
    CROSSDB__=68
    DATABASE=69
    DATASCOPE=70
    DATATABLE=71
    DECLARE=72
    DECODEBLOCKS=73
    DEFAULT=74
    DELTA=75
    DESC=76
    DISTINCT=77
    EDGES=78
    ENDSWITH=79
    ENDSWITH_CS=80
    ENTITYGROUP=81
    EVALUATE=82
    EXECUTE=83
    EXECUTE_AND_CACHE=84
    EXPANDOUTPUT=85
    EXTEND=86
    EXTERNALDATA=87
    EXTERNAL_DATA=88
    FACET=89
    FILTER=90
    FIND=91
    FIRST=92
    FLAGS=93
    FORK=94
    FROM=95
    GETSCHEMA=96
    GLOBAL=97
    GRANNYASC=98
    GRANNYDESC=99
    GRAPHMARKCOMPONENTS=100
    GRAPHMATCH=101
    GRAPHMERGE=102
    GRAPHSHORTESTPATHS=103
    GRAPHTOTABLE=104
    HAS=105
    HAS_ALL=106
    HAS_ANY=107
    HAS_CS=108
    HASPREFIX=109
    HASPREFIX_CS=110
    HASSUFFIX=111
    HASSUFFIX_CS=112
    HIDDEN_=113
    HINT_CONCURRENCY=114
    HINT_DISTRIBUTION=115
    HINT_MATERIALIZED=116
    HINT_NUM_PARTITIONS=117
    HINT_PASS_FILTERS=118
    HINT_PASS_FILTERS_COLUMN=119
    HINT_PROGRESSIVE_TOP=120
    HINT_REMOTE=121
    HINT_SUFFLEKEY=122
    HINT_SPREAD=123
    HINT_STRATEGY=124
    HOT=125
    HOTCACHE=126
    HOTDATA=127
    HOTINDEX=128
    ID=129
    ID__=130
    IN=131
    IN_CI=132
    INTO=133
    INVOKE=134
    ISFUZZY=135
    ISFUZZY__=136
    JOIN=137
    KIND=138
    LADDERCHART=139
    LAST=140
    LEGEND=141
    LET=142
    LIKE=143
    LIKECS=144
    LIMIT=145
    LINEAR=146
    LINECHART=147
    LIST=148
    LOOKUP=149
    LOG=150
    MACROEXPAND=151
    MAKEGRAPH=152
    MAKESERIES=153
    MAP=154
    MATCHES_REGEX=155
    MATERIALIZE=156
    MATERIALIZED_VIEW_COMBINE=157
    MV_APPLY=158
    MV_EXPAND=159
    MVAPPLY=160
    MVEXPAND=161
    NODES=162
    NONE=163
    NOOPTIMIZATION=164
    NOT_BETWEEN=165
    NOT_CONTAINS=166
    NOT_CONTAINS_CS=167
    NOT_ENDSWITH_CS=168
    NOT_ENDSWITH=169
    NOT_HAS=170
    NOT_HAS_CS=171
    NOT_HASPREFIX=172
    NOT_HASPREFIX_CS=173
    NOT_HASSUFFIX=174
    NOT_HASSUFFIX_CS=175
    NOT_IN=176
    NOT_IN_CI=177
    NOT_STARTSWITH=178
    NOT_STARTSWITH_CS=179
    NOTCONTAINS=180
    NOTCONTAINSCS=181
    NOTLIKE=182
    NOTLIKECS=183
    NULL=184
    NULLS=185
    OF=186
    ON=187
    OPTIONAL=188
    OR=189
    ORDER=190
    OTHERS=191
    OUTPUT=192
    PACK=193
    PANELS=194
    PARSE=195
    PARSEKV=196
    PARSEWHERE=197
    PARTITION=198
    PARTITIONBY=199
    PARTITIONEDBY=200
    PATTERN=201
    PACKEDCOLUMN__=202
    PIECHART=203
    PIVOTCHART=204
    PLUGIN=205
    PRINT=206
    PROJECT=207
    PROJECTAWAY=208
    PROJECTAWAY_=209
    PROJECTKEEP=210
    PROJECTRENAME=211
    PROJECTREORDER=212
    PROJECTSMART=213
    QUERYPARAMETERS=214
    RANGE=215
    REDUCE=216
    REGEX=217
    RELAXED=218
    RENDER=219
    REPLACE=220
    RESTRICT=221
    SAMPLE=222
    SAMPLE_DISTINCT=223
    SCAN=224
    SCATTERCHART=225
    SEARCH=226
    SERIALIZE=227
    SERIES=228
    SET=229
    SIMPLE=230
    SORT=231
    SOURCECOLUMNINDEX__=232
    STACKED=233
    STACKED100=234
    STACKEDAREACHART=235
    STARTSWITH=236
    STARTSWITH_CS=237
    STEP=238
    SUMMARIZE=239
    TABLE=240
    TAKE=241
    THRESHOLD=242
    TIMECHART=243
    TIMELINE=244
    TIMEPIVOT=245
    TITLE=246
    TO=247
    TOP=248
    TOP_HITTERS=249
    TOP_NESTED=250
    TOSCALAR=251
    TOTABLE=252
    TREEMAP=253
    TYPEOF=254
    UNION=255
    UNNEST=256
    UNSTACKED=257
    UUID=258
    VIEW=259
    VISIBLE=260
    WHERE=261
    WITH=262
    WITHNOSOURCE__=263
    WITHSOURCE=264
    WITH_ITEM_INDEX=265
    WITH_MATCH_ID=266
    WITH_NODE_ID=267
    WITH_SOURCE=268
    WITH_STEP_NAME=269
    XAXIS=270
    XCOLUMN=271
    XMAX=272
    XMIN=273
    XTITLE=274
    YAXIS=275
    YCOLUMNS=276
    YMAX=277
    YMIN=278
    YSPLIT=279
    YTITLE=280
    BOOL=281
    BOOLEAN=282
    DATE=283
    DATETIME=284
    DECIMAL=285
    DOUBLE=286
    DYNAMIC=287
    FLOAT=288
    GUID=289
    INT=290
    INT8=291
    INT16=292
    INT32=293
    INT64=294
    LONG=295
    STRING=296
    REAL=297
    TIME=298
    TIMESPAN=299
    UINT=300
    UINT8=301
    UINT16=302
    UINT32=303
    UINT64=304
    ULONG=305
    UNIQUEID=306
    IP4=307
    IP6=308
    IP=309
    LONGLITERAL=310
    INTLITERAL=311
    REALLITERAL=312
    DECIMALLITERAL=313
    STRINGLITERAL=314
    BOOLEANLITERAL=315
    DATETIMELITERAL=316
    TIMESPANLITERAL=317
    TYPELITERAL=318
    RAWGUIDLITERAL=319
    GUIDLITERAL=320
    IDENTIFIER=321
    WHITESPACE=322
    COMMENT=323

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class TopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query(self):
            return self.getTypedRuleContext(HqlParser.QueryContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_top

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop" ):
                listener.enterTop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop" ):
                listener.exitTop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTop" ):
                return visitor.visitTop(self)
            else:
                return visitor.visitChildren(self)




    def top(self):

        localctx = HqlParser.TopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_top)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._statement = None # StatementContext
            self.Statements = list() # of StatementContexts

        def EOF(self):
            return self.getToken(HqlParser.EOF, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.StatementContext)
            else:
                return self.getTypedRuleContext(HqlParser.StatementContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.SEMICOLON)
            else:
                return self.getToken(HqlParser.SEMICOLON, i)

        def getRuleIndex(self):
            return HqlParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = HqlParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            localctx._statement = self.statement()
            localctx.Statements.append(localctx._statement)
            self.state = 621
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 617
                    self.match(HqlParser.SEMICOLON)
                    self.state = 618
                    localctx._statement = self.statement()
                    localctx.Statements.append(localctx._statement) 
                self.state = 623
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 624
                self.match(HqlParser.SEMICOLON)


            self.state = 627
            self.match(HqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.AliasDatabase = None # AliasDatabaseStatementContext
            self.DeclarePattern = None # DeclarePatternStatementContext
            self.DeclareQueryParameters = None # DeclareQueryParametersStatementContext
            self.Let = None # LetStatementContext
            self.Query = None # QueryStatementContext
            self.RestrictAccess = None # RestrictAccessStatementContext
            self.Set = None # SetStatementContext

        def aliasDatabaseStatement(self):
            return self.getTypedRuleContext(HqlParser.AliasDatabaseStatementContext,0)


        def declarePatternStatement(self):
            return self.getTypedRuleContext(HqlParser.DeclarePatternStatementContext,0)


        def declareQueryParametersStatement(self):
            return self.getTypedRuleContext(HqlParser.DeclareQueryParametersStatementContext,0)


        def letStatement(self):
            return self.getTypedRuleContext(HqlParser.LetStatementContext,0)


        def queryStatement(self):
            return self.getTypedRuleContext(HqlParser.QueryStatementContext,0)


        def restrictAccessStatement(self):
            return self.getTypedRuleContext(HqlParser.RestrictAccessStatementContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(HqlParser.SetStatementContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = HqlParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statement)
        try:
            self.state = 636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 629
                localctx.AliasDatabase = self.aliasDatabaseStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 630
                localctx.DeclarePattern = self.declarePatternStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 631
                localctx.DeclareQueryParameters = self.declareQueryParametersStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 632
                localctx.Let = self.letStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 633
                localctx.Query = self.queryStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 634
                localctx.RestrictAccess = self.restrictAccessStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 635
                localctx.Set = self.setStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasDatabaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext
            self.Expression = None # UnnamedExpressionContext

        def ALIAS(self):
            return self.getToken(HqlParser.ALIAS, 0)

        def DATABASE(self):
            return self.getToken(HqlParser.DATABASE, 0)

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_aliasDatabaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasDatabaseStatement" ):
                listener.enterAliasDatabaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasDatabaseStatement" ):
                listener.exitAliasDatabaseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasDatabaseStatement" ):
                return visitor.visitAliasDatabaseStatement(self)
            else:
                return visitor.visitChildren(self)




    def aliasDatabaseStatement(self):

        localctx = HqlParser.AliasDatabaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_aliasDatabaseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.match(HqlParser.ALIAS)
            self.state = 639
            self.match(HqlParser.DATABASE)
            self.state = 640
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 641
            self.match(HqlParser.EQUAL)
            self.state = 642
            localctx.Expression = self.unnamedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Function = None # LetFunctionDeclarationContext
            self.View = None # LetViewDeclarationContext
            self.Variable = None # LetVariableDeclarationContext
            self.Materialized = None # LetMaterializeDeclarationContext
            self.EntityGroup = None # LetEntityGroupDeclarationContext

        def letFunctionDeclaration(self):
            return self.getTypedRuleContext(HqlParser.LetFunctionDeclarationContext,0)


        def letViewDeclaration(self):
            return self.getTypedRuleContext(HqlParser.LetViewDeclarationContext,0)


        def letVariableDeclaration(self):
            return self.getTypedRuleContext(HqlParser.LetVariableDeclarationContext,0)


        def letMaterializeDeclaration(self):
            return self.getTypedRuleContext(HqlParser.LetMaterializeDeclarationContext,0)


        def letEntityGroupDeclaration(self):
            return self.getTypedRuleContext(HqlParser.LetEntityGroupDeclarationContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_letStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStatement" ):
                listener.enterLetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStatement" ):
                listener.exitLetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStatement" ):
                return visitor.visitLetStatement(self)
            else:
                return visitor.visitChildren(self)




    def letStatement(self):

        localctx = HqlParser.LetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_letStatement)
        try:
            self.state = 649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 644
                localctx.Function = self.letFunctionDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 645
                localctx.View = self.letViewDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 646
                localctx.Variable = self.letVariableDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 647
                localctx.Materialized = self.letMaterializeDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 648
                localctx.EntityGroup = self.letEntityGroupDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext
            self.Expression = None # ExpressionContext

        def LET(self):
            return self.getToken(HqlParser.LET, 0)

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(HqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_letVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetVariableDeclaration" ):
                listener.enterLetVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetVariableDeclaration" ):
                listener.exitLetVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetVariableDeclaration" ):
                return visitor.visitLetVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def letVariableDeclaration(self):

        localctx = HqlParser.LetVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_letVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.match(HqlParser.LET)
            self.state = 652
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 653
            self.match(HqlParser.EQUAL)
            self.state = 654
            localctx.Expression = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetFunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext
            self.ParameterList = None # LetFunctionParameterListContext
            self.Body = None # LetFunctionBodyContext

        def LET(self):
            return self.getToken(HqlParser.LET, 0)

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def letFunctionBody(self):
            return self.getTypedRuleContext(HqlParser.LetFunctionBodyContext,0)


        def letFunctionParameterList(self):
            return self.getTypedRuleContext(HqlParser.LetFunctionParameterListContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_letFunctionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetFunctionDeclaration" ):
                listener.enterLetFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetFunctionDeclaration" ):
                listener.exitLetFunctionDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetFunctionDeclaration" ):
                return visitor.visitLetFunctionDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def letFunctionDeclaration(self):

        localctx = HqlParser.LetFunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_letFunctionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(HqlParser.LET)
            self.state = 657
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 658
            self.match(HqlParser.EQUAL)
            self.state = 659
            self.match(HqlParser.OPENPAREN)
            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416123978121216) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -1729240968798725271) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 7196752211023416333) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & -3749008268648248231) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 4611686019509516303) != 0):
                self.state = 660
                localctx.ParameterList = self.letFunctionParameterList()


            self.state = 663
            self.match(HqlParser.CLOSEPAREN)
            self.state = 664
            localctx.Body = self.letFunctionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetViewDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext
            self.ParameterList = None # LetViewParameterListContext
            self.Body = None # LetFunctionBodyContext

        def LET(self):
            return self.getToken(HqlParser.LET, 0)

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def VIEW(self):
            return self.getToken(HqlParser.VIEW, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def letFunctionBody(self):
            return self.getTypedRuleContext(HqlParser.LetFunctionBodyContext,0)


        def letViewParameterList(self):
            return self.getTypedRuleContext(HqlParser.LetViewParameterListContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_letViewDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetViewDeclaration" ):
                listener.enterLetViewDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetViewDeclaration" ):
                listener.exitLetViewDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetViewDeclaration" ):
                return visitor.visitLetViewDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def letViewDeclaration(self):

        localctx = HqlParser.LetViewDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_letViewDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.match(HqlParser.LET)
            self.state = 667
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 668
            self.match(HqlParser.EQUAL)
            self.state = 669
            self.match(HqlParser.VIEW)
            self.state = 670
            self.match(HqlParser.OPENPAREN)
            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416123978121216) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -1729240968798725271) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 7196752211023416333) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & -3749008268648248231) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 4611686019509516303) != 0):
                self.state = 671
                localctx.ParameterList = self.letViewParameterList()


            self.state = 674
            self.match(HqlParser.CLOSEPAREN)
            self.state = 675
            localctx.Body = self.letFunctionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetViewParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._scalarParameter = None # ScalarParameterContext
            self.Parameters = list() # of ScalarParameterContexts

        def scalarParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.ScalarParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.ScalarParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_letViewParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetViewParameterList" ):
                listener.enterLetViewParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetViewParameterList" ):
                listener.exitLetViewParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetViewParameterList" ):
                return visitor.visitLetViewParameterList(self)
            else:
                return visitor.visitChildren(self)




    def letViewParameterList(self):

        localctx = HqlParser.LetViewParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_letViewParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            localctx._scalarParameter = self.scalarParameter()
            localctx.Parameters.append(localctx._scalarParameter)
            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 678
                self.match(HqlParser.COMMA)
                self.state = 679
                localctx._scalarParameter = self.scalarParameter()
                localctx.Parameters.append(localctx._scalarParameter)
                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetMaterializeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext
            self.Expression = None # PipeExpressionContext

        def LET(self):
            return self.getToken(HqlParser.LET, 0)

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def MATERIALIZE(self):
            return self.getToken(HqlParser.MATERIALIZE, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def pipeExpression(self):
            return self.getTypedRuleContext(HqlParser.PipeExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_letMaterializeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetMaterializeDeclaration" ):
                listener.enterLetMaterializeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetMaterializeDeclaration" ):
                listener.exitLetMaterializeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetMaterializeDeclaration" ):
                return visitor.visitLetMaterializeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def letMaterializeDeclaration(self):

        localctx = HqlParser.LetMaterializeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_letMaterializeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(HqlParser.LET)
            self.state = 686
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 687
            self.match(HqlParser.EQUAL)
            self.state = 688
            self.match(HqlParser.MATERIALIZE)
            self.state = 689
            self.match(HqlParser.OPENPAREN)
            self.state = 690
            localctx.Expression = self.pipeExpression()
            self.state = 691
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetEntityGroupDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def LET(self):
            return self.getToken(HqlParser.LET, 0)

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def entityGroupExpression(self):
            return self.getTypedRuleContext(HqlParser.EntityGroupExpressionContext,0)


        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_letEntityGroupDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetEntityGroupDeclaration" ):
                listener.enterLetEntityGroupDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetEntityGroupDeclaration" ):
                listener.exitLetEntityGroupDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetEntityGroupDeclaration" ):
                return visitor.visitLetEntityGroupDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def letEntityGroupDeclaration(self):

        localctx = HqlParser.LetEntityGroupDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_letEntityGroupDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(HqlParser.LET)
            self.state = 694
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 695
            self.match(HqlParser.EQUAL)
            self.state = 696
            self.entityGroupExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetFunctionParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._tabularParameter = None # TabularParameterContext
            self.TabularParameters = list() # of TabularParameterContexts
            self._scalarParameter = None # ScalarParameterContext
            self.ScalarParameters = list() # of ScalarParameterContexts

        def tabularParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.TabularParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.TabularParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def scalarParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.ScalarParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.ScalarParameterContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_letFunctionParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetFunctionParameterList" ):
                listener.enterLetFunctionParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetFunctionParameterList" ):
                listener.exitLetFunctionParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetFunctionParameterList" ):
                return visitor.visitLetFunctionParameterList(self)
            else:
                return visitor.visitChildren(self)




    def letFunctionParameterList(self):

        localctx = HqlParser.LetFunctionParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_letFunctionParameterList)
        try:
            self.state = 709
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 698
                localctx._tabularParameter = self.tabularParameter()
                localctx.TabularParameters.append(localctx._tabularParameter)

                self.state = 699
                self.match(HqlParser.COMMA)
                self.state = 700
                localctx._tabularParameter = self.tabularParameter()
                localctx.TabularParameters.append(localctx._tabularParameter)

                self.state = 702
                self.match(HqlParser.COMMA)
                self.state = 703
                localctx._scalarParameter = self.scalarParameter()
                localctx.ScalarParameters.append(localctx._scalarParameter)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 705
                localctx._scalarParameter = self.scalarParameter()
                localctx.ScalarParameters.append(localctx._scalarParameter)

                self.state = 706
                self.match(HqlParser.COMMA)
                self.state = 707
                localctx._scalarParameter = self.scalarParameter()
                localctx.ScalarParameters.append(localctx._scalarParameter)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.Type = None # ScalarTypeContext
            self.Default = None # ScalarParameterDefaultContext

        def COLON(self):
            return self.getToken(HqlParser.COLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(HqlParser.ParameterNameContext,0)


        def scalarType(self):
            return self.getTypedRuleContext(HqlParser.ScalarTypeContext,0)


        def scalarParameterDefault(self):
            return self.getTypedRuleContext(HqlParser.ScalarParameterDefaultContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_scalarParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarParameter" ):
                listener.enterScalarParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarParameter" ):
                listener.exitScalarParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalarParameter" ):
                return visitor.visitScalarParameter(self)
            else:
                return visitor.visitChildren(self)




    def scalarParameter(self):

        localctx = HqlParser.ScalarParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_scalarParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            localctx.Name = self.parameterName()
            self.state = 712
            self.match(HqlParser.COLON)
            self.state = 713
            localctx.Type = self.scalarType()
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 714
                localctx.Default = self.scalarParameterDefault()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarParameterDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Value = None # LiteralExpressionContext

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def literalExpression(self):
            return self.getTypedRuleContext(HqlParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_scalarParameterDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarParameterDefault" ):
                listener.enterScalarParameterDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarParameterDefault" ):
                listener.exitScalarParameterDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalarParameterDefault" ):
                return visitor.visitScalarParameterDefault(self)
            else:
                return visitor.visitChildren(self)




    def scalarParameterDefault(self):

        localctx = HqlParser.ScalarParameterDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_scalarParameterDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(HqlParser.EQUAL)
            self.state = 718
            localctx.Value = self.literalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabularParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.OpenSchema = None # TabularParameterOpenSchemaContext
            self.RowSchema = None # TabularParameterRowSchemaContext

        def COLON(self):
            return self.getToken(HqlParser.COLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(HqlParser.ParameterNameContext,0)


        def tabularParameterOpenSchema(self):
            return self.getTypedRuleContext(HqlParser.TabularParameterOpenSchemaContext,0)


        def tabularParameterRowSchema(self):
            return self.getTypedRuleContext(HqlParser.TabularParameterRowSchemaContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_tabularParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabularParameter" ):
                listener.enterTabularParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabularParameter" ):
                listener.exitTabularParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabularParameter" ):
                return visitor.visitTabularParameter(self)
            else:
                return visitor.visitChildren(self)




    def tabularParameter(self):

        localctx = HqlParser.TabularParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_tabularParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            localctx.Name = self.parameterName()
            self.state = 721
            self.match(HqlParser.COLON)
            self.state = 724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 722
                localctx.OpenSchema = self.tabularParameterOpenSchema()
                pass

            elif la_ == 2:
                self.state = 723
                localctx.RowSchema = self.tabularParameterRowSchema()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabularParameterOpenSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def ASTERISK(self):
            return self.getToken(HqlParser.ASTERISK, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_tabularParameterOpenSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabularParameterOpenSchema" ):
                listener.enterTabularParameterOpenSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabularParameterOpenSchema" ):
                listener.exitTabularParameterOpenSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabularParameterOpenSchema" ):
                return visitor.visitTabularParameterOpenSchema(self)
            else:
                return visitor.visitChildren(self)




    def tabularParameterOpenSchema(self):

        localctx = HqlParser.TabularParameterOpenSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_tabularParameterOpenSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(HqlParser.OPENPAREN)
            self.state = 727
            self.match(HqlParser.ASTERISK)
            self.state = 728
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabularParameterRowSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._tabularParameterRowSchemaColumnDeclaration = None # TabularParameterRowSchemaColumnDeclarationContext
            self.Columns = list() # of TabularParameterRowSchemaColumnDeclarationContexts

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def tabularParameterRowSchemaColumnDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.TabularParameterRowSchemaColumnDeclarationContext)
            else:
                return self.getTypedRuleContext(HqlParser.TabularParameterRowSchemaColumnDeclarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_tabularParameterRowSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabularParameterRowSchema" ):
                listener.enterTabularParameterRowSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabularParameterRowSchema" ):
                listener.exitTabularParameterRowSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabularParameterRowSchema" ):
                return visitor.visitTabularParameterRowSchema(self)
            else:
                return visitor.visitChildren(self)




    def tabularParameterRowSchema(self):

        localctx = HqlParser.TabularParameterRowSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_tabularParameterRowSchema)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(HqlParser.OPENPAREN)
            self.state = 731
            localctx._tabularParameterRowSchemaColumnDeclaration = self.tabularParameterRowSchemaColumnDeclaration()
            localctx.Columns.append(localctx._tabularParameterRowSchemaColumnDeclaration)
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 732
                self.match(HqlParser.COMMA)
                self.state = 733
                localctx._tabularParameterRowSchemaColumnDeclaration = self.tabularParameterRowSchemaColumnDeclaration()
                localctx.Columns.append(localctx._tabularParameterRowSchemaColumnDeclaration)
                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 739
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabularParameterRowSchemaColumnDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.Type = None # ScalarTypeContext

        def COLON(self):
            return self.getToken(HqlParser.COLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(HqlParser.ParameterNameContext,0)


        def scalarType(self):
            return self.getTypedRuleContext(HqlParser.ScalarTypeContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_tabularParameterRowSchemaColumnDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabularParameterRowSchemaColumnDeclaration" ):
                listener.enterTabularParameterRowSchemaColumnDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabularParameterRowSchemaColumnDeclaration" ):
                listener.exitTabularParameterRowSchemaColumnDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabularParameterRowSchemaColumnDeclaration" ):
                return visitor.visitTabularParameterRowSchemaColumnDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def tabularParameterRowSchemaColumnDeclaration(self):

        localctx = HqlParser.TabularParameterRowSchemaColumnDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_tabularParameterRowSchemaColumnDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            localctx.Name = self.parameterName()
            self.state = 742
            self.match(HqlParser.COLON)
            self.state = 743
            localctx.Type = self.scalarType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetFunctionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._letFunctionBodyStatement = None # LetFunctionBodyStatementContext
            self.Statements = list() # of LetFunctionBodyStatementContexts
            self.Expression = None # ExpressionContext

        def OPENBRACE(self):
            return self.getToken(HqlParser.OPENBRACE, 0)

        def CLOSEBRACE(self):
            return self.getToken(HqlParser.CLOSEBRACE, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.SEMICOLON)
            else:
                return self.getToken(HqlParser.SEMICOLON, i)

        def letFunctionBodyStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.LetFunctionBodyStatementContext)
            else:
                return self.getTypedRuleContext(HqlParser.LetFunctionBodyStatementContext,i)


        def expression(self):
            return self.getTypedRuleContext(HqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_letFunctionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetFunctionBody" ):
                listener.enterLetFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetFunctionBody" ):
                listener.exitLetFunctionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetFunctionBody" ):
                return visitor.visitLetFunctionBody(self)
            else:
                return visitor.visitChildren(self)




    def letFunctionBody(self):

        localctx = HqlParser.LetFunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_letFunctionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.match(HqlParser.OPENBRACE)
            self.state = 751
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 746
                    localctx._letFunctionBodyStatement = self.letFunctionBodyStatement()
                    localctx.Statements.append(localctx._letFunctionBodyStatement)
                    self.state = 747
                    self.match(HqlParser.SEMICOLON) 
                self.state = 753
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 622630631754434562) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -3458483037136345389) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -8250594491262947311) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 7782821632390738273) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -4620693212279873489) != 0) or _la==321:
                self.state = 754
                localctx.Expression = self.expression()


            self.state = 758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 757
                self.match(HqlParser.SEMICOLON)


            self.state = 760
            self.match(HqlParser.CLOSEBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetFunctionBodyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Let = None # LetStatementContext
            self.DeclareQueryParameters = None # DeclareQueryParametersStatementContext

        def letStatement(self):
            return self.getTypedRuleContext(HqlParser.LetStatementContext,0)


        def declareQueryParametersStatement(self):
            return self.getTypedRuleContext(HqlParser.DeclareQueryParametersStatementContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_letFunctionBodyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetFunctionBodyStatement" ):
                listener.enterLetFunctionBodyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetFunctionBodyStatement" ):
                listener.exitLetFunctionBodyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetFunctionBodyStatement" ):
                return visitor.visitLetFunctionBodyStatement(self)
            else:
                return visitor.visitChildren(self)




    def letFunctionBodyStatement(self):

        localctx = HqlParser.LetFunctionBodyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_letFunctionBodyStatement)
        try:
            self.state = 764
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [142]:
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                localctx.Let = self.letStatement()
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 763
                localctx.DeclareQueryParameters = self.declareQueryParametersStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # SimpleNameReferenceContext
            self.Definition = None # DeclarePatternDefinitionContext

        def DECLARE(self):
            return self.getToken(HqlParser.DECLARE, 0)

        def PATTERN(self):
            return self.getToken(HqlParser.PATTERN, 0)

        def simpleNameReference(self):
            return self.getTypedRuleContext(HqlParser.SimpleNameReferenceContext,0)


        def declarePatternDefinition(self):
            return self.getTypedRuleContext(HqlParser.DeclarePatternDefinitionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_declarePatternStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternStatement" ):
                listener.enterDeclarePatternStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternStatement" ):
                listener.exitDeclarePatternStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternStatement" ):
                return visitor.visitDeclarePatternStatement(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternStatement(self):

        localctx = HqlParser.DeclarePatternStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_declarePatternStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.match(HqlParser.DECLARE)
            self.state = 767
            self.match(HqlParser.PATTERN)
            self.state = 768
            localctx.Name = self.simpleNameReference()
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 769
                localctx.Definition = self.declarePatternDefinition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ParameterList = None # DeclarePatternParameterListContext
            self.Path = None # DeclarePatternPathParameterContext
            self._declarePatternRule = None # DeclarePatternRuleContext
            self.Rules = list() # of DeclarePatternRuleContexts

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def OPENBRACE(self):
            return self.getToken(HqlParser.OPENBRACE, 0)

        def CLOSEBRACE(self):
            return self.getToken(HqlParser.CLOSEBRACE, 0)

        def declarePatternParameterList(self):
            return self.getTypedRuleContext(HqlParser.DeclarePatternParameterListContext,0)


        def declarePatternPathParameter(self):
            return self.getTypedRuleContext(HqlParser.DeclarePatternPathParameterContext,0)


        def declarePatternRule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.DeclarePatternRuleContext)
            else:
                return self.getTypedRuleContext(HqlParser.DeclarePatternRuleContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_declarePatternDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternDefinition" ):
                listener.enterDeclarePatternDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternDefinition" ):
                listener.exitDeclarePatternDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternDefinition" ):
                return visitor.visitDeclarePatternDefinition(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternDefinition(self):

        localctx = HqlParser.DeclarePatternDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_declarePatternDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.match(HqlParser.EQUAL)
            self.state = 773
            localctx.ParameterList = self.declarePatternParameterList()
            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 774
                localctx.Path = self.declarePatternPathParameter()


            self.state = 777
            self.match(HqlParser.OPENBRACE)
            self.state = 779 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 778
                localctx._declarePatternRule = self.declarePatternRule()
                localctx.Rules.append(localctx._declarePatternRule)
                self.state = 781 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==31):
                    break

            self.state = 783
            self.match(HqlParser.CLOSEBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._declarePatternParameter = None # DeclarePatternParameterContext
            self.Parameters = list() # of DeclarePatternParameterContexts

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def declarePatternParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.DeclarePatternParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.DeclarePatternParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_declarePatternParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternParameterList" ):
                listener.enterDeclarePatternParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternParameterList" ):
                listener.exitDeclarePatternParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternParameterList" ):
                return visitor.visitDeclarePatternParameterList(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternParameterList(self):

        localctx = HqlParser.DeclarePatternParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_declarePatternParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(HqlParser.OPENPAREN)
            self.state = 786
            localctx._declarePatternParameter = self.declarePatternParameter()
            localctx.Parameters.append(localctx._declarePatternParameter)
            self.state = 791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 787
                self.match(HqlParser.COMMA)
                self.state = 788
                localctx._declarePatternParameter = self.declarePatternParameter()
                localctx.Parameters.append(localctx._declarePatternParameter)
                self.state = 793
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 794
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.Type = None # ScalarTypeContext

        def COLON(self):
            return self.getToken(HqlParser.COLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(HqlParser.ParameterNameContext,0)


        def scalarType(self):
            return self.getTypedRuleContext(HqlParser.ScalarTypeContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_declarePatternParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternParameter" ):
                listener.enterDeclarePatternParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternParameter" ):
                listener.exitDeclarePatternParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternParameter" ):
                return visitor.visitDeclarePatternParameter(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternParameter(self):

        localctx = HqlParser.DeclarePatternParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_declarePatternParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            localctx.Name = self.parameterName()
            self.state = 797
            self.match(HqlParser.COLON)
            self.state = 798
            localctx.Type = self.scalarType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternPathParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Parameter = None # DeclarePatternParameterContext

        def OPENBRACKET(self):
            return self.getToken(HqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(HqlParser.CLOSEBRACKET, 0)

        def declarePatternParameter(self):
            return self.getTypedRuleContext(HqlParser.DeclarePatternParameterContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_declarePatternPathParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternPathParameter" ):
                listener.enterDeclarePatternPathParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternPathParameter" ):
                listener.exitDeclarePatternPathParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternPathParameter" ):
                return visitor.visitDeclarePatternPathParameter(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternPathParameter(self):

        localctx = HqlParser.DeclarePatternPathParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_declarePatternPathParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(HqlParser.OPENBRACKET)
            self.state = 801
            localctx.Parameter = self.declarePatternParameter()
            self.state = 802
            self.match(HqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ArgumentList = None # DeclarePatternRuleArgumentListContext
            self.PathArgument = None # DeclarePatternRulePathArgumentContext
            self.Body = None # DeclarePatternBodyContext
            self.TrailingSemicolon = None # Token

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def declarePatternRuleArgumentList(self):
            return self.getTypedRuleContext(HqlParser.DeclarePatternRuleArgumentListContext,0)


        def declarePatternBody(self):
            return self.getTypedRuleContext(HqlParser.DeclarePatternBodyContext,0)


        def declarePatternRulePathArgument(self):
            return self.getTypedRuleContext(HqlParser.DeclarePatternRulePathArgumentContext,0)


        def SEMICOLON(self):
            return self.getToken(HqlParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_declarePatternRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternRule" ):
                listener.enterDeclarePatternRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternRule" ):
                listener.exitDeclarePatternRule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternRule" ):
                return visitor.visitDeclarePatternRule(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternRule(self):

        localctx = HqlParser.DeclarePatternRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_declarePatternRule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            localctx.ArgumentList = self.declarePatternRuleArgumentList()
            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 805
                localctx.PathArgument = self.declarePatternRulePathArgument()


            self.state = 808
            self.match(HqlParser.EQUAL)
            self.state = 809
            localctx.Body = self.declarePatternBody()
            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 810
                localctx.TrailingSemicolon = self.match(HqlParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternRuleArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._declarePatternRuleArgument = None # DeclarePatternRuleArgumentContext
            self.Arguments = list() # of DeclarePatternRuleArgumentContexts

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def declarePatternRuleArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.DeclarePatternRuleArgumentContext)
            else:
                return self.getTypedRuleContext(HqlParser.DeclarePatternRuleArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_declarePatternRuleArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternRuleArgumentList" ):
                listener.enterDeclarePatternRuleArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternRuleArgumentList" ):
                listener.exitDeclarePatternRuleArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternRuleArgumentList" ):
                return visitor.visitDeclarePatternRuleArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternRuleArgumentList(self):

        localctx = HqlParser.DeclarePatternRuleArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_declarePatternRuleArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(HqlParser.OPENPAREN)
            self.state = 814
            localctx._declarePatternRuleArgument = self.declarePatternRuleArgument()
            localctx.Arguments.append(localctx._declarePatternRuleArgument)
            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 815
                self.match(HqlParser.COMMA)
                self.state = 816
                localctx._declarePatternRuleArgument = self.declarePatternRuleArgument()
                localctx.Arguments.append(localctx._declarePatternRuleArgument)
                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 822
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternRulePathArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # DeclarePatternRuleArgumentContext

        def DOT(self):
            return self.getToken(HqlParser.DOT, 0)

        def OPENBRACKET(self):
            return self.getToken(HqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(HqlParser.CLOSEBRACKET, 0)

        def declarePatternRuleArgument(self):
            return self.getTypedRuleContext(HqlParser.DeclarePatternRuleArgumentContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_declarePatternRulePathArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternRulePathArgument" ):
                listener.enterDeclarePatternRulePathArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternRulePathArgument" ):
                listener.exitDeclarePatternRulePathArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternRulePathArgument" ):
                return visitor.visitDeclarePatternRulePathArgument(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternRulePathArgument(self):

        localctx = HqlParser.DeclarePatternRulePathArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_declarePatternRulePathArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(HqlParser.DOT)
            self.state = 825
            self.match(HqlParser.OPENBRACKET)
            self.state = 826
            localctx.Expression = self.declarePatternRuleArgument()
            self.state = 827
            self.match(HqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternRuleArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.StringLiteralExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_declarePatternRuleArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternRuleArgument" ):
                listener.enterDeclarePatternRuleArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternRuleArgument" ):
                listener.exitDeclarePatternRuleArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternRuleArgument" ):
                return visitor.visitDeclarePatternRuleArgument(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternRuleArgument(self):

        localctx = HqlParser.DeclarePatternRuleArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_declarePatternRuleArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.stringLiteralExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._letFunctionBodyStatement = None # LetFunctionBodyStatementContext
            self.Statements = list() # of LetFunctionBodyStatementContexts
            self.Expression = None # ExpressionContext

        def OPENBRACE(self):
            return self.getToken(HqlParser.OPENBRACE, 0)

        def CLOSEBRACE(self):
            return self.getToken(HqlParser.CLOSEBRACE, 0)

        def expression(self):
            return self.getTypedRuleContext(HqlParser.ExpressionContext,0)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.SEMICOLON)
            else:
                return self.getToken(HqlParser.SEMICOLON, i)

        def letFunctionBodyStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.LetFunctionBodyStatementContext)
            else:
                return self.getTypedRuleContext(HqlParser.LetFunctionBodyStatementContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_declarePatternBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternBody" ):
                listener.enterDeclarePatternBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternBody" ):
                listener.exitDeclarePatternBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternBody" ):
                return visitor.visitDeclarePatternBody(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternBody(self):

        localctx = HqlParser.DeclarePatternBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_declarePatternBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(HqlParser.OPENBRACE)
            self.state = 837
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 832
                    localctx._letFunctionBodyStatement = self.letFunctionBodyStatement()
                    localctx.Statements.append(localctx._letFunctionBodyStatement)
                    self.state = 833
                    self.match(HqlParser.SEMICOLON) 
                self.state = 839
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

            self.state = 840
            localctx.Expression = self.expression()
            self.state = 841
            self.match(HqlParser.CLOSEBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestrictAccessStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._restrictAccessStatementEntity = None # RestrictAccessStatementEntityContext
            self.Entities = list() # of RestrictAccessStatementEntityContexts

        def RESTRICT(self):
            return self.getToken(HqlParser.RESTRICT, 0)

        def ACCESS(self):
            return self.getToken(HqlParser.ACCESS, 0)

        def TO(self):
            return self.getToken(HqlParser.TO, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def restrictAccessStatementEntity(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RestrictAccessStatementEntityContext)
            else:
                return self.getTypedRuleContext(HqlParser.RestrictAccessStatementEntityContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_restrictAccessStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestrictAccessStatement" ):
                listener.enterRestrictAccessStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestrictAccessStatement" ):
                listener.exitRestrictAccessStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRestrictAccessStatement" ):
                return visitor.visitRestrictAccessStatement(self)
            else:
                return visitor.visitChildren(self)




    def restrictAccessStatement(self):

        localctx = HqlParser.RestrictAccessStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_restrictAccessStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.match(HqlParser.RESTRICT)
            self.state = 844
            self.match(HqlParser.ACCESS)
            self.state = 845
            self.match(HqlParser.TO)
            self.state = 846
            self.match(HqlParser.OPENPAREN)
            self.state = 847
            localctx._restrictAccessStatementEntity = self.restrictAccessStatementEntity()
            localctx.Entities.append(localctx._restrictAccessStatementEntity)
            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 848
                self.match(HqlParser.COMMA)
                self.state = 849
                localctx._restrictAccessStatementEntity = self.restrictAccessStatementEntity()
                localctx.Entities.append(localctx._restrictAccessStatementEntity)
                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 855
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestrictAccessStatementEntityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SimpleName = None # SimpleNameReferenceContext
            self.WildcardedEntity = None # WildcardedEntityExpressionContext

        def simpleNameReference(self):
            return self.getTypedRuleContext(HqlParser.SimpleNameReferenceContext,0)


        def wildcardedEntityExpression(self):
            return self.getTypedRuleContext(HqlParser.WildcardedEntityExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_restrictAccessStatementEntity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestrictAccessStatementEntity" ):
                listener.enterRestrictAccessStatementEntity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestrictAccessStatementEntity" ):
                listener.exitRestrictAccessStatementEntity(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRestrictAccessStatementEntity" ):
                return visitor.visitRestrictAccessStatementEntity(self)
            else:
                return visitor.visitChildren(self)




    def restrictAccessStatementEntity(self):

        localctx = HqlParser.RestrictAccessStatementEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_restrictAccessStatementEntity)
        try:
            self.state = 859
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 857
                localctx.SimpleName = self.simpleNameReference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 858
                localctx.WildcardedEntity = self.wildcardedEntityExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordNameContext
            self.Value = None # SetStatementOptionValueContext

        def SET(self):
            return self.getToken(HqlParser.SET, 0)

        def identifierOrKeywordName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordNameContext,0)


        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def setStatementOptionValue(self):
            return self.getTypedRuleContext(HqlParser.SetStatementOptionValueContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_setStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStatement" ):
                listener.enterSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStatement" ):
                listener.exitSetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetStatement" ):
                return visitor.visitSetStatement(self)
            else:
                return visitor.visitChildren(self)




    def setStatement(self):

        localctx = HqlParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_setStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.match(HqlParser.SET)
            self.state = 862
            localctx.Name = self.identifierOrKeywordName()
            self.state = 865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 863
                self.match(HqlParser.EQUAL)
                self.state = 864
                localctx.Value = self.setStatementOptionValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementOptionValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordNameContext
            self.Literal = None # LiteralExpressionContext

        def identifierOrKeywordName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordNameContext,0)


        def literalExpression(self):
            return self.getTypedRuleContext(HqlParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_setStatementOptionValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStatementOptionValue" ):
                listener.enterSetStatementOptionValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStatementOptionValue" ):
                listener.exitSetStatementOptionValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetStatementOptionValue" ):
                return visitor.visitSetStatementOptionValue(self)
            else:
                return visitor.visitChildren(self)




    def setStatementOptionValue(self):

        localctx = HqlParser.SetStatementOptionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_setStatementOptionValue)
        try:
            self.state = 869
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 113, 125, 127, 128, 129, 133, 141, 142, 146, 148, 149, 150, 154, 162, 163, 184, 185, 187, 188, 192, 193, 198, 199, 201, 205, 214, 215, 216, 219, 220, 221, 228, 233, 234, 238, 242, 254, 257, 258, 259, 260, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 289, 321]:
                self.enterOuterAlt(localctx, 1)
                self.state = 867
                localctx.Name = self.identifierOrKeywordName()
                pass
            elif token in [11, 33, 287, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320]:
                self.enterOuterAlt(localctx, 2)
                self.state = 868
                localctx.Literal = self.literalExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareQueryParametersStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._declareQueryParametersStatementParameter = None # DeclareQueryParametersStatementParameterContext
            self.Parameters = list() # of DeclareQueryParametersStatementParameterContexts

        def DECLARE(self):
            return self.getToken(HqlParser.DECLARE, 0)

        def QUERYPARAMETERS(self):
            return self.getToken(HqlParser.QUERYPARAMETERS, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def declareQueryParametersStatementParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.DeclareQueryParametersStatementParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.DeclareQueryParametersStatementParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_declareQueryParametersStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareQueryParametersStatement" ):
                listener.enterDeclareQueryParametersStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareQueryParametersStatement" ):
                listener.exitDeclareQueryParametersStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclareQueryParametersStatement" ):
                return visitor.visitDeclareQueryParametersStatement(self)
            else:
                return visitor.visitChildren(self)




    def declareQueryParametersStatement(self):

        localctx = HqlParser.DeclareQueryParametersStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_declareQueryParametersStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.match(HqlParser.DECLARE)
            self.state = 872
            self.match(HqlParser.QUERYPARAMETERS)
            self.state = 873
            self.match(HqlParser.OPENPAREN)
            self.state = 874
            localctx._declareQueryParametersStatementParameter = self.declareQueryParametersStatementParameter()
            localctx.Parameters.append(localctx._declareQueryParametersStatementParameter)
            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 875
                self.match(HqlParser.COMMA)
                self.state = 876
                localctx._declareQueryParametersStatementParameter = self.declareQueryParametersStatementParameter()
                localctx.Parameters.append(localctx._declareQueryParametersStatementParameter)
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 882
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareQueryParametersStatementParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.Type = None # ScalarTypeContext
            self.Default = None # ScalarParameterDefaultContext

        def COLON(self):
            return self.getToken(HqlParser.COLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(HqlParser.ParameterNameContext,0)


        def scalarType(self):
            return self.getTypedRuleContext(HqlParser.ScalarTypeContext,0)


        def scalarParameterDefault(self):
            return self.getTypedRuleContext(HqlParser.ScalarParameterDefaultContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_declareQueryParametersStatementParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareQueryParametersStatementParameter" ):
                listener.enterDeclareQueryParametersStatementParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareQueryParametersStatementParameter" ):
                listener.exitDeclareQueryParametersStatementParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclareQueryParametersStatementParameter" ):
                return visitor.visitDeclareQueryParametersStatementParameter(self)
            else:
                return visitor.visitChildren(self)




    def declareQueryParametersStatementParameter(self):

        localctx = HqlParser.DeclareQueryParametersStatementParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_declareQueryParametersStatementParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            localctx.Name = self.parameterName()
            self.state = 885
            self.match(HqlParser.COLON)
            self.state = 886
            localctx.Type = self.scalarType()
            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 887
                localctx.Default = self.scalarParameterDefault()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ExpressionContext

        def expression(self):
            return self.getTypedRuleContext(HqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_queryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryStatement" ):
                listener.enterQueryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryStatement" ):
                listener.exitQueryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryStatement" ):
                return visitor.visitQueryStatement(self)
            else:
                return visitor.visitChildren(self)




    def queryStatement(self):

        localctx = HqlParser.QueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_queryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            localctx.Expression = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pipeExpression(self):
            return self.getTypedRuleContext(HqlParser.PipeExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = HqlParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.pipeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PipeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # BeforePipeExpressionContext
            self._pipedOperator = None # PipedOperatorContext
            self.PipedOperators = list() # of PipedOperatorContexts

        def beforePipeExpression(self):
            return self.getTypedRuleContext(HqlParser.BeforePipeExpressionContext,0)


        def pipedOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.PipedOperatorContext)
            else:
                return self.getTypedRuleContext(HqlParser.PipedOperatorContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_pipeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPipeExpression" ):
                listener.enterPipeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPipeExpression" ):
                listener.exitPipeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPipeExpression" ):
                return visitor.visitPipeExpression(self)
            else:
                return visitor.visitChildren(self)




    def pipeExpression(self):

        localctx = HqlParser.PipeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_pipeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            localctx.Expression = self.beforePipeExpression()
            self.state = 898
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 895
                    localctx._pipedOperator = self.pipedOperator()
                    localctx.PipedOperators.append(localctx._pipedOperator) 
                self.state = 900
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PipedOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # AfterPipeOperatorContext

        def BAR(self):
            return self.getToken(HqlParser.BAR, 0)

        def afterPipeOperator(self):
            return self.getTypedRuleContext(HqlParser.AfterPipeOperatorContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_pipedOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPipedOperator" ):
                listener.enterPipedOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPipedOperator" ):
                listener.exitPipedOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPipedOperator" ):
                return visitor.visitPipedOperator(self)
            else:
                return visitor.visitChildren(self)




    def pipedOperator(self):

        localctx = HqlParser.PipedOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_pipedOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.match(HqlParser.BAR)
            self.state = 902
            localctx.Operator = self.afterPipeOperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PipeSubExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # AfterPipeOperatorContext
            self._pipedOperator = None # PipedOperatorContext
            self.PipedOperators = list() # of PipedOperatorContexts

        def afterPipeOperator(self):
            return self.getTypedRuleContext(HqlParser.AfterPipeOperatorContext,0)


        def pipedOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.PipedOperatorContext)
            else:
                return self.getTypedRuleContext(HqlParser.PipedOperatorContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_pipeSubExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPipeSubExpression" ):
                listener.enterPipeSubExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPipeSubExpression" ):
                listener.exitPipeSubExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPipeSubExpression" ):
                return visitor.visitPipeSubExpression(self)
            else:
                return visitor.visitChildren(self)




    def pipeSubExpression(self):

        localctx = HqlParser.PipeSubExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_pipeSubExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            localctx.Expression = self.afterPipeOperator()
            self.state = 908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 905
                localctx._pipedOperator = self.pipedOperator()
                localctx.PipedOperators.append(localctx._pipedOperator)
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeforePipeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def beforeOrAfterPipeOperator(self):
            return self.getTypedRuleContext(HqlParser.BeforeOrAfterPipeOperatorContext,0)


        def printOperator(self):
            return self.getTypedRuleContext(HqlParser.PrintOperatorContext,0)


        def macroExpandOperator(self):
            return self.getTypedRuleContext(HqlParser.MacroExpandOperatorContext,0)


        def rangeExpression(self):
            return self.getTypedRuleContext(HqlParser.RangeExpressionContext,0)


        def scopedFunctionCallExpression(self):
            return self.getTypedRuleContext(HqlParser.ScopedFunctionCallExpressionContext,0)


        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_beforePipeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeforePipeExpression" ):
                listener.enterBeforePipeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeforePipeExpression" ):
                listener.exitBeforePipeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeforePipeExpression" ):
                return visitor.visitBeforePipeExpression(self)
            else:
                return visitor.visitChildren(self)




    def beforePipeExpression(self):

        localctx = HqlParser.BeforePipeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_beforePipeExpression)
        try:
            self.state = 917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 911
                self.beforeOrAfterPipeOperator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 912
                self.printOperator()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 913
                self.macroExpandOperator()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 914
                self.rangeExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 915
                self.scopedFunctionCallExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 916
                self.unnamedExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AfterPipeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asOperator(self):
            return self.getTypedRuleContext(HqlParser.AsOperatorContext,0)


        def assertSchemaOperator(self):
            return self.getTypedRuleContext(HqlParser.AssertSchemaOperatorContext,0)


        def consumeOperator(self):
            return self.getTypedRuleContext(HqlParser.ConsumeOperatorContext,0)


        def countOperator(self):
            return self.getTypedRuleContext(HqlParser.CountOperatorContext,0)


        def distinctOperator(self):
            return self.getTypedRuleContext(HqlParser.DistinctOperatorContext,0)


        def executeAndCacheOperator(self):
            return self.getTypedRuleContext(HqlParser.ExecuteAndCacheOperatorContext,0)


        def extendOperator(self):
            return self.getTypedRuleContext(HqlParser.ExtendOperatorContext,0)


        def facetByOperator(self):
            return self.getTypedRuleContext(HqlParser.FacetByOperatorContext,0)


        def findOperator(self):
            return self.getTypedRuleContext(HqlParser.FindOperatorContext,0)


        def forkOperator(self):
            return self.getTypedRuleContext(HqlParser.ForkOperatorContext,0)


        def getSchemaOperator(self):
            return self.getTypedRuleContext(HqlParser.GetSchemaOperatorContext,0)


        def graphMarkComponentsOperator(self):
            return self.getTypedRuleContext(HqlParser.GraphMarkComponentsOperatorContext,0)


        def graphMatchOperator(self):
            return self.getTypedRuleContext(HqlParser.GraphMatchOperatorContext,0)


        def graphMergeOperator(self):
            return self.getTypedRuleContext(HqlParser.GraphMergeOperatorContext,0)


        def graphShortestPathsOperator(self):
            return self.getTypedRuleContext(HqlParser.GraphShortestPathsOperatorContext,0)


        def graphToTableOperator(self):
            return self.getTypedRuleContext(HqlParser.GraphToTableOperatorContext,0)


        def invokeOperator(self):
            return self.getTypedRuleContext(HqlParser.InvokeOperatorContext,0)


        def joinOperator(self):
            return self.getTypedRuleContext(HqlParser.JoinOperatorContext,0)


        def lookupOperator(self):
            return self.getTypedRuleContext(HqlParser.LookupOperatorContext,0)


        def makeGraphOperator(self):
            return self.getTypedRuleContext(HqlParser.MakeGraphOperatorContext,0)


        def makeSeriesOperator(self):
            return self.getTypedRuleContext(HqlParser.MakeSeriesOperatorContext,0)


        def mvexpandOperator(self):
            return self.getTypedRuleContext(HqlParser.MvexpandOperatorContext,0)


        def mvapplyOperator(self):
            return self.getTypedRuleContext(HqlParser.MvapplyOperatorContext,0)


        def evaluateOperator(self):
            return self.getTypedRuleContext(HqlParser.EvaluateOperatorContext,0)


        def parseOperator(self):
            return self.getTypedRuleContext(HqlParser.ParseOperatorContext,0)


        def parseKvOperator(self):
            return self.getTypedRuleContext(HqlParser.ParseKvOperatorContext,0)


        def parseWhereOperator(self):
            return self.getTypedRuleContext(HqlParser.ParseWhereOperatorContext,0)


        def partitionOperator(self):
            return self.getTypedRuleContext(HqlParser.PartitionOperatorContext,0)


        def partitionByOperator(self):
            return self.getTypedRuleContext(HqlParser.PartitionByOperatorContext,0)


        def projectOperator(self):
            return self.getTypedRuleContext(HqlParser.ProjectOperatorContext,0)


        def projectAwayOperator(self):
            return self.getTypedRuleContext(HqlParser.ProjectAwayOperatorContext,0)


        def projectRenameOperator(self):
            return self.getTypedRuleContext(HqlParser.ProjectRenameOperatorContext,0)


        def projectReorderOperator(self):
            return self.getTypedRuleContext(HqlParser.ProjectReorderOperatorContext,0)


        def projectKeepOperator(self):
            return self.getTypedRuleContext(HqlParser.ProjectKeepOperatorContext,0)


        def reduceByOperator(self):
            return self.getTypedRuleContext(HqlParser.ReduceByOperatorContext,0)


        def renderOperator(self):
            return self.getTypedRuleContext(HqlParser.RenderOperatorContext,0)


        def sampleOperator(self):
            return self.getTypedRuleContext(HqlParser.SampleOperatorContext,0)


        def sampleDistinctOperator(self):
            return self.getTypedRuleContext(HqlParser.SampleDistinctOperatorContext,0)


        def scanOperator(self):
            return self.getTypedRuleContext(HqlParser.ScanOperatorContext,0)


        def searchOperator(self):
            return self.getTypedRuleContext(HqlParser.SearchOperatorContext,0)


        def serializeOperator(self):
            return self.getTypedRuleContext(HqlParser.SerializeOperatorContext,0)


        def sortOperator(self):
            return self.getTypedRuleContext(HqlParser.SortOperatorContext,0)


        def summarizeOperator(self):
            return self.getTypedRuleContext(HqlParser.SummarizeOperatorContext,0)


        def takeOperator(self):
            return self.getTypedRuleContext(HqlParser.TakeOperatorContext,0)


        def topHittersOperator(self):
            return self.getTypedRuleContext(HqlParser.TopHittersOperatorContext,0)


        def topOperator(self):
            return self.getTypedRuleContext(HqlParser.TopOperatorContext,0)


        def topNestedOperator(self):
            return self.getTypedRuleContext(HqlParser.TopNestedOperatorContext,0)


        def unionOperator(self):
            return self.getTypedRuleContext(HqlParser.UnionOperatorContext,0)


        def whereOperator(self):
            return self.getTypedRuleContext(HqlParser.WhereOperatorContext,0)


        def unnestOperator(self):
            return self.getTypedRuleContext(HqlParser.UnnestOperatorContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_afterPipeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAfterPipeOperator" ):
                listener.enterAfterPipeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAfterPipeOperator" ):
                listener.exitAfterPipeOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAfterPipeOperator" ):
                return visitor.visitAfterPipeOperator(self)
            else:
                return visitor.visitChildren(self)




    def afterPipeOperator(self):

        localctx = HqlParser.AfterPipeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_afterPipeOperator)
        try:
            self.state = 969
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47]:
                self.enterOuterAlt(localctx, 1)
                self.state = 919
                self.asOperator()
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                self.assertSchemaOperator()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 3)
                self.state = 921
                self.consumeOperator()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 4)
                self.state = 922
                self.countOperator()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 5)
                self.state = 923
                self.distinctOperator()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 6)
                self.state = 924
                self.executeAndCacheOperator()
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 7)
                self.state = 925
                self.extendOperator()
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 8)
                self.state = 926
                self.facetByOperator()
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 9)
                self.state = 927
                self.findOperator()
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 10)
                self.state = 928
                self.forkOperator()
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 11)
                self.state = 929
                self.getSchemaOperator()
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 12)
                self.state = 930
                self.graphMarkComponentsOperator()
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 13)
                self.state = 931
                self.graphMatchOperator()
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 14)
                self.state = 932
                self.graphMergeOperator()
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 15)
                self.state = 933
                self.graphShortestPathsOperator()
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 16)
                self.state = 934
                self.graphToTableOperator()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 17)
                self.state = 935
                self.invokeOperator()
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 18)
                self.state = 936
                self.joinOperator()
                pass
            elif token in [149]:
                self.enterOuterAlt(localctx, 19)
                self.state = 937
                self.lookupOperator()
                pass
            elif token in [152]:
                self.enterOuterAlt(localctx, 20)
                self.state = 938
                self.makeGraphOperator()
                pass
            elif token in [153]:
                self.enterOuterAlt(localctx, 21)
                self.state = 939
                self.makeSeriesOperator()
                pass
            elif token in [159, 161]:
                self.enterOuterAlt(localctx, 22)
                self.state = 940
                self.mvexpandOperator()
                pass
            elif token in [158, 160]:
                self.enterOuterAlt(localctx, 23)
                self.state = 941
                self.mvapplyOperator()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 24)
                self.state = 942
                self.evaluateOperator()
                pass
            elif token in [195]:
                self.enterOuterAlt(localctx, 25)
                self.state = 943
                self.parseOperator()
                pass
            elif token in [196]:
                self.enterOuterAlt(localctx, 26)
                self.state = 944
                self.parseKvOperator()
                pass
            elif token in [197]:
                self.enterOuterAlt(localctx, 27)
                self.state = 945
                self.parseWhereOperator()
                pass
            elif token in [198]:
                self.enterOuterAlt(localctx, 28)
                self.state = 946
                self.partitionOperator()
                pass
            elif token in [199]:
                self.enterOuterAlt(localctx, 29)
                self.state = 947
                self.partitionByOperator()
                pass
            elif token in [207]:
                self.enterOuterAlt(localctx, 30)
                self.state = 948
                self.projectOperator()
                pass
            elif token in [208]:
                self.enterOuterAlt(localctx, 31)
                self.state = 949
                self.projectAwayOperator()
                pass
            elif token in [211]:
                self.enterOuterAlt(localctx, 32)
                self.state = 950
                self.projectRenameOperator()
                pass
            elif token in [212]:
                self.enterOuterAlt(localctx, 33)
                self.state = 951
                self.projectReorderOperator()
                pass
            elif token in [210]:
                self.enterOuterAlt(localctx, 34)
                self.state = 952
                self.projectKeepOperator()
                pass
            elif token in [216]:
                self.enterOuterAlt(localctx, 35)
                self.state = 953
                self.reduceByOperator()
                pass
            elif token in [219]:
                self.enterOuterAlt(localctx, 36)
                self.state = 954
                self.renderOperator()
                pass
            elif token in [222]:
                self.enterOuterAlt(localctx, 37)
                self.state = 955
                self.sampleOperator()
                pass
            elif token in [223]:
                self.enterOuterAlt(localctx, 38)
                self.state = 956
                self.sampleDistinctOperator()
                pass
            elif token in [224]:
                self.enterOuterAlt(localctx, 39)
                self.state = 957
                self.scanOperator()
                pass
            elif token in [226]:
                self.enterOuterAlt(localctx, 40)
                self.state = 958
                self.searchOperator()
                pass
            elif token in [227]:
                self.enterOuterAlt(localctx, 41)
                self.state = 959
                self.serializeOperator()
                pass
            elif token in [190, 231]:
                self.enterOuterAlt(localctx, 42)
                self.state = 960
                self.sortOperator()
                pass
            elif token in [239]:
                self.enterOuterAlt(localctx, 43)
                self.state = 961
                self.summarizeOperator()
                pass
            elif token in [145, 241]:
                self.enterOuterAlt(localctx, 44)
                self.state = 962
                self.takeOperator()
                pass
            elif token in [249]:
                self.enterOuterAlt(localctx, 45)
                self.state = 963
                self.topHittersOperator()
                pass
            elif token in [248]:
                self.enterOuterAlt(localctx, 46)
                self.state = 964
                self.topOperator()
                pass
            elif token in [250]:
                self.enterOuterAlt(localctx, 47)
                self.state = 965
                self.topNestedOperator()
                pass
            elif token in [255]:
                self.enterOuterAlt(localctx, 48)
                self.state = 966
                self.unionOperator()
                pass
            elif token in [90, 261]:
                self.enterOuterAlt(localctx, 49)
                self.state = 967
                self.whereOperator()
                pass
            elif token in [256]:
                self.enterOuterAlt(localctx, 50)
                self.state = 968
                self.unnestOperator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeforeOrAfterPipeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def findOperator(self):
            return self.getTypedRuleContext(HqlParser.FindOperatorContext,0)


        def searchOperator(self):
            return self.getTypedRuleContext(HqlParser.SearchOperatorContext,0)


        def unionOperator(self):
            return self.getTypedRuleContext(HqlParser.UnionOperatorContext,0)


        def evaluateOperator(self):
            return self.getTypedRuleContext(HqlParser.EvaluateOperatorContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_beforeOrAfterPipeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeforeOrAfterPipeOperator" ):
                listener.enterBeforeOrAfterPipeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeforeOrAfterPipeOperator" ):
                listener.exitBeforeOrAfterPipeOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeforeOrAfterPipeOperator" ):
                return visitor.visitBeforeOrAfterPipeOperator(self)
            else:
                return visitor.visitChildren(self)




    def beforeOrAfterPipeOperator(self):

        localctx = HqlParser.BeforeOrAfterPipeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_beforeOrAfterPipeOperator)
        try:
            self.state = 975
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [91]:
                self.enterOuterAlt(localctx, 1)
                self.state = 971
                self.findOperator()
                pass
            elif token in [226]:
                self.enterOuterAlt(localctx, 2)
                self.state = 972
                self.searchOperator()
                pass
            elif token in [255]:
                self.enterOuterAlt(localctx, 3)
                self.state = 973
                self.unionOperator()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 4)
                self.state = 974
                self.evaluateOperator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForkPipeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def countOperator(self):
            return self.getTypedRuleContext(HqlParser.CountOperatorContext,0)


        def extendOperator(self):
            return self.getTypedRuleContext(HqlParser.ExtendOperatorContext,0)


        def whereOperator(self):
            return self.getTypedRuleContext(HqlParser.WhereOperatorContext,0)


        def parseOperator(self):
            return self.getTypedRuleContext(HqlParser.ParseOperatorContext,0)


        def parseWhereOperator(self):
            return self.getTypedRuleContext(HqlParser.ParseWhereOperatorContext,0)


        def takeOperator(self):
            return self.getTypedRuleContext(HqlParser.TakeOperatorContext,0)


        def topNestedOperator(self):
            return self.getTypedRuleContext(HqlParser.TopNestedOperatorContext,0)


        def projectOperator(self):
            return self.getTypedRuleContext(HqlParser.ProjectOperatorContext,0)


        def projectAwayOperator(self):
            return self.getTypedRuleContext(HqlParser.ProjectAwayOperatorContext,0)


        def projectRenameOperator(self):
            return self.getTypedRuleContext(HqlParser.ProjectRenameOperatorContext,0)


        def projectReorderOperator(self):
            return self.getTypedRuleContext(HqlParser.ProjectReorderOperatorContext,0)


        def projectKeepOperator(self):
            return self.getTypedRuleContext(HqlParser.ProjectKeepOperatorContext,0)


        def summarizeOperator(self):
            return self.getTypedRuleContext(HqlParser.SummarizeOperatorContext,0)


        def distinctOperator(self):
            return self.getTypedRuleContext(HqlParser.DistinctOperatorContext,0)


        def topHittersOperator(self):
            return self.getTypedRuleContext(HqlParser.TopHittersOperatorContext,0)


        def topOperator(self):
            return self.getTypedRuleContext(HqlParser.TopOperatorContext,0)


        def sortOperator(self):
            return self.getTypedRuleContext(HqlParser.SortOperatorContext,0)


        def mvexpandOperator(self):
            return self.getTypedRuleContext(HqlParser.MvexpandOperatorContext,0)


        def reduceByOperator(self):
            return self.getTypedRuleContext(HqlParser.ReduceByOperatorContext,0)


        def sampleOperator(self):
            return self.getTypedRuleContext(HqlParser.SampleOperatorContext,0)


        def sampleDistinctOperator(self):
            return self.getTypedRuleContext(HqlParser.SampleDistinctOperatorContext,0)


        def asOperator(self):
            return self.getTypedRuleContext(HqlParser.AsOperatorContext,0)


        def invokeOperator(self):
            return self.getTypedRuleContext(HqlParser.InvokeOperatorContext,0)


        def executeAndCacheOperator(self):
            return self.getTypedRuleContext(HqlParser.ExecuteAndCacheOperatorContext,0)


        def scanOperator(self):
            return self.getTypedRuleContext(HqlParser.ScanOperatorContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_forkPipeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForkPipeOperator" ):
                listener.enterForkPipeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForkPipeOperator" ):
                listener.exitForkPipeOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForkPipeOperator" ):
                return visitor.visitForkPipeOperator(self)
            else:
                return visitor.visitChildren(self)




    def forkPipeOperator(self):

        localctx = HqlParser.ForkPipeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_forkPipeOperator)
        try:
            self.state = 1002
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66]:
                self.enterOuterAlt(localctx, 1)
                self.state = 977
                self.countOperator()
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 2)
                self.state = 978
                self.extendOperator()
                pass
            elif token in [90, 261]:
                self.enterOuterAlt(localctx, 3)
                self.state = 979
                self.whereOperator()
                pass
            elif token in [195]:
                self.enterOuterAlt(localctx, 4)
                self.state = 980
                self.parseOperator()
                pass
            elif token in [197]:
                self.enterOuterAlt(localctx, 5)
                self.state = 981
                self.parseWhereOperator()
                pass
            elif token in [145, 241]:
                self.enterOuterAlt(localctx, 6)
                self.state = 982
                self.takeOperator()
                pass
            elif token in [250]:
                self.enterOuterAlt(localctx, 7)
                self.state = 983
                self.topNestedOperator()
                pass
            elif token in [207]:
                self.enterOuterAlt(localctx, 8)
                self.state = 984
                self.projectOperator()
                pass
            elif token in [208]:
                self.enterOuterAlt(localctx, 9)
                self.state = 985
                self.projectAwayOperator()
                pass
            elif token in [211]:
                self.enterOuterAlt(localctx, 10)
                self.state = 986
                self.projectRenameOperator()
                pass
            elif token in [212]:
                self.enterOuterAlt(localctx, 11)
                self.state = 987
                self.projectReorderOperator()
                pass
            elif token in [210]:
                self.enterOuterAlt(localctx, 12)
                self.state = 988
                self.projectKeepOperator()
                pass
            elif token in [239]:
                self.enterOuterAlt(localctx, 13)
                self.state = 989
                self.summarizeOperator()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 14)
                self.state = 990
                self.distinctOperator()
                pass
            elif token in [249]:
                self.enterOuterAlt(localctx, 15)
                self.state = 991
                self.topHittersOperator()
                pass
            elif token in [248]:
                self.enterOuterAlt(localctx, 16)
                self.state = 992
                self.topOperator()
                pass
            elif token in [190, 231]:
                self.enterOuterAlt(localctx, 17)
                self.state = 993
                self.sortOperator()
                pass
            elif token in [159, 161]:
                self.enterOuterAlt(localctx, 18)
                self.state = 994
                self.mvexpandOperator()
                pass
            elif token in [216]:
                self.enterOuterAlt(localctx, 19)
                self.state = 995
                self.reduceByOperator()
                pass
            elif token in [222]:
                self.enterOuterAlt(localctx, 20)
                self.state = 996
                self.sampleOperator()
                pass
            elif token in [223]:
                self.enterOuterAlt(localctx, 21)
                self.state = 997
                self.sampleDistinctOperator()
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 22)
                self.state = 998
                self.asOperator()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 23)
                self.state = 999
                self.invokeOperator()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1000
                self.executeAndCacheOperator()
                pass
            elif token in [224]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1001
                self.scanOperator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def AS(self):
            return self.getToken(HqlParser.AS, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_asOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsOperator" ):
                listener.enterAsOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsOperator" ):
                listener.exitAsOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsOperator" ):
                return visitor.visitAsOperator(self)
            else:
                return visitor.visitChildren(self)




    def asOperator(self):

        localctx = HqlParser.AsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_asOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.match(HqlParser.AS)
            self.state = 1008
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1005
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1010
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

            self.state = 1011
            localctx.Name = self.identifierOrKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertSchemaOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Schema = None # RowSchemaContext

        def ASSERTSCHEMA(self):
            return self.getToken(HqlParser.ASSERTSCHEMA, 0)

        def rowSchema(self):
            return self.getTypedRuleContext(HqlParser.RowSchemaContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_assertSchemaOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertSchemaOperator" ):
                listener.enterAssertSchemaOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertSchemaOperator" ):
                listener.exitAssertSchemaOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssertSchemaOperator" ):
                return visitor.visitAssertSchemaOperator(self)
            else:
                return visitor.visitChildren(self)




    def assertSchemaOperator(self):

        localctx = HqlParser.AssertSchemaOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_assertSchemaOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.match(HqlParser.ASSERTSCHEMA)
            self.state = 1014
            localctx.Schema = self.rowSchema()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConsumeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts

        def CONSUME(self):
            return self.getToken(HqlParser.CONSUME, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_consumeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConsumeOperator" ):
                listener.enterConsumeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConsumeOperator" ):
                listener.exitConsumeOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConsumeOperator" ):
                return visitor.visitConsumeOperator(self)
            else:
                return visitor.visitChildren(self)




    def consumeOperator(self):

        localctx = HqlParser.ConsumeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_consumeOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.match(HqlParser.CONSUME)
            self.state = 1020
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223372019670515679) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 36028797018963981) != 0):
                self.state = 1017
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1022
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CountOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Name = None # TableNameReferenceContext

        def COUNT(self):
            return self.getToken(HqlParser.COUNT, 0)

        def AS(self):
            return self.getToken(HqlParser.AS, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def tableNameReference(self):
            return self.getTypedRuleContext(HqlParser.TableNameReferenceContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_countOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCountOperator" ):
                listener.enterCountOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCountOperator" ):
                listener.exitCountOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCountOperator" ):
                return visitor.visitCountOperator(self)
            else:
                return visitor.visitChildren(self)




    def countOperator(self):

        localctx = HqlParser.CountOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_countOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.match(HqlParser.COUNT)
            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223372019670515679) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 36028797018963981) != 0):
                self.state = 1024
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 1030
                self.match(HqlParser.AS)
                self.state = 1031
                localctx.Name = self.tableNameReference()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistinctOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Star = None # DistinctOperatorStarTargetContext
            self.ColumnList = None # DistinctOperatorColumnListTargetContext

        def DISTINCT(self):
            return self.getToken(HqlParser.DISTINCT, 0)

        def distinctOperatorStarTarget(self):
            return self.getTypedRuleContext(HqlParser.DistinctOperatorStarTargetContext,0)


        def distinctOperatorColumnListTarget(self):
            return self.getTypedRuleContext(HqlParser.DistinctOperatorColumnListTargetContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_distinctOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinctOperator" ):
                listener.enterDistinctOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinctOperator" ):
                listener.exitDistinctOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDistinctOperator" ):
                return visitor.visitDistinctOperator(self)
            else:
                return visitor.visitChildren(self)




    def distinctOperator(self):

        localctx = HqlParser.DistinctOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_distinctOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.match(HqlParser.DISTINCT)
            self.state = 1038
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1035
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1040
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

            self.state = 1043
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 1041
                localctx.Star = self.distinctOperatorStarTarget()
                pass

            elif la_ == 2:
                self.state = 1042
                localctx.ColumnList = self.distinctOperatorColumnListTarget()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistinctOperatorStarTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(HqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_distinctOperatorStarTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinctOperatorStarTarget" ):
                listener.enterDistinctOperatorStarTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinctOperatorStarTarget" ):
                listener.exitDistinctOperatorStarTarget(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDistinctOperatorStarTarget" ):
                return visitor.visitDistinctOperatorStarTarget(self)
            else:
                return visitor.visitChildren(self)




    def distinctOperatorStarTarget(self):

        localctx = HqlParser.DistinctOperatorStarTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_distinctOperatorStarTarget)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.match(HqlParser.ASTERISK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistinctOperatorColumnListTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unnamedExpression = None # UnnamedExpressionContext
            self.Expressions = list() # of UnnamedExpressionContexts

        def unnamedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.UnnamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_distinctOperatorColumnListTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinctOperatorColumnListTarget" ):
                listener.enterDistinctOperatorColumnListTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinctOperatorColumnListTarget" ):
                listener.exitDistinctOperatorColumnListTarget(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDistinctOperatorColumnListTarget" ):
                return visitor.visitDistinctOperatorColumnListTarget(self)
            else:
                return visitor.visitChildren(self)




    def distinctOperatorColumnListTarget(self):

        localctx = HqlParser.DistinctOperatorColumnListTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_distinctOperatorColumnListTarget)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            localctx._unnamedExpression = self.unnamedExpression()
            localctx.Expressions.append(localctx._unnamedExpression)
            self.state = 1052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1048
                self.match(HqlParser.COMMA)
                self.state = 1049
                localctx._unnamedExpression = self.unnamedExpression()
                localctx.Expressions.append(localctx._unnamedExpression)
                self.state = 1054
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvaluateOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.PlugInCall = None # FunctionCallExpressionContext
            self.SchemaClause = None # EvaluateOperatorSchemaClauseContext

        def EVALUATE(self):
            return self.getToken(HqlParser.EVALUATE, 0)

        def functionCallExpression(self):
            return self.getTypedRuleContext(HqlParser.FunctionCallExpressionContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def evaluateOperatorSchemaClause(self):
            return self.getTypedRuleContext(HqlParser.EvaluateOperatorSchemaClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_evaluateOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluateOperator" ):
                listener.enterEvaluateOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluateOperator" ):
                listener.exitEvaluateOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvaluateOperator" ):
                return visitor.visitEvaluateOperator(self)
            else:
                return visitor.visitChildren(self)




    def evaluateOperator(self):

        localctx = HqlParser.EvaluateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_evaluateOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(HqlParser.EVALUATE)
            self.state = 1059
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1056
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1061
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

            self.state = 1062
            localctx.PlugInCall = self.functionCallExpression()
            self.state = 1064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 1063
                localctx.SchemaClause = self.evaluateOperatorSchemaClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvaluateOperatorSchemaClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Schema = None # RowSchemaContext

        def COLON(self):
            return self.getToken(HqlParser.COLON, 0)

        def rowSchema(self):
            return self.getTypedRuleContext(HqlParser.RowSchemaContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_evaluateOperatorSchemaClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluateOperatorSchemaClause" ):
                listener.enterEvaluateOperatorSchemaClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluateOperatorSchemaClause" ):
                listener.exitEvaluateOperatorSchemaClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvaluateOperatorSchemaClause" ):
                return visitor.visitEvaluateOperatorSchemaClause(self)
            else:
                return visitor.visitChildren(self)




    def evaluateOperatorSchemaClause(self):

        localctx = HqlParser.EvaluateOperatorSchemaClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_evaluateOperatorSchemaClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.match(HqlParser.COLON)
            self.state = 1067
            localctx.Schema = self.rowSchema()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def EXTEND(self):
            return self.getToken(HqlParser.EXTEND, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_extendOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendOperator" ):
                listener.enterExtendOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendOperator" ):
                listener.exitExtendOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendOperator" ):
                return visitor.visitExtendOperator(self)
            else:
                return visitor.visitChildren(self)




    def extendOperator(self):

        localctx = HqlParser.ExtendOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_extendOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.match(HqlParser.EXTEND)
            self.state = 1070
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 1075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1071
                self.match(HqlParser.COMMA)
                self.state = 1072
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1077
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteAndCacheOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE_AND_CACHE(self):
            return self.getToken(HqlParser.EXECUTE_AND_CACHE, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_executeAndCacheOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteAndCacheOperator" ):
                listener.enterExecuteAndCacheOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteAndCacheOperator" ):
                listener.exitExecuteAndCacheOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecuteAndCacheOperator" ):
                return visitor.visitExecuteAndCacheOperator(self)
            else:
                return visitor.visitChildren(self)




    def executeAndCacheOperator(self):

        localctx = HqlParser.ExecuteAndCacheOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_executeAndCacheOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self.match(HqlParser.EXECUTE_AND_CACHE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FacetByOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._entityExpression = None # EntityExpressionContext
            self.Entities = list() # of EntityExpressionContexts
            self.WithOperatorClause = None # FacetByOperatorWithOperatorClauseContext
            self.WithExpressionClause = None # FacetByOperatorWithExpressionClauseContext

        def FACET(self):
            return self.getToken(HqlParser.FACET, 0)

        def BY(self):
            return self.getToken(HqlParser.BY, 0)

        def entityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.EntityExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.EntityExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def facetByOperatorWithOperatorClause(self):
            return self.getTypedRuleContext(HqlParser.FacetByOperatorWithOperatorClauseContext,0)


        def facetByOperatorWithExpressionClause(self):
            return self.getTypedRuleContext(HqlParser.FacetByOperatorWithExpressionClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_facetByOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFacetByOperator" ):
                listener.enterFacetByOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFacetByOperator" ):
                listener.exitFacetByOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFacetByOperator" ):
                return visitor.visitFacetByOperator(self)
            else:
                return visitor.visitChildren(self)




    def facetByOperator(self):

        localctx = HqlParser.FacetByOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_facetByOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.match(HqlParser.FACET)
            self.state = 1081
            self.match(HqlParser.BY)
            self.state = 1082
            localctx._entityExpression = self.entityExpression()
            localctx.Entities.append(localctx._entityExpression)
            self.state = 1087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1083
                self.match(HqlParser.COMMA)
                self.state = 1084
                localctx._entityExpression = self.entityExpression()
                localctx.Entities.append(localctx._entityExpression)
                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1092
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 1090
                localctx.WithOperatorClause = self.facetByOperatorWithOperatorClause()

            elif la_ == 2:
                self.state = 1091
                localctx.WithExpressionClause = self.facetByOperatorWithExpressionClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FacetByOperatorWithOperatorClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # ForkPipeOperatorContext

        def WITH(self):
            return self.getToken(HqlParser.WITH, 0)

        def forkPipeOperator(self):
            return self.getTypedRuleContext(HqlParser.ForkPipeOperatorContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_facetByOperatorWithOperatorClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFacetByOperatorWithOperatorClause" ):
                listener.enterFacetByOperatorWithOperatorClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFacetByOperatorWithOperatorClause" ):
                listener.exitFacetByOperatorWithOperatorClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFacetByOperatorWithOperatorClause" ):
                return visitor.visitFacetByOperatorWithOperatorClause(self)
            else:
                return visitor.visitChildren(self)




    def facetByOperatorWithOperatorClause(self):

        localctx = HqlParser.FacetByOperatorWithOperatorClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_facetByOperatorWithOperatorClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.match(HqlParser.WITH)
            self.state = 1095
            localctx.Operator = self.forkPipeOperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FacetByOperatorWithExpressionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ForkOperatorExpressionContext

        def WITH(self):
            return self.getToken(HqlParser.WITH, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def forkOperatorExpression(self):
            return self.getTypedRuleContext(HqlParser.ForkOperatorExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_facetByOperatorWithExpressionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFacetByOperatorWithExpressionClause" ):
                listener.enterFacetByOperatorWithExpressionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFacetByOperatorWithExpressionClause" ):
                listener.exitFacetByOperatorWithExpressionClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFacetByOperatorWithExpressionClause" ):
                return visitor.visitFacetByOperatorWithExpressionClause(self)
            else:
                return visitor.visitChildren(self)




    def facetByOperatorWithExpressionClause(self):

        localctx = HqlParser.FacetByOperatorWithExpressionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_facetByOperatorWithExpressionClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            self.match(HqlParser.WITH)
            self.state = 1098
            self.match(HqlParser.OPENPAREN)
            self.state = 1099
            localctx.Expression = self.forkOperatorExpression()
            self.state = 1100
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.DataScopeClause = None # DataScopeClauseContext
            self.ParameterWhereClause = None # FindOperatorParametersWhereClauseContext
            self.Expression = None # UnnamedExpressionContext
            self.ProjectClause = None # FindOperatorProjectClauseContext
            self.ProjectSmartClause = None # FindOperatorProjectSmartClauseContext
            self.ProjectAwayClause = None # FindOperatorProjectAwayClauseContext

        def FIND(self):
            return self.getToken(HqlParser.FIND, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def dataScopeClause(self):
            return self.getTypedRuleContext(HqlParser.DataScopeClauseContext,0)


        def findOperatorParametersWhereClause(self):
            return self.getTypedRuleContext(HqlParser.FindOperatorParametersWhereClauseContext,0)


        def findOperatorProjectClause(self):
            return self.getTypedRuleContext(HqlParser.FindOperatorProjectClauseContext,0)


        def findOperatorProjectSmartClause(self):
            return self.getTypedRuleContext(HqlParser.FindOperatorProjectSmartClauseContext,0)


        def findOperatorProjectAwayClause(self):
            return self.getTypedRuleContext(HqlParser.FindOperatorProjectAwayClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_findOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperator" ):
                listener.enterFindOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperator" ):
                listener.exitFindOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperator" ):
                return visitor.visitFindOperator(self)
            else:
                return visitor.visitChildren(self)




    def findOperator(self):

        localctx = HqlParser.FindOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_findOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.match(HqlParser.FIND)
            self.state = 1104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 1103
                localctx.DataScopeClause = self.dataScopeClause()


            self.state = 1107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 1106
                localctx.ParameterWhereClause = self.findOperatorParametersWhereClause()


            self.state = 1109
            localctx.Expression = self.unnamedExpression()
            self.state = 1112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 1110
                localctx.ProjectClause = self.findOperatorProjectClause()

            elif la_ == 2:
                self.state = 1111
                localctx.ProjectSmartClause = self.findOperatorProjectSmartClause()


            self.state = 1115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==209:
                self.state = 1114
                localctx.ProjectAwayClause = self.findOperatorProjectAwayClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorParametersWhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.InClause = None # FindOperatorInClauseContext

        def WHERE(self):
            return self.getToken(HqlParser.WHERE, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def findOperatorInClause(self):
            return self.getTypedRuleContext(HqlParser.FindOperatorInClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_findOperatorParametersWhereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorParametersWhereClause" ):
                listener.enterFindOperatorParametersWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorParametersWhereClause" ):
                listener.exitFindOperatorParametersWhereClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorParametersWhereClause" ):
                return visitor.visitFindOperatorParametersWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorParametersWhereClause(self):

        localctx = HqlParser.FindOperatorParametersWhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_findOperatorParametersWhereClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223372019670515679) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 36028797018963981) != 0):
                self.state = 1117
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1122
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 1123
                localctx.InClause = self.findOperatorInClause()


            self.state = 1126
            self.match(HqlParser.WHERE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorInClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._findOperatorSource = None # FindOperatorSourceContext
            self.Expressions = list() # of FindOperatorSourceContexts

        def IN(self):
            return self.getToken(HqlParser.IN, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def findOperatorSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.FindOperatorSourceContext)
            else:
                return self.getTypedRuleContext(HqlParser.FindOperatorSourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_findOperatorInClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorInClause" ):
                listener.enterFindOperatorInClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorInClause" ):
                listener.exitFindOperatorInClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorInClause" ):
                return visitor.visitFindOperatorInClause(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorInClause(self):

        localctx = HqlParser.FindOperatorInClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_findOperatorInClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self.match(HqlParser.IN)
            self.state = 1129
            self.match(HqlParser.OPENPAREN)
            self.state = 1130
            localctx._findOperatorSource = self.findOperatorSource()
            localctx.Expressions.append(localctx._findOperatorSource)
            self.state = 1135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1131
                self.match(HqlParser.COMMA)
                self.state = 1132
                localctx._findOperatorSource = self.findOperatorSource()
                localctx.Expressions.append(localctx._findOperatorSource)
                self.state = 1137
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1138
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorProjectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._findOperatorProjectExpression = None # FindOperatorProjectExpressionContext
            self.Expressions = list() # of FindOperatorProjectExpressionContexts

        def PROJECT(self):
            return self.getToken(HqlParser.PROJECT, 0)

        def findOperatorProjectExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.FindOperatorProjectExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.FindOperatorProjectExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_findOperatorProjectClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorProjectClause" ):
                listener.enterFindOperatorProjectClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorProjectClause" ):
                listener.exitFindOperatorProjectClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorProjectClause" ):
                return visitor.visitFindOperatorProjectClause(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorProjectClause(self):

        localctx = HqlParser.FindOperatorProjectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_findOperatorProjectClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.match(HqlParser.PROJECT)
            self.state = 1141
            localctx._findOperatorProjectExpression = self.findOperatorProjectExpression()
            localctx.Expressions.append(localctx._findOperatorProjectExpression)
            self.state = 1146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1142
                self.match(HqlParser.COMMA)
                self.state = 1143
                localctx._findOperatorProjectExpression = self.findOperatorProjectExpression()
                localctx.Expressions.append(localctx._findOperatorProjectExpression)
                self.state = 1148
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorProjectExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Column = None # FindOperatorColumnExpressionContext
            self.Pack = None # FindOperatorPackExpressionContext

        def findOperatorColumnExpression(self):
            return self.getTypedRuleContext(HqlParser.FindOperatorColumnExpressionContext,0)


        def findOperatorPackExpression(self):
            return self.getTypedRuleContext(HqlParser.FindOperatorPackExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_findOperatorProjectExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorProjectExpression" ):
                listener.enterFindOperatorProjectExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorProjectExpression" ):
                listener.exitFindOperatorProjectExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorProjectExpression" ):
                return visitor.visitFindOperatorProjectExpression(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorProjectExpression(self):

        localctx = HqlParser.FindOperatorProjectExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_findOperatorProjectExpression)
        try:
            self.state = 1151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1149
                localctx.Column = self.findOperatorColumnExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1150
                localctx.Pack = self.findOperatorPackExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorColumnExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.OptionalType = None # FindOperatorOptionalColumnTypeContext

        def parameterName(self):
            return self.getTypedRuleContext(HqlParser.ParameterNameContext,0)


        def findOperatorOptionalColumnType(self):
            return self.getTypedRuleContext(HqlParser.FindOperatorOptionalColumnTypeContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_findOperatorColumnExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorColumnExpression" ):
                listener.enterFindOperatorColumnExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorColumnExpression" ):
                listener.exitFindOperatorColumnExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorColumnExpression" ):
                return visitor.visitFindOperatorColumnExpression(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorColumnExpression(self):

        localctx = HqlParser.FindOperatorColumnExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_findOperatorColumnExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            localctx.Name = self.parameterName()
            self.state = 1155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 1154
                localctx.OptionalType = self.findOperatorOptionalColumnType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorOptionalColumnTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Type = None # ExtendedScalarTypeContext

        def COLON(self):
            return self.getToken(HqlParser.COLON, 0)

        def extendedScalarType(self):
            return self.getTypedRuleContext(HqlParser.ExtendedScalarTypeContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_findOperatorOptionalColumnType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorOptionalColumnType" ):
                listener.enterFindOperatorOptionalColumnType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorOptionalColumnType" ):
                listener.exitFindOperatorOptionalColumnType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorOptionalColumnType" ):
                return visitor.visitFindOperatorOptionalColumnType(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorOptionalColumnType(self):

        localctx = HqlParser.FindOperatorOptionalColumnTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_findOperatorOptionalColumnType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.match(HqlParser.COLON)
            self.state = 1158
            localctx.Type = self.extendedScalarType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorPackExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACK(self):
            return self.getToken(HqlParser.PACK, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def ASTERISK(self):
            return self.getToken(HqlParser.ASTERISK, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_findOperatorPackExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorPackExpression" ):
                listener.enterFindOperatorPackExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorPackExpression" ):
                listener.exitFindOperatorPackExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorPackExpression" ):
                return visitor.visitFindOperatorPackExpression(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorPackExpression(self):

        localctx = HqlParser.FindOperatorPackExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_findOperatorPackExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.match(HqlParser.PACK)
            self.state = 1161
            self.match(HqlParser.OPENPAREN)
            self.state = 1162
            self.match(HqlParser.ASTERISK)
            self.state = 1163
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorProjectSmartClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROJECTSMART(self):
            return self.getToken(HqlParser.PROJECTSMART, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_findOperatorProjectSmartClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorProjectSmartClause" ):
                listener.enterFindOperatorProjectSmartClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorProjectSmartClause" ):
                listener.exitFindOperatorProjectSmartClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorProjectSmartClause" ):
                return visitor.visitFindOperatorProjectSmartClause(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorProjectSmartClause(self):

        localctx = HqlParser.FindOperatorProjectSmartClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_findOperatorProjectSmartClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1165
            self.match(HqlParser.PROJECTSMART)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorProjectAwayClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Star = None # FindOperatorProjectAwayStarContext
            self.ColumnList = None # FindOperatorProjectAwayColumnListContext

        def PROJECTAWAY_(self):
            return self.getToken(HqlParser.PROJECTAWAY_, 0)

        def findOperatorProjectAwayStar(self):
            return self.getTypedRuleContext(HqlParser.FindOperatorProjectAwayStarContext,0)


        def findOperatorProjectAwayColumnList(self):
            return self.getTypedRuleContext(HqlParser.FindOperatorProjectAwayColumnListContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_findOperatorProjectAwayClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorProjectAwayClause" ):
                listener.enterFindOperatorProjectAwayClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorProjectAwayClause" ):
                listener.exitFindOperatorProjectAwayClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorProjectAwayClause" ):
                return visitor.visitFindOperatorProjectAwayClause(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorProjectAwayClause(self):

        localctx = HqlParser.FindOperatorProjectAwayClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_findOperatorProjectAwayClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.match(HqlParser.PROJECTAWAY_)
            self.state = 1170
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.state = 1168
                localctx.Star = self.findOperatorProjectAwayStar()
                pass
            elif token in [30, 38, 39, 40, 41, 42, 47, 50, 53, 55, 57, 59, 61, 62, 66, 69, 71, 72, 74, 75, 77, 78, 82, 83, 86, 87, 89, 90, 91, 94, 95, 105, 113, 125, 127, 128, 129, 131, 133, 134, 141, 142, 145, 146, 148, 149, 150, 154, 156, 162, 163, 184, 185, 186, 187, 188, 192, 193, 195, 198, 199, 201, 205, 206, 214, 215, 216, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 231, 233, 234, 238, 239, 241, 242, 246, 247, 248, 249, 250, 251, 252, 254, 257, 258, 259, 260, 261, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 289, 321]:
                self.state = 1169
                localctx.ColumnList = self.findOperatorProjectAwayColumnList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorProjectAwayStarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(HqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_findOperatorProjectAwayStar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorProjectAwayStar" ):
                listener.enterFindOperatorProjectAwayStar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorProjectAwayStar" ):
                listener.exitFindOperatorProjectAwayStar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorProjectAwayStar" ):
                return visitor.visitFindOperatorProjectAwayStar(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorProjectAwayStar(self):

        localctx = HqlParser.FindOperatorProjectAwayStarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_findOperatorProjectAwayStar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self.match(HqlParser.ASTERISK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorProjectAwayColumnListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._findOperatorColumnExpression = None # FindOperatorColumnExpressionContext
            self.Columns = list() # of FindOperatorColumnExpressionContexts

        def findOperatorColumnExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.FindOperatorColumnExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.FindOperatorColumnExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_findOperatorProjectAwayColumnList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorProjectAwayColumnList" ):
                listener.enterFindOperatorProjectAwayColumnList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorProjectAwayColumnList" ):
                listener.exitFindOperatorProjectAwayColumnList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorProjectAwayColumnList" ):
                return visitor.visitFindOperatorProjectAwayColumnList(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorProjectAwayColumnList(self):

        localctx = HqlParser.FindOperatorProjectAwayColumnListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_findOperatorProjectAwayColumnList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1174
            localctx._findOperatorColumnExpression = self.findOperatorColumnExpression()
            localctx.Columns.append(localctx._findOperatorColumnExpression)
            self.state = 1179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1175
                self.match(HqlParser.COMMA)
                self.state = 1176
                localctx._findOperatorColumnExpression = self.findOperatorColumnExpression()
                localctx.Columns.append(localctx._findOperatorColumnExpression)
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Entity = None # FindOperatorSourceEntityExpressionContext
            self.WildcardedEntity = None # WildcardedEntityExpressionContext

        def findOperatorSourceEntityExpression(self):
            return self.getTypedRuleContext(HqlParser.FindOperatorSourceEntityExpressionContext,0)


        def wildcardedEntityExpression(self):
            return self.getTypedRuleContext(HqlParser.WildcardedEntityExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_findOperatorSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorSource" ):
                listener.enterFindOperatorSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorSource" ):
                listener.exitFindOperatorSource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorSource" ):
                return visitor.visitFindOperatorSource(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorSource(self):

        localctx = HqlParser.FindOperatorSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_findOperatorSource)
        try:
            self.state = 1184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1182
                localctx.Entity = self.findOperatorSourceEntityExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1183
                localctx.WildcardedEntity = self.wildcardedEntityExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorSourceEntityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Entity = None # EntityNameReferenceContext
            self._asOperator = None # AsOperatorContext
            self.AsOperators = list() # of AsOperatorContexts

        def entityNameReference(self):
            return self.getTypedRuleContext(HqlParser.EntityNameReferenceContext,0)


        def BAR(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.BAR)
            else:
                return self.getToken(HqlParser.BAR, i)

        def asOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.AsOperatorContext)
            else:
                return self.getTypedRuleContext(HqlParser.AsOperatorContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_findOperatorSourceEntityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorSourceEntityExpression" ):
                listener.enterFindOperatorSourceEntityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorSourceEntityExpression" ):
                listener.exitFindOperatorSourceEntityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorSourceEntityExpression" ):
                return visitor.visitFindOperatorSourceEntityExpression(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorSourceEntityExpression(self):

        localctx = HqlParser.FindOperatorSourceEntityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_findOperatorSourceEntityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1186
            localctx.Entity = self.entityNameReference()
            self.state = 1191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 1187
                self.match(HqlParser.BAR)
                self.state = 1188
                localctx._asOperator = self.asOperator()
                localctx.AsOperators.append(localctx._asOperator)
                self.state = 1193
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForkOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORK(self):
            return self.getToken(HqlParser.FORK, 0)

        def forkOperatorFork(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.ForkOperatorForkContext)
            else:
                return self.getTypedRuleContext(HqlParser.ForkOperatorForkContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_forkOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForkOperator" ):
                listener.enterForkOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForkOperator" ):
                listener.exitForkOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForkOperator" ):
                return visitor.visitForkOperator(self)
            else:
                return visitor.visitChildren(self)




    def forkOperator(self):

        localctx = HqlParser.ForkOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_forkOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1194
            self.match(HqlParser.FORK)
            self.state = 1196 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1195
                self.forkOperatorFork()
                self.state = 1198 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 622630623164497920) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 2089687819387691625) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 1790180853492720385) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & 8718987674455048331) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 576460752438689537) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForkOperatorForkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ForkOperatorExpressionNameContext
            self.Expression = None # ForkOperatorExpressionContext

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def forkOperatorExpression(self):
            return self.getTypedRuleContext(HqlParser.ForkOperatorExpressionContext,0)


        def forkOperatorExpressionName(self):
            return self.getTypedRuleContext(HqlParser.ForkOperatorExpressionNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_forkOperatorFork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForkOperatorFork" ):
                listener.enterForkOperatorFork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForkOperatorFork" ):
                listener.exitForkOperatorFork(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForkOperatorFork" ):
                return visitor.visitForkOperatorFork(self)
            else:
                return visitor.visitChildren(self)




    def forkOperatorFork(self):

        localctx = HqlParser.ForkOperatorForkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_forkOperatorFork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 622630621017014272) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 2089687819387691625) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 1790180853492720385) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & 8718987674455048331) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 576460752438689537) != 0):
                self.state = 1200
                localctx.Name = self.forkOperatorExpressionName()


            self.state = 1203
            self.match(HqlParser.OPENPAREN)
            self.state = 1204
            localctx.Expression = self.forkOperatorExpression()
            self.state = 1205
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForkOperatorExpressionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_forkOperatorExpressionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForkOperatorExpressionName" ):
                listener.enterForkOperatorExpressionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForkOperatorExpressionName" ):
                listener.exitForkOperatorExpressionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForkOperatorExpressionName" ):
                return visitor.visitForkOperatorExpressionName(self)
            else:
                return visitor.visitChildren(self)




    def forkOperatorExpressionName(self):

        localctx = HqlParser.ForkOperatorExpressionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_forkOperatorExpressionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 1208
            self.match(HqlParser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForkOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # ForkPipeOperatorContext
            self._forkOperatorPipedOperator = None # ForkOperatorPipedOperatorContext
            self.PipedOperators = list() # of ForkOperatorPipedOperatorContexts

        def forkPipeOperator(self):
            return self.getTypedRuleContext(HqlParser.ForkPipeOperatorContext,0)


        def forkOperatorPipedOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.ForkOperatorPipedOperatorContext)
            else:
                return self.getTypedRuleContext(HqlParser.ForkOperatorPipedOperatorContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_forkOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForkOperatorExpression" ):
                listener.enterForkOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForkOperatorExpression" ):
                listener.exitForkOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForkOperatorExpression" ):
                return visitor.visitForkOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def forkOperatorExpression(self):

        localctx = HqlParser.ForkOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_forkOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210
            localctx.Operator = self.forkPipeOperator()
            self.state = 1214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 1211
                localctx._forkOperatorPipedOperator = self.forkOperatorPipedOperator()
                localctx.PipedOperators.append(localctx._forkOperatorPipedOperator)
                self.state = 1216
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForkOperatorPipedOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # ForkPipeOperatorContext

        def BAR(self):
            return self.getToken(HqlParser.BAR, 0)

        def forkPipeOperator(self):
            return self.getTypedRuleContext(HqlParser.ForkPipeOperatorContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_forkOperatorPipedOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForkOperatorPipedOperator" ):
                listener.enterForkOperatorPipedOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForkOperatorPipedOperator" ):
                listener.exitForkOperatorPipedOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForkOperatorPipedOperator" ):
                return visitor.visitForkOperatorPipedOperator(self)
            else:
                return visitor.visitChildren(self)




    def forkOperatorPipedOperator(self):

        localctx = HqlParser.ForkOperatorPipedOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_forkOperatorPipedOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self.match(HqlParser.BAR)
            self.state = 1218
            localctx.Operator = self.forkPipeOperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetSchemaOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GETSCHEMA(self):
            return self.getToken(HqlParser.GETSCHEMA, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_getSchemaOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetSchemaOperator" ):
                listener.enterGetSchemaOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetSchemaOperator" ):
                listener.exitGetSchemaOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetSchemaOperator" ):
                return visitor.visitGetSchemaOperator(self)
            else:
                return visitor.visitChildren(self)




    def getSchemaOperator(self):

        localctx = HqlParser.GetSchemaOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_getSchemaOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.match(HqlParser.GETSCHEMA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMarkComponentsOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parametems = list() # of RelaxedQueryOperatorParameterContexts

        def GRAPHMARKCOMPONENTS(self):
            return self.getToken(HqlParser.GRAPHMARKCOMPONENTS, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_graphMarkComponentsOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMarkComponentsOperator" ):
                listener.enterGraphMarkComponentsOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMarkComponentsOperator" ):
                listener.exitGraphMarkComponentsOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMarkComponentsOperator" ):
                return visitor.visitGraphMarkComponentsOperator(self)
            else:
                return visitor.visitChildren(self)




    def graphMarkComponentsOperator(self):

        localctx = HqlParser.GraphMarkComponentsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_graphMarkComponentsOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1222
            self.match(HqlParser.GRAPHMARKCOMPONENTS)
            self.state = 1226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223372019670515679) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 36028797018963981) != 0):
                self.state = 1223
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parametems.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1228
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self._graphMatchPattern = None # GraphMatchPatternContext
            self.Patterns = list() # of GraphMatchPatternContexts
            self.WhereClause = None # GraphMatchWhereClauseContext
            self.ProjectClause = None # GraphMatchProjectClauseContext

        def GRAPHMATCH(self):
            return self.getToken(HqlParser.GRAPHMATCH, 0)

        def graphMatchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.GraphMatchPatternContext)
            else:
                return self.getTypedRuleContext(HqlParser.GraphMatchPatternContext,i)


        def COMMA(self):
            return self.getToken(HqlParser.COMMA, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def graphMatchWhereClause(self):
            return self.getTypedRuleContext(HqlParser.GraphMatchWhereClauseContext,0)


        def graphMatchProjectClause(self):
            return self.getTypedRuleContext(HqlParser.GraphMatchProjectClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_graphMatchOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchOperator" ):
                listener.enterGraphMatchOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchOperator" ):
                listener.exitGraphMatchOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMatchOperator" ):
                return visitor.visitGraphMatchOperator(self)
            else:
                return visitor.visitChildren(self)




    def graphMatchOperator(self):

        localctx = HqlParser.GraphMatchOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_graphMatchOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self.match(HqlParser.GRAPHMATCH)
            self.state = 1233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223372019670515679) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 36028797018963981) != 0):
                self.state = 1230
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1235
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1236
            localctx._graphMatchPattern = self.graphMatchPattern()
            localctx.Patterns.append(localctx._graphMatchPattern)

            self.state = 1237
            self.match(HqlParser.COMMA)
            self.state = 1238
            localctx._graphMatchPattern = self.graphMatchPattern()
            localctx.Patterns.append(localctx._graphMatchPattern)
            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1240
                localctx.WhereClause = self.graphMatchWhereClause()


            self.state = 1244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 1243
                localctx.ProjectClause = self.graphMatchProjectClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Node = None # GraphMatchPatternNodeContext
            self.UnnamedEdge = None # GraphMatchPatternUnnamedEdgeContext
            self.NamedEdge = None # GraphMatchPatternNamedEdgeContext

        def graphMatchPatternNode(self):
            return self.getTypedRuleContext(HqlParser.GraphMatchPatternNodeContext,0)


        def graphMatchPatternUnnamedEdge(self):
            return self.getTypedRuleContext(HqlParser.GraphMatchPatternUnnamedEdgeContext,0)


        def graphMatchPatternNamedEdge(self):
            return self.getTypedRuleContext(HqlParser.GraphMatchPatternNamedEdgeContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_graphMatchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchPattern" ):
                listener.enterGraphMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchPattern" ):
                listener.exitGraphMatchPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMatchPattern" ):
                return visitor.visitGraphMatchPattern(self)
            else:
                return visitor.visitChildren(self)




    def graphMatchPattern(self):

        localctx = HqlParser.GraphMatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_graphMatchPattern)
        try:
            self.state = 1249
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [31]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1246
                localctx.Node = self.graphMatchPatternNode()
                pass
            elif token in [12, 13, 25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1247
                localctx.UnnamedEdge = self.graphMatchPatternUnnamedEdge()
                pass
            elif token in [14, 26]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1248
                localctx.NamedEdge = self.graphMatchPatternNamedEdge()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchPatternNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_graphMatchPatternNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchPatternNode" ):
                listener.enterGraphMatchPatternNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchPatternNode" ):
                listener.exitGraphMatchPatternNode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMatchPatternNode" ):
                return visitor.visitGraphMatchPatternNode(self)
            else:
                return visitor.visitChildren(self)




    def graphMatchPatternNode(self):

        localctx = HqlParser.GraphMatchPatternNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_graphMatchPatternNode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            self.match(HqlParser.OPENPAREN)
            self.state = 1252
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 1253
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchPatternUnnamedEdgeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Direction = None # Token

        def DASHDASH_GREATERTHAN(self):
            return self.getToken(HqlParser.DASHDASH_GREATERTHAN, 0)

        def LESSTHAN_DASHDASH(self):
            return self.getToken(HqlParser.LESSTHAN_DASHDASH, 0)

        def DASHDASH(self):
            return self.getToken(HqlParser.DASHDASH, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_graphMatchPatternUnnamedEdge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchPatternUnnamedEdge" ):
                listener.enterGraphMatchPatternUnnamedEdge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchPatternUnnamedEdge" ):
                listener.exitGraphMatchPatternUnnamedEdge(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMatchPatternUnnamedEdge" ):
                return visitor.visitGraphMatchPatternUnnamedEdge(self)
            else:
                return visitor.visitChildren(self)




    def graphMatchPatternUnnamedEdge(self):

        localctx = HqlParser.GraphMatchPatternUnnamedEdgeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_graphMatchPatternUnnamedEdge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            localctx.Direction = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 33566720) != 0)):
                localctx.Direction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchPatternNamedEdgeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpenBracket = None # Token
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext
            self.Range = None # GraphMatchPatternRangeContext
            self.CloseBracket = None # Token

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def DASH_OPENBRACKET(self):
            return self.getToken(HqlParser.DASH_OPENBRACKET, 0)

        def LESSTHAN_DASH_OPENBRACKET(self):
            return self.getToken(HqlParser.LESSTHAN_DASH_OPENBRACKET, 0)

        def CLOSEBRACKET_DASH_GREATERTHAN(self):
            return self.getToken(HqlParser.CLOSEBRACKET_DASH_GREATERTHAN, 0)

        def CLOSEBRACKET_DASH(self):
            return self.getToken(HqlParser.CLOSEBRACKET_DASH, 0)

        def graphMatchPatternRange(self):
            return self.getTypedRuleContext(HqlParser.GraphMatchPatternRangeContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_graphMatchPatternNamedEdge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchPatternNamedEdge" ):
                listener.enterGraphMatchPatternNamedEdge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchPatternNamedEdge" ):
                listener.exitGraphMatchPatternNamedEdge(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMatchPatternNamedEdge" ):
                return visitor.visitGraphMatchPatternNamedEdge(self)
            else:
                return visitor.visitChildren(self)




    def graphMatchPatternNamedEdge(self):

        localctx = HqlParser.GraphMatchPatternNamedEdgeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_graphMatchPatternNamedEdge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1257
            localctx.OpenBracket = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==14 or _la==26):
                localctx.OpenBracket = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1258
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 1260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 1259
                localctx.Range = self.graphMatchPatternRange()


            self.state = 1262
            localctx.CloseBracket = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==6 or _la==7):
                localctx.CloseBracket = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchPatternRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LowerBound = None # InvocationExpressionContext
            self.UpperBound = None # InvocationExpressionContext

        def ASTERISK(self):
            return self.getToken(HqlParser.ASTERISK, 0)

        def DOTDOT(self):
            return self.getToken(HqlParser.DOTDOT, 0)

        def invocationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.InvocationExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.InvocationExpressionContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_graphMatchPatternRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchPatternRange" ):
                listener.enterGraphMatchPatternRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchPatternRange" ):
                listener.exitGraphMatchPatternRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMatchPatternRange" ):
                return visitor.visitGraphMatchPatternRange(self)
            else:
                return visitor.visitChildren(self)




    def graphMatchPatternRange(self):

        localctx = HqlParser.GraphMatchPatternRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_graphMatchPatternRange)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            self.match(HqlParser.ASTERISK)
            self.state = 1265
            localctx.LowerBound = self.invocationExpression()
            self.state = 1266
            self.match(HqlParser.DOTDOT)
            self.state = 1267
            localctx.UpperBound = self.invocationExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchWhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ExpressionContext

        def WHERE(self):
            return self.getToken(HqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(HqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_graphMatchWhereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchWhereClause" ):
                listener.enterGraphMatchWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchWhereClause" ):
                listener.exitGraphMatchWhereClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMatchWhereClause" ):
                return visitor.visitGraphMatchWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def graphMatchWhereClause(self):

        localctx = HqlParser.GraphMatchWhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_graphMatchWhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1269
            self.match(HqlParser.WHERE)
            self.state = 1270
            localctx.Expression = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchProjectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def PROJECT(self):
            return self.getToken(HqlParser.PROJECT, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_graphMatchProjectClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchProjectClause" ):
                listener.enterGraphMatchProjectClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchProjectClause" ):
                listener.exitGraphMatchProjectClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMatchProjectClause" ):
                return visitor.visitGraphMatchProjectClause(self)
            else:
                return visitor.visitChildren(self)




    def graphMatchProjectClause(self):

        localctx = HqlParser.GraphMatchProjectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_graphMatchProjectClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1272
            self.match(HqlParser.PROJECT)
            self.state = 1273
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 1278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1274
                self.match(HqlParser.COMMA)
                self.state = 1275
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMergeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Graph = None # InvocationExpressionContext
            self.OnClause = None # JoinOperatorOnClauseContext

        def GRAPHMERGE(self):
            return self.getToken(HqlParser.GRAPHMERGE, 0)

        def invocationExpression(self):
            return self.getTypedRuleContext(HqlParser.InvocationExpressionContext,0)


        def joinOperatorOnClause(self):
            return self.getTypedRuleContext(HqlParser.JoinOperatorOnClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_graphMergeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMergeOperator" ):
                listener.enterGraphMergeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMergeOperator" ):
                listener.exitGraphMergeOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMergeOperator" ):
                return visitor.visitGraphMergeOperator(self)
            else:
                return visitor.visitChildren(self)




    def graphMergeOperator(self):

        localctx = HqlParser.GraphMergeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_graphMergeOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.match(HqlParser.GRAPHMERGE)
            self.state = 1282
            localctx.Graph = self.invocationExpression()
            self.state = 1284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==187:
                self.state = 1283
                localctx.OnClause = self.joinOperatorOnClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphToTableOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._graphToTableOutput = None # GraphToTableOutputContext
            self.Outputs = list() # of GraphToTableOutputContexts

        def GRAPHTOTABLE(self):
            return self.getToken(HqlParser.GRAPHTOTABLE, 0)

        def graphToTableOutput(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.GraphToTableOutputContext)
            else:
                return self.getTypedRuleContext(HqlParser.GraphToTableOutputContext,i)


        def COMMA(self):
            return self.getToken(HqlParser.COMMA, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_graphToTableOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphToTableOperator" ):
                listener.enterGraphToTableOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphToTableOperator" ):
                listener.exitGraphToTableOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphToTableOperator" ):
                return visitor.visitGraphToTableOperator(self)
            else:
                return visitor.visitChildren(self)




    def graphToTableOperator(self):

        localctx = HqlParser.GraphToTableOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_graphToTableOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1286
            self.match(HqlParser.GRAPHTOTABLE)
            self.state = 1287
            localctx._graphToTableOutput = self.graphToTableOutput()
            localctx.Outputs.append(localctx._graphToTableOutput)

            self.state = 1288
            self.match(HqlParser.COMMA)
            self.state = 1289
            localctx._graphToTableOutput = self.graphToTableOutput()
            localctx.Outputs.append(localctx._graphToTableOutput)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphToTableOutputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self.AsClause = None # GraphToTableAsClauseContext
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts

        def NODES(self):
            return self.getToken(HqlParser.NODES, 0)

        def EDGES(self):
            return self.getToken(HqlParser.EDGES, 0)

        def graphToTableAsClause(self):
            return self.getTypedRuleContext(HqlParser.GraphToTableAsClauseContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_graphToTableOutput

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphToTableOutput" ):
                listener.enterGraphToTableOutput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphToTableOutput" ):
                listener.exitGraphToTableOutput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphToTableOutput" ):
                return visitor.visitGraphToTableOutput(self)
            else:
                return visitor.visitChildren(self)




    def graphToTableOutput(self):

        localctx = HqlParser.GraphToTableOutputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_graphToTableOutput)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==78 or _la==162):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 1292
                localctx.AsClause = self.graphToTableAsClause()


            self.state = 1298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223372019670515679) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 36028797018963981) != 0):
                self.state = 1295
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1300
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphToTableAsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def AS(self):
            return self.getToken(HqlParser.AS, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_graphToTableAsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphToTableAsClause" ):
                listener.enterGraphToTableAsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphToTableAsClause" ):
                listener.exitGraphToTableAsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphToTableAsClause" ):
                return visitor.visitGraphToTableAsClause(self)
            else:
                return visitor.visitChildren(self)




    def graphToTableAsClause(self):

        localctx = HqlParser.GraphToTableAsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_graphToTableAsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1301
            self.match(HqlParser.AS)
            self.state = 1302
            localctx.Name = self.identifierOrKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphShortestPathsOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self._graphMatchPattern = None # GraphMatchPatternContext
            self.Patterns = list() # of GraphMatchPatternContexts
            self.WhereClause = None # GraphMatchWhereClauseContext
            self.ProjectClause = None # GraphMatchProjectClauseContext

        def GRAPHSHORTESTPATHS(self):
            return self.getToken(HqlParser.GRAPHSHORTESTPATHS, 0)

        def graphMatchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.GraphMatchPatternContext)
            else:
                return self.getTypedRuleContext(HqlParser.GraphMatchPatternContext,i)


        def COMMA(self):
            return self.getToken(HqlParser.COMMA, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def graphMatchWhereClause(self):
            return self.getTypedRuleContext(HqlParser.GraphMatchWhereClauseContext,0)


        def graphMatchProjectClause(self):
            return self.getTypedRuleContext(HqlParser.GraphMatchProjectClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_graphShortestPathsOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphShortestPathsOperator" ):
                listener.enterGraphShortestPathsOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphShortestPathsOperator" ):
                listener.exitGraphShortestPathsOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphShortestPathsOperator" ):
                return visitor.visitGraphShortestPathsOperator(self)
            else:
                return visitor.visitChildren(self)




    def graphShortestPathsOperator(self):

        localctx = HqlParser.GraphShortestPathsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_graphShortestPathsOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1304
            self.match(HqlParser.GRAPHSHORTESTPATHS)
            self.state = 1308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223372019670515679) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 36028797018963981) != 0):
                self.state = 1305
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1310
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1311
            localctx._graphMatchPattern = self.graphMatchPattern()
            localctx.Patterns.append(localctx._graphMatchPattern)

            self.state = 1312
            self.match(HqlParser.COMMA)
            self.state = 1313
            localctx._graphMatchPattern = self.graphMatchPattern()
            localctx.Patterns.append(localctx._graphMatchPattern)
            self.state = 1316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1315
                localctx.WhereClause = self.graphMatchWhereClause()


            self.state = 1319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 1318
                localctx.ProjectClause = self.graphMatchProjectClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InvokeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FunctionCall = None # DotCompositeFunctionCallExpressionContext

        def INVOKE(self):
            return self.getToken(HqlParser.INVOKE, 0)

        def dotCompositeFunctionCallExpression(self):
            return self.getTypedRuleContext(HqlParser.DotCompositeFunctionCallExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_invokeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvokeOperator" ):
                listener.enterInvokeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvokeOperator" ):
                listener.exitInvokeOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvokeOperator" ):
                return visitor.visitInvokeOperator(self)
            else:
                return visitor.visitChildren(self)




    def invokeOperator(self):

        localctx = HqlParser.InvokeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_invokeOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.match(HqlParser.INVOKE)
            self.state = 1322
            localctx.FunctionCall = self.dotCompositeFunctionCallExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Table = None # UnnamedExpressionContext
            self.OnClause = None # JoinOperatorOnClauseContext
            self.WhereClause = None # JoinOperatorWhereClauseContext

        def JOIN(self):
            return self.getToken(HqlParser.JOIN, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def joinOperatorOnClause(self):
            return self.getTypedRuleContext(HqlParser.JoinOperatorOnClauseContext,0)


        def joinOperatorWhereClause(self):
            return self.getTypedRuleContext(HqlParser.JoinOperatorWhereClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_joinOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinOperator" ):
                listener.enterJoinOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinOperator" ):
                listener.exitJoinOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOperator" ):
                return visitor.visitJoinOperator(self)
            else:
                return visitor.visitChildren(self)




    def joinOperator(self):

        localctx = HqlParser.JoinOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_joinOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1324
            self.match(HqlParser.JOIN)
            self.state = 1328
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1325
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1330
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

            self.state = 1331
            localctx.Table = self.unnamedExpression()
            self.state = 1334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [187]:
                self.state = 1332
                localctx.OnClause = self.joinOperatorOnClause()
                pass
            elif token in [261]:
                self.state = 1333
                localctx.WhereClause = self.joinOperatorWhereClause()
                pass
            elif token in [-1, 3, 4, 8, 34, 207]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOperatorOnClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unnamedExpression = None # UnnamedExpressionContext
            self.Expressions = list() # of UnnamedExpressionContexts

        def ON(self):
            return self.getToken(HqlParser.ON, 0)

        def unnamedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.UnnamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_joinOperatorOnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinOperatorOnClause" ):
                listener.enterJoinOperatorOnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinOperatorOnClause" ):
                listener.exitJoinOperatorOnClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOperatorOnClause" ):
                return visitor.visitJoinOperatorOnClause(self)
            else:
                return visitor.visitChildren(self)




    def joinOperatorOnClause(self):

        localctx = HqlParser.JoinOperatorOnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_joinOperatorOnClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1336
            self.match(HqlParser.ON)
            self.state = 1345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 622630631754434562) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -3458483037203454253) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -8250594491267141615) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 3171135605373407585) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -4620693212279873489) != 0) or _la==321:
                self.state = 1337
                localctx._unnamedExpression = self.unnamedExpression()
                localctx.Expressions.append(localctx._unnamedExpression)
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 1338
                    self.match(HqlParser.COMMA)
                    self.state = 1339
                    localctx._unnamedExpression = self.unnamedExpression()
                    localctx.Expressions.append(localctx._unnamedExpression)
                    self.state = 1344
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOperatorWhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Predicate = None # UnnamedExpressionContext

        def WHERE(self):
            return self.getToken(HqlParser.WHERE, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_joinOperatorWhereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinOperatorWhereClause" ):
                listener.enterJoinOperatorWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinOperatorWhereClause" ):
                listener.exitJoinOperatorWhereClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOperatorWhereClause" ):
                return visitor.visitJoinOperatorWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def joinOperatorWhereClause(self):

        localctx = HqlParser.JoinOperatorWhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_joinOperatorWhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1347
            self.match(HqlParser.WHERE)
            self.state = 1348
            localctx.Predicate = self.unnamedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LookupOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Table = None # UnnamedExpressionContext
            self.OnClause = None # JoinOperatorOnClauseContext

        def LOOKUP(self):
            return self.getToken(HqlParser.LOOKUP, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def joinOperatorOnClause(self):
            return self.getTypedRuleContext(HqlParser.JoinOperatorOnClauseContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_lookupOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLookupOperator" ):
                listener.enterLookupOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLookupOperator" ):
                listener.exitLookupOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLookupOperator" ):
                return visitor.visitLookupOperator(self)
            else:
                return visitor.visitChildren(self)




    def lookupOperator(self):

        localctx = HqlParser.LookupOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_lookupOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1350
            self.match(HqlParser.LOOKUP)
            self.state = 1354
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1351
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1356
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

            self.state = 1357
            localctx.Table = self.unnamedExpression()
            self.state = 1358
            localctx.OnClause = self.joinOperatorOnClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroExpandOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.EntityGroup = None # MacroExpandEntityGroupContext
            self.ScopeName = None # IdentifierOrKeywordOrEscapedNameContext
            self._statement = None # StatementContext
            self.Statements = list() # of StatementContexts

        def MACROEXPAND(self):
            return self.getToken(HqlParser.MACROEXPAND, 0)

        def AS(self):
            return self.getToken(HqlParser.AS, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def macroExpandEntityGroup(self):
            return self.getTypedRuleContext(HqlParser.MacroExpandEntityGroupContext,0)


        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.StatementContext)
            else:
                return self.getTypedRuleContext(HqlParser.StatementContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.SEMICOLON)
            else:
                return self.getToken(HqlParser.SEMICOLON, i)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_macroExpandOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroExpandOperator" ):
                listener.enterMacroExpandOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroExpandOperator" ):
                listener.exitMacroExpandOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroExpandOperator" ):
                return visitor.visitMacroExpandOperator(self)
            else:
                return visitor.visitChildren(self)




    def macroExpandOperator(self):

        localctx = HqlParser.MacroExpandOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_macroExpandOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1360
            self.match(HqlParser.MACROEXPAND)
            self.state = 1364
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1361
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1366
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

            self.state = 1367
            localctx.EntityGroup = self.macroExpandEntityGroup()
            self.state = 1368
            self.match(HqlParser.AS)
            self.state = 1369
            localctx.ScopeName = self.identifierOrKeywordOrEscapedName()
            self.state = 1370
            self.match(HqlParser.OPENPAREN)
            self.state = 1371
            localctx._statement = self.statement()
            localctx.Statements.append(localctx._statement)
            self.state = 1376
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1372
                    self.match(HqlParser.SEMICOLON)
                    self.state = 1373
                    localctx._statement = self.statement()
                    localctx.Statements.append(localctx._statement) 
                self.state = 1378
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

            self.state = 1380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 1379
                self.match(HqlParser.SEMICOLON)


            self.state = 1382
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroExpandEntityGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.EntityGroup = None # EntityGroupExpressionContext
            self.Name = None # SimpleNameReferenceContext
            self.Entity = None # EntityExpressionContext

        def entityGroupExpression(self):
            return self.getTypedRuleContext(HqlParser.EntityGroupExpressionContext,0)


        def simpleNameReference(self):
            return self.getTypedRuleContext(HqlParser.SimpleNameReferenceContext,0)


        def entityExpression(self):
            return self.getTypedRuleContext(HqlParser.EntityExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_macroExpandEntityGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroExpandEntityGroup" ):
                listener.enterMacroExpandEntityGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroExpandEntityGroup" ):
                listener.exitMacroExpandEntityGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroExpandEntityGroup" ):
                return visitor.visitMacroExpandEntityGroup(self)
            else:
                return visitor.visitChildren(self)




    def macroExpandEntityGroup(self):

        localctx = HqlParser.MacroExpandEntityGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_macroExpandEntityGroup)
        try:
            self.state = 1387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1384
                localctx.EntityGroup = self.entityGroupExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1385
                localctx.Name = self.simpleNameReference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1386
                localctx.Entity = self.entityExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityGroupExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unnamedExpression = None # UnnamedExpressionContext
            self.Expressions = list() # of UnnamedExpressionContexts

        def ENTITYGROUP(self):
            return self.getToken(HqlParser.ENTITYGROUP, 0)

        def OPENBRACKET(self):
            return self.getToken(HqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(HqlParser.CLOSEBRACKET, 0)

        def unnamedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.UnnamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_entityGroupExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityGroupExpression" ):
                listener.enterEntityGroupExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityGroupExpression" ):
                listener.exitEntityGroupExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntityGroupExpression" ):
                return visitor.visitEntityGroupExpression(self)
            else:
                return visitor.visitChildren(self)




    def entityGroupExpression(self):

        localctx = HqlParser.EntityGroupExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_entityGroupExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            self.match(HqlParser.ENTITYGROUP)
            self.state = 1390
            self.match(HqlParser.OPENBRACKET)
            self.state = 1391
            localctx._unnamedExpression = self.unnamedExpression()
            localctx.Expressions.append(localctx._unnamedExpression)
            self.state = 1396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1392
                self.match(HqlParser.COMMA)
                self.state = 1393
                localctx._unnamedExpression = self.unnamedExpression()
                localctx.Expressions.append(localctx._unnamedExpression)
                self.state = 1398
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1399
            self.match(HqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeGraphOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.SourceColumn = None # SimpleNameReferenceContext
            self.Direction = None # Token
            self.TargetColumn = None # SimpleNameReferenceContext
            self.IdClause = None # MakeGraphIdClauseContext
            self.TablesAndKeysClause = None # MakeGraphTablesAndKeysClauseContext
            self.PartitionedByClause = None # MakeGraphPartitionedByClauseContext

        def MAKEGRAPH(self):
            return self.getToken(HqlParser.MAKEGRAPH, 0)

        def simpleNameReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.SimpleNameReferenceContext)
            else:
                return self.getTypedRuleContext(HqlParser.SimpleNameReferenceContext,i)


        def DASHDASH_GREATERTHAN(self):
            return self.getToken(HqlParser.DASHDASH_GREATERTHAN, 0)

        def DASHDASH(self):
            return self.getToken(HqlParser.DASHDASH, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def makeGraphIdClause(self):
            return self.getTypedRuleContext(HqlParser.MakeGraphIdClauseContext,0)


        def makeGraphTablesAndKeysClause(self):
            return self.getTypedRuleContext(HqlParser.MakeGraphTablesAndKeysClauseContext,0)


        def makeGraphPartitionedByClause(self):
            return self.getTypedRuleContext(HqlParser.MakeGraphPartitionedByClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_makeGraphOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeGraphOperator" ):
                listener.enterMakeGraphOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeGraphOperator" ):
                listener.exitMakeGraphOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeGraphOperator" ):
                return visitor.visitMakeGraphOperator(self)
            else:
                return visitor.visitChildren(self)




    def makeGraphOperator(self):

        localctx = HqlParser.MakeGraphOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_makeGraphOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.match(HqlParser.MAKEGRAPH)
            self.state = 1405
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1402
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1407
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

            self.state = 1408
            localctx.SourceColumn = self.simpleNameReference()
            self.state = 1409
            localctx.Direction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==12 or _la==13):
                localctx.Direction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1410
            localctx.TargetColumn = self.simpleNameReference()
            self.state = 1413
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [267]:
                self.state = 1411
                localctx.IdClause = self.makeGraphIdClause()
                pass
            elif token in [262]:
                self.state = 1412
                localctx.TablesAndKeysClause = self.makeGraphTablesAndKeysClause()
                pass
            elif token in [-1, 3, 4, 8, 34, 200, 207]:
                pass
            else:
                pass
            self.state = 1416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==200:
                self.state = 1415
                localctx.PartitionedByClause = self.makeGraphPartitionedByClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeGraphIdClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def WITH_NODE_ID(self):
            return self.getToken(HqlParser.WITH_NODE_ID, 0)

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_makeGraphIdClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeGraphIdClause" ):
                listener.enterMakeGraphIdClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeGraphIdClause" ):
                listener.exitMakeGraphIdClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeGraphIdClause" ):
                return visitor.visitMakeGraphIdClause(self)
            else:
                return visitor.visitChildren(self)




    def makeGraphIdClause(self):

        localctx = HqlParser.MakeGraphIdClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_makeGraphIdClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1418
            self.match(HqlParser.WITH_NODE_ID)
            self.state = 1419
            self.match(HqlParser.EQUAL)
            self.state = 1420
            localctx.Name = self.identifierOrKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeGraphTablesAndKeysClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Table = None # InvocationExpressionContext
            self.Column = None # SimpleNameReferenceContext

        def WITH(self):
            return self.getToken(HqlParser.WITH, 0)

        def ON(self):
            return self.getToken(HqlParser.ON, 0)

        def invocationExpression(self):
            return self.getTypedRuleContext(HqlParser.InvocationExpressionContext,0)


        def simpleNameReference(self):
            return self.getTypedRuleContext(HqlParser.SimpleNameReferenceContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_makeGraphTablesAndKeysClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeGraphTablesAndKeysClause" ):
                listener.enterMakeGraphTablesAndKeysClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeGraphTablesAndKeysClause" ):
                listener.exitMakeGraphTablesAndKeysClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeGraphTablesAndKeysClause" ):
                return visitor.visitMakeGraphTablesAndKeysClause(self)
            else:
                return visitor.visitChildren(self)




    def makeGraphTablesAndKeysClause(self):

        localctx = HqlParser.MakeGraphTablesAndKeysClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_makeGraphTablesAndKeysClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            self.match(HqlParser.WITH)
            self.state = 1423
            localctx.Table = self.invocationExpression()
            self.state = 1424
            self.match(HqlParser.ON)
            self.state = 1425
            localctx.Column = self.simpleNameReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeGraphPartitionedByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Entity = None # EntityPathOrElementExpressionContext
            self.SubQuery = None # ContextualSubExpressionContext

        def PARTITIONEDBY(self):
            return self.getToken(HqlParser.PARTITIONEDBY, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def entityPathOrElementExpression(self):
            return self.getTypedRuleContext(HqlParser.EntityPathOrElementExpressionContext,0)


        def contextualSubExpression(self):
            return self.getTypedRuleContext(HqlParser.ContextualSubExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_makeGraphPartitionedByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeGraphPartitionedByClause" ):
                listener.enterMakeGraphPartitionedByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeGraphPartitionedByClause" ):
                listener.exitMakeGraphPartitionedByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeGraphPartitionedByClause" ):
                return visitor.visitMakeGraphPartitionedByClause(self)
            else:
                return visitor.visitChildren(self)




    def makeGraphPartitionedByClause(self):

        localctx = HqlParser.MakeGraphPartitionedByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_makeGraphPartitionedByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1427
            self.match(HqlParser.PARTITIONEDBY)
            self.state = 1428
            localctx.Entity = self.entityPathOrElementExpression()
            self.state = 1429
            self.match(HqlParser.OPENPAREN)
            self.state = 1430
            localctx.SubQuery = self.contextualSubExpression()
            self.state = 1431
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self._makeSeriesOperatorAggregation = None # MakeSeriesOperatorAggregationContext
            self.Aggregations = list() # of MakeSeriesOperatorAggregationContexts
            self.OnClause = None # MakeSeriesOperatorOnClauseContext
            self.InRangeClause = None # MakeSeriesOperatorInRangeClauseContext
            self.FromToStepClause = None # MakeSeriesOperatorFromToStepClauseContext
            self.ByClause = None # MakeSeriesOperatorByClauseContext

        def MAKESERIES(self):
            return self.getToken(HqlParser.MAKESERIES, 0)

        def makeSeriesOperatorAggregation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.MakeSeriesOperatorAggregationContext)
            else:
                return self.getTypedRuleContext(HqlParser.MakeSeriesOperatorAggregationContext,i)


        def makeSeriesOperatorOnClause(self):
            return self.getTypedRuleContext(HqlParser.MakeSeriesOperatorOnClauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def makeSeriesOperatorInRangeClause(self):
            return self.getTypedRuleContext(HqlParser.MakeSeriesOperatorInRangeClauseContext,0)


        def makeSeriesOperatorFromToStepClause(self):
            return self.getTypedRuleContext(HqlParser.MakeSeriesOperatorFromToStepClauseContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def makeSeriesOperatorByClause(self):
            return self.getTypedRuleContext(HqlParser.MakeSeriesOperatorByClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_makeSeriesOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperator" ):
                listener.enterMakeSeriesOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperator" ):
                listener.exitMakeSeriesOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeSeriesOperator" ):
                return visitor.visitMakeSeriesOperator(self)
            else:
                return visitor.visitChildren(self)




    def makeSeriesOperator(self):

        localctx = HqlParser.MakeSeriesOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_makeSeriesOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self.match(HqlParser.MAKESERIES)
            self.state = 1437
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1434
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1439
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

            self.state = 1440
            localctx._makeSeriesOperatorAggregation = self.makeSeriesOperatorAggregation()
            localctx.Aggregations.append(localctx._makeSeriesOperatorAggregation)
            self.state = 1445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1441
                self.match(HqlParser.COMMA)
                self.state = 1442
                localctx._makeSeriesOperatorAggregation = self.makeSeriesOperatorAggregation()
                localctx.Aggregations.append(localctx._makeSeriesOperatorAggregation)
                self.state = 1447
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1448
            localctx.OnClause = self.makeSeriesOperatorOnClause()
            self.state = 1451
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131]:
                self.state = 1449
                localctx.InRangeClause = self.makeSeriesOperatorInRangeClause()
                pass
            elif token in [95, 238, 247]:
                self.state = 1450
                localctx.FromToStepClause = self.makeSeriesOperatorFromToStepClause()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 1453
                localctx.ByClause = self.makeSeriesOperatorByClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorOnClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext

        def ON(self):
            return self.getToken(HqlParser.ON, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(HqlParser.NamedExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_makeSeriesOperatorOnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperatorOnClause" ):
                listener.enterMakeSeriesOperatorOnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperatorOnClause" ):
                listener.exitMakeSeriesOperatorOnClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeSeriesOperatorOnClause" ):
                return visitor.visitMakeSeriesOperatorOnClause(self)
            else:
                return visitor.visitChildren(self)




    def makeSeriesOperatorOnClause(self):

        localctx = HqlParser.MakeSeriesOperatorOnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_makeSeriesOperatorOnClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1456
            self.match(HqlParser.ON)
            self.state = 1457
            localctx.Expression = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorAggregationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext
            self.Default = None # MakeSeriesOperatorExpressionDefaultClauseContext

        def namedExpression(self):
            return self.getTypedRuleContext(HqlParser.NamedExpressionContext,0)


        def makeSeriesOperatorExpressionDefaultClause(self):
            return self.getTypedRuleContext(HqlParser.MakeSeriesOperatorExpressionDefaultClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_makeSeriesOperatorAggregation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperatorAggregation" ):
                listener.enterMakeSeriesOperatorAggregation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperatorAggregation" ):
                listener.exitMakeSeriesOperatorAggregation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeSeriesOperatorAggregation" ):
                return visitor.visitMakeSeriesOperatorAggregation(self)
            else:
                return visitor.visitChildren(self)




    def makeSeriesOperatorAggregation(self):

        localctx = HqlParser.MakeSeriesOperatorAggregationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_makeSeriesOperatorAggregation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            localctx.Expression = self.namedExpression()
            self.state = 1461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 1460
                localctx.Default = self.makeSeriesOperatorExpressionDefaultClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorExpressionDefaultClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Value = None # NamedExpressionContext

        def DEFAULT(self):
            return self.getToken(HqlParser.DEFAULT, 0)

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(HqlParser.NamedExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_makeSeriesOperatorExpressionDefaultClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperatorExpressionDefaultClause" ):
                listener.enterMakeSeriesOperatorExpressionDefaultClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperatorExpressionDefaultClause" ):
                listener.exitMakeSeriesOperatorExpressionDefaultClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeSeriesOperatorExpressionDefaultClause" ):
                return visitor.visitMakeSeriesOperatorExpressionDefaultClause(self)
            else:
                return visitor.visitChildren(self)




    def makeSeriesOperatorExpressionDefaultClause(self):

        localctx = HqlParser.MakeSeriesOperatorExpressionDefaultClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_makeSeriesOperatorExpressionDefaultClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1463
            self.match(HqlParser.DEFAULT)
            self.state = 1464
            self.match(HqlParser.EQUAL)
            self.state = 1465
            localctx.Value = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorInRangeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FromExpression = None # NamedExpressionContext
            self.ToComma = None # Token
            self.ToExpression = None # NamedExpressionContext
            self.StepComma = None # Token
            self.StepExpression = None # NamedExpressionContext

        def IN(self):
            return self.getToken(HqlParser.IN, 0)

        def RANGE(self):
            return self.getToken(HqlParser.RANGE, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_makeSeriesOperatorInRangeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperatorInRangeClause" ):
                listener.enterMakeSeriesOperatorInRangeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperatorInRangeClause" ):
                listener.exitMakeSeriesOperatorInRangeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeSeriesOperatorInRangeClause" ):
                return visitor.visitMakeSeriesOperatorInRangeClause(self)
            else:
                return visitor.visitChildren(self)




    def makeSeriesOperatorInRangeClause(self):

        localctx = HqlParser.MakeSeriesOperatorInRangeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_makeSeriesOperatorInRangeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1467
            self.match(HqlParser.IN)
            self.state = 1468
            self.match(HqlParser.RANGE)
            self.state = 1469
            self.match(HqlParser.OPENPAREN)
            self.state = 1470
            localctx.FromExpression = self.namedExpression()
            self.state = 1471
            localctx.ToComma = self.match(HqlParser.COMMA)
            self.state = 1472
            localctx.ToExpression = self.namedExpression()
            self.state = 1473
            localctx.StepComma = self.match(HqlParser.COMMA)
            self.state = 1474
            localctx.StepExpression = self.namedExpression()
            self.state = 1475
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorFromToStepClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FromExpression = None # NamedExpressionContext
            self.ToExpression = None # NamedExpressionContext
            self.StepExpression = None # NamedExpressionContext

        def STEP(self):
            return self.getToken(HqlParser.STEP, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.NamedExpressionContext,i)


        def FROM(self):
            return self.getToken(HqlParser.FROM, 0)

        def TO(self):
            return self.getToken(HqlParser.TO, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_makeSeriesOperatorFromToStepClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperatorFromToStepClause" ):
                listener.enterMakeSeriesOperatorFromToStepClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperatorFromToStepClause" ):
                listener.exitMakeSeriesOperatorFromToStepClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeSeriesOperatorFromToStepClause" ):
                return visitor.visitMakeSeriesOperatorFromToStepClause(self)
            else:
                return visitor.visitChildren(self)




    def makeSeriesOperatorFromToStepClause(self):

        localctx = HqlParser.MakeSeriesOperatorFromToStepClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_makeSeriesOperatorFromToStepClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 1477
                self.match(HqlParser.FROM)
                self.state = 1478
                localctx.FromExpression = self.namedExpression()


            self.state = 1483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==247:
                self.state = 1481
                self.match(HqlParser.TO)
                self.state = 1482
                localctx.ToExpression = self.namedExpression()


            self.state = 1485
            self.match(HqlParser.STEP)
            self.state = 1486
            localctx.StepExpression = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def BY(self):
            return self.getToken(HqlParser.BY, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_makeSeriesOperatorByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperatorByClause" ):
                listener.enterMakeSeriesOperatorByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperatorByClause" ):
                listener.exitMakeSeriesOperatorByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeSeriesOperatorByClause" ):
                return visitor.visitMakeSeriesOperatorByClause(self)
            else:
                return visitor.visitChildren(self)




    def makeSeriesOperatorByClause(self):

        localctx = HqlParser.MakeSeriesOperatorByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_makeSeriesOperatorByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1488
            self.match(HqlParser.BY)
            self.state = 1489
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 1494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1490
                self.match(HqlParser.COMMA)
                self.state = 1491
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1496
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvapplyOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self._mvapplyOperatorExpression = None # MvapplyOperatorExpressionContext
            self.Expressions = list() # of MvapplyOperatorExpressionContexts
            self.LimitClause = None # MvapplyOperatorLimitClauseContext
            self.IdClause = None # MvapplyOperatorIdClauseContext
            self.OnExpression = None # ContextualSubExpressionContext

        def ON(self):
            return self.getToken(HqlParser.ON, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def mvapplyOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.MvapplyOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.MvapplyOperatorExpressionContext,i)


        def contextualSubExpression(self):
            return self.getTypedRuleContext(HqlParser.ContextualSubExpressionContext,0)


        def MVAPPLY(self):
            return self.getToken(HqlParser.MVAPPLY, 0)

        def MV_APPLY(self):
            return self.getToken(HqlParser.MV_APPLY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.StrictQueryOperatorParameterContext,i)


        def mvapplyOperatorLimitClause(self):
            return self.getTypedRuleContext(HqlParser.MvapplyOperatorLimitClauseContext,0)


        def mvapplyOperatorIdClause(self):
            return self.getTypedRuleContext(HqlParser.MvapplyOperatorIdClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_mvapplyOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvapplyOperator" ):
                listener.enterMvapplyOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvapplyOperator" ):
                listener.exitMvapplyOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMvapplyOperator" ):
                return visitor.visitMvapplyOperator(self)
            else:
                return visitor.visitChildren(self)




    def mvapplyOperator(self):

        localctx = HqlParser.MvapplyOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_mvapplyOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1497
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==158 or _la==160):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223301650926338015) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 13) != 0):
                self.state = 1498
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 1503
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1504
            localctx._mvapplyOperatorExpression = self.mvapplyOperatorExpression()
            localctx.Expressions.append(localctx._mvapplyOperatorExpression)
            self.state = 1509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1505
                self.match(HqlParser.COMMA)
                self.state = 1506
                localctx._mvapplyOperatorExpression = self.mvapplyOperatorExpression()
                localctx.Expressions.append(localctx._mvapplyOperatorExpression)
                self.state = 1511
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 1512
                localctx.LimitClause = self.mvapplyOperatorLimitClause()


            self.state = 1516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 1515
                localctx.IdClause = self.mvapplyOperatorIdClause()


            self.state = 1518
            self.match(HqlParser.ON)
            self.state = 1519
            self.match(HqlParser.OPENPAREN)
            self.state = 1520
            localctx.OnExpression = self.contextualSubExpression()
            self.state = 1521
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvapplyOperatorLimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LimitValue = None # LongLiteralExpressionContext

        def LIMIT(self):
            return self.getToken(HqlParser.LIMIT, 0)

        def longLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.LongLiteralExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_mvapplyOperatorLimitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvapplyOperatorLimitClause" ):
                listener.enterMvapplyOperatorLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvapplyOperatorLimitClause" ):
                listener.exitMvapplyOperatorLimitClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMvapplyOperatorLimitClause" ):
                return visitor.visitMvapplyOperatorLimitClause(self)
            else:
                return visitor.visitChildren(self)




    def mvapplyOperatorLimitClause(self):

        localctx = HqlParser.MvapplyOperatorLimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_mvapplyOperatorLimitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1523
            self.match(HqlParser.LIMIT)
            self.state = 1524
            localctx.LimitValue = self.longLiteralExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvapplyOperatorIdClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.IdValue = None # Token

        def ID(self):
            return self.getToken(HqlParser.ID, 0)

        def GUIDLITERAL(self):
            return self.getToken(HqlParser.GUIDLITERAL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_mvapplyOperatorIdClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvapplyOperatorIdClause" ):
                listener.enterMvapplyOperatorIdClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvapplyOperatorIdClause" ):
                listener.exitMvapplyOperatorIdClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMvapplyOperatorIdClause" ):
                return visitor.visitMvapplyOperatorIdClause(self)
            else:
                return visitor.visitChildren(self)




    def mvapplyOperatorIdClause(self):

        localctx = HqlParser.MvapplyOperatorIdClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_mvapplyOperatorIdClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1526
            self.match(HqlParser.ID)
            self.state = 1527
            localctx.IdValue = self.match(HqlParser.GUIDLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvapplyOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext
            self.ToClause = None # MvapplyOperatorExpressionToClauseContext

        def namedExpression(self):
            return self.getTypedRuleContext(HqlParser.NamedExpressionContext,0)


        def mvapplyOperatorExpressionToClause(self):
            return self.getTypedRuleContext(HqlParser.MvapplyOperatorExpressionToClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_mvapplyOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvapplyOperatorExpression" ):
                listener.enterMvapplyOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvapplyOperatorExpression" ):
                listener.exitMvapplyOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMvapplyOperatorExpression" ):
                return visitor.visitMvapplyOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def mvapplyOperatorExpression(self):

        localctx = HqlParser.MvapplyOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_mvapplyOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1529
            localctx.Expression = self.namedExpression()
            self.state = 1531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==247:
                self.state = 1530
                localctx.ToClause = self.mvapplyOperatorExpressionToClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvapplyOperatorExpressionToClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Type = None # ScalarTypeContext

        def TO(self):
            return self.getToken(HqlParser.TO, 0)

        def scalarType(self):
            return self.getTypedRuleContext(HqlParser.ScalarTypeContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_mvapplyOperatorExpressionToClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvapplyOperatorExpressionToClause" ):
                listener.enterMvapplyOperatorExpressionToClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvapplyOperatorExpressionToClause" ):
                listener.exitMvapplyOperatorExpressionToClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMvapplyOperatorExpressionToClause" ):
                return visitor.visitMvapplyOperatorExpressionToClause(self)
            else:
                return visitor.visitChildren(self)




    def mvapplyOperatorExpressionToClause(self):

        localctx = HqlParser.MvapplyOperatorExpressionToClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_mvapplyOperatorExpressionToClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1533
            self.match(HqlParser.TO)
            self.state = 1534
            localctx.Type = self.scalarType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvexpandOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self._mvexpandOperatorExpression = None # MvexpandOperatorExpressionContext
            self.Expressions = list() # of MvexpandOperatorExpressionContexts
            self.LimitClause = None # MvapplyOperatorLimitClauseContext

        def mvexpandOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.MvexpandOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.MvexpandOperatorExpressionContext,i)


        def MVEXPAND(self):
            return self.getToken(HqlParser.MVEXPAND, 0)

        def MV_EXPAND(self):
            return self.getToken(HqlParser.MV_EXPAND, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.StrictQueryOperatorParameterContext,i)


        def mvapplyOperatorLimitClause(self):
            return self.getTypedRuleContext(HqlParser.MvapplyOperatorLimitClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_mvexpandOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvexpandOperator" ):
                listener.enterMvexpandOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvexpandOperator" ):
                listener.exitMvexpandOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMvexpandOperator" ):
                return visitor.visitMvexpandOperator(self)
            else:
                return visitor.visitChildren(self)




    def mvexpandOperator(self):

        localctx = HqlParser.MvexpandOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_mvexpandOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==159 or _la==161):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223301650926338015) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 13) != 0):
                self.state = 1537
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 1542
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1543
            localctx._mvexpandOperatorExpression = self.mvexpandOperatorExpression()
            localctx.Expressions.append(localctx._mvexpandOperatorExpression)
            self.state = 1548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1544
                self.match(HqlParser.COMMA)
                self.state = 1545
                localctx._mvexpandOperatorExpression = self.mvexpandOperatorExpression()
                localctx.Expressions.append(localctx._mvexpandOperatorExpression)
                self.state = 1550
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 1551
                localctx.LimitClause = self.mvapplyOperatorLimitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvexpandOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext
            self.ToClause = None # MvapplyOperatorExpressionToClauseContext

        def namedExpression(self):
            return self.getTypedRuleContext(HqlParser.NamedExpressionContext,0)


        def mvapplyOperatorExpressionToClause(self):
            return self.getTypedRuleContext(HqlParser.MvapplyOperatorExpressionToClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_mvexpandOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvexpandOperatorExpression" ):
                listener.enterMvexpandOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvexpandOperatorExpression" ):
                listener.exitMvexpandOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMvexpandOperatorExpression" ):
                return visitor.visitMvexpandOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def mvexpandOperatorExpression(self):

        localctx = HqlParser.MvexpandOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_mvexpandOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1554
            localctx.Expression = self.namedExpression()
            self.state = 1556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==247:
                self.state = 1555
                localctx.ToClause = self.mvapplyOperatorExpressionToClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.KindClause = None # ParseOperatorKindClauseContext
            self.Expression = None # UnnamedExpressionContext
            self.Pattern = None # ParseOperatorPatternContext

        def PARSE(self):
            return self.getToken(HqlParser.PARSE, 0)

        def WITH(self):
            return self.getToken(HqlParser.WITH, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def parseOperatorPattern(self):
            return self.getTypedRuleContext(HqlParser.ParseOperatorPatternContext,0)


        def parseOperatorKindClause(self):
            return self.getTypedRuleContext(HqlParser.ParseOperatorKindClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_parseOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseOperator" ):
                listener.enterParseOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseOperator" ):
                listener.exitParseOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParseOperator" ):
                return visitor.visitParseOperator(self)
            else:
                return visitor.visitChildren(self)




    def parseOperator(self):

        localctx = HqlParser.ParseOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_parseOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1558
            self.match(HqlParser.PARSE)
            self.state = 1560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 1559
                localctx.KindClause = self.parseOperatorKindClause()


            self.state = 1562
            localctx.Expression = self.unnamedExpression()
            self.state = 1563
            self.match(HqlParser.WITH)
            self.state = 1564
            localctx.Pattern = self.parseOperatorPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseOperatorKindClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Kind = None # Token
            self.FlagsClause = None # ParseOperatorFlagsClauseContext

        def KIND(self):
            return self.getToken(HqlParser.KIND, 0)

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def SIMPLE(self):
            return self.getToken(HqlParser.SIMPLE, 0)

        def REGEX(self):
            return self.getToken(HqlParser.REGEX, 0)

        def RELAXED(self):
            return self.getToken(HqlParser.RELAXED, 0)

        def parseOperatorFlagsClause(self):
            return self.getTypedRuleContext(HqlParser.ParseOperatorFlagsClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_parseOperatorKindClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseOperatorKindClause" ):
                listener.enterParseOperatorKindClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseOperatorKindClause" ):
                listener.exitParseOperatorKindClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParseOperatorKindClause" ):
                return visitor.visitParseOperatorKindClause(self)
            else:
                return visitor.visitChildren(self)




    def parseOperatorKindClause(self):

        localctx = HqlParser.ParseOperatorKindClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_parseOperatorKindClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self.match(HqlParser.KIND)
            self.state = 1567
            self.match(HqlParser.EQUAL)
            self.state = 1568
            localctx.Kind = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 217)) & ~0x3f) == 0 and ((1 << (_la - 217)) & 8195) != 0)):
                localctx.Kind = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 1569
                localctx.FlagsClause = self.parseOperatorFlagsClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseOperatorFlagsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Flags = None # Token

        def FLAGS(self):
            return self.getToken(HqlParser.FLAGS, 0)

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def IDENTIFIER(self):
            return self.getToken(HqlParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_parseOperatorFlagsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseOperatorFlagsClause" ):
                listener.enterParseOperatorFlagsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseOperatorFlagsClause" ):
                listener.exitParseOperatorFlagsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParseOperatorFlagsClause" ):
                return visitor.visitParseOperatorFlagsClause(self)
            else:
                return visitor.visitChildren(self)




    def parseOperatorFlagsClause(self):

        localctx = HqlParser.ParseOperatorFlagsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_parseOperatorFlagsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1572
            self.match(HqlParser.FLAGS)
            self.state = 1573
            self.match(HqlParser.EQUAL)
            self.state = 1574
            localctx.Flags = self.match(HqlParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseOperatorNameAndOptionalTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # SimpleNameReferenceContext
            self.Type = None # ScalarTypeContext

        def simpleNameReference(self):
            return self.getTypedRuleContext(HqlParser.SimpleNameReferenceContext,0)


        def COLON(self):
            return self.getToken(HqlParser.COLON, 0)

        def scalarType(self):
            return self.getTypedRuleContext(HqlParser.ScalarTypeContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_parseOperatorNameAndOptionalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseOperatorNameAndOptionalType" ):
                listener.enterParseOperatorNameAndOptionalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseOperatorNameAndOptionalType" ):
                listener.exitParseOperatorNameAndOptionalType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParseOperatorNameAndOptionalType" ):
                return visitor.visitParseOperatorNameAndOptionalType(self)
            else:
                return visitor.visitChildren(self)




    def parseOperatorNameAndOptionalType(self):

        localctx = HqlParser.ParseOperatorNameAndOptionalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_parseOperatorNameAndOptionalType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1576
            localctx.Name = self.simpleNameReference()
            self.state = 1579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 1577
                self.match(HqlParser.COLON)
                self.state = 1578
                localctx.Type = self.scalarType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseOperatorPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LeadingColumn = None # ParseOperatorNameAndOptionalTypeContext
            self._parseOperatorPatternSegment = None # ParseOperatorPatternSegmentContext
            self.Segments = list() # of ParseOperatorPatternSegmentContexts
            self.TrailingStar = None # Token

        def parseOperatorNameAndOptionalType(self):
            return self.getTypedRuleContext(HqlParser.ParseOperatorNameAndOptionalTypeContext,0)


        def parseOperatorPatternSegment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.ParseOperatorPatternSegmentContext)
            else:
                return self.getTypedRuleContext(HqlParser.ParseOperatorPatternSegmentContext,i)


        def ASTERISK(self):
            return self.getToken(HqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_parseOperatorPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseOperatorPattern" ):
                listener.enterParseOperatorPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseOperatorPattern" ):
                listener.exitParseOperatorPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParseOperatorPattern" ):
                return visitor.visitParseOperatorPattern(self)
            else:
                return visitor.visitChildren(self)




    def parseOperatorPattern(self):

        localctx = HqlParser.ParseOperatorPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_parseOperatorPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 622630621017014272) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 2089687819387691625) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 1790180853492720385) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & 8718987674455048331) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 576460752438689537) != 0):
                self.state = 1581
                localctx.LeadingColumn = self.parseOperatorNameAndOptionalType()


            self.state = 1587
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1584
                    localctx._parseOperatorPatternSegment = self.parseOperatorPatternSegment()
                    localctx.Segments.append(localctx._parseOperatorPatternSegment) 
                self.state = 1589
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

            self.state = 1591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 1590
                localctx.TrailingStar = self.match(HqlParser.ASTERISK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseOperatorPatternSegmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Text = None # StringLiteralExpressionContext
            self.Column = None # ParseOperatorNameAndOptionalTypeContext

        def stringLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.StringLiteralExpressionContext,0)


        def ASTERISK(self):
            return self.getToken(HqlParser.ASTERISK, 0)

        def parseOperatorNameAndOptionalType(self):
            return self.getTypedRuleContext(HqlParser.ParseOperatorNameAndOptionalTypeContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_parseOperatorPatternSegment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseOperatorPatternSegment" ):
                listener.enterParseOperatorPatternSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseOperatorPatternSegment" ):
                listener.exitParseOperatorPatternSegment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParseOperatorPatternSegment" ):
                return visitor.visitParseOperatorPatternSegment(self)
            else:
                return visitor.visitChildren(self)




    def parseOperatorPatternSegment(self):

        localctx = HqlParser.ParseOperatorPatternSegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_parseOperatorPatternSegment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 1593
                self.match(HqlParser.ASTERISK)


            self.state = 1596
            localctx.Text = self.stringLiteralExpression()
            self.state = 1598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 622630621017014272) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 2089687819387691625) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 1790180853492720385) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & 8718987674455048331) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 576460752438689537) != 0):
                self.state = 1597
                localctx.Column = self.parseOperatorNameAndOptionalType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.KindClause = None # ParseOperatorKindClauseContext
            self.Expression = None # UnnamedExpressionContext
            self.Pattern = None # ParseOperatorPatternContext

        def PARSEWHERE(self):
            return self.getToken(HqlParser.PARSEWHERE, 0)

        def WITH(self):
            return self.getToken(HqlParser.WITH, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def parseOperatorPattern(self):
            return self.getTypedRuleContext(HqlParser.ParseOperatorPatternContext,0)


        def parseOperatorKindClause(self):
            return self.getTypedRuleContext(HqlParser.ParseOperatorKindClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_parseWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseWhereOperator" ):
                listener.enterParseWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseWhereOperator" ):
                listener.exitParseWhereOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParseWhereOperator" ):
                return visitor.visitParseWhereOperator(self)
            else:
                return visitor.visitChildren(self)




    def parseWhereOperator(self):

        localctx = HqlParser.ParseWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_parseWhereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1600
            self.match(HqlParser.PARSEWHERE)
            self.state = 1602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 1601
                localctx.KindClause = self.parseOperatorKindClause()


            self.state = 1604
            localctx.Expression = self.unnamedExpression()
            self.state = 1605
            self.match(HqlParser.WITH)
            self.state = 1606
            localctx.Pattern = self.parseOperatorPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseKvOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expressions = None # UnnamedExpressionContext
            self.Keys = None # RowSchemaContext
            self.WithClause = None # ParseKvWithClauseContext

        def PARSEKV(self):
            return self.getToken(HqlParser.PARSEKV, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def rowSchema(self):
            return self.getTypedRuleContext(HqlParser.RowSchemaContext,0)


        def parseKvWithClause(self):
            return self.getTypedRuleContext(HqlParser.ParseKvWithClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_parseKvOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseKvOperator" ):
                listener.enterParseKvOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseKvOperator" ):
                listener.exitParseKvOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParseKvOperator" ):
                return visitor.visitParseKvOperator(self)
            else:
                return visitor.visitChildren(self)




    def parseKvOperator(self):

        localctx = HqlParser.ParseKvOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_parseKvOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self.match(HqlParser.PARSEKV)
            self.state = 1609
            localctx.Expressions = self.unnamedExpression()
            self.state = 1610
            localctx.Keys = self.rowSchema()
            self.state = 1612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==262:
                self.state = 1611
                localctx.WithClause = self.parseKvWithClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseKvWithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._queryOperatorProperty = None # QueryOperatorPropertyContext
            self.Properties = list() # of QueryOperatorPropertyContexts

        def WITH(self):
            return self.getToken(HqlParser.WITH, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def queryOperatorProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.QueryOperatorPropertyContext)
            else:
                return self.getTypedRuleContext(HqlParser.QueryOperatorPropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_parseKvWithClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseKvWithClause" ):
                listener.enterParseKvWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseKvWithClause" ):
                listener.exitParseKvWithClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParseKvWithClause" ):
                return visitor.visitParseKvWithClause(self)
            else:
                return visitor.visitChildren(self)




    def parseKvWithClause(self):

        localctx = HqlParser.ParseKvWithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_parseKvWithClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1614
            self.match(HqlParser.WITH)
            self.state = 1615
            self.match(HqlParser.OPENPAREN)
            self.state = 1616
            localctx._queryOperatorProperty = self.queryOperatorProperty()
            localctx.Properties.append(localctx._queryOperatorProperty)
            self.state = 1621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1617
                self.match(HqlParser.COMMA)
                self.state = 1618
                localctx._queryOperatorProperty = self.queryOperatorProperty()
                localctx.Properties.append(localctx._queryOperatorProperty)
                self.state = 1623
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1624
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.ByExpression = None # EntityExpressionContext
            self.InClause = None # PartitionOperatorInClauseContext
            self.SubExpressionBody = None # PartitionOperatorSubExpressionBodyContext
            self.FullExpressionBody = None # PartitionOperatorFullExpressionBodyContext

        def PARTITION(self):
            return self.getToken(HqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(HqlParser.BY, 0)

        def entityExpression(self):
            return self.getTypedRuleContext(HqlParser.EntityExpressionContext,0)


        def partitionOperatorSubExpressionBody(self):
            return self.getTypedRuleContext(HqlParser.PartitionOperatorSubExpressionBodyContext,0)


        def partitionOperatorFullExpressionBody(self):
            return self.getTypedRuleContext(HqlParser.PartitionOperatorFullExpressionBodyContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def partitionOperatorInClause(self):
            return self.getTypedRuleContext(HqlParser.PartitionOperatorInClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_partitionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOperator" ):
                listener.enterPartitionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOperator" ):
                listener.exitPartitionOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOperator" ):
                return visitor.visitPartitionOperator(self)
            else:
                return visitor.visitChildren(self)




    def partitionOperator(self):

        localctx = HqlParser.PartitionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_partitionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1626
            self.match(HqlParser.PARTITION)
            self.state = 1630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223372019670515679) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 36028797018963981) != 0):
                self.state = 1627
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1632
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1633
            self.match(HqlParser.BY)
            self.state = 1634
            localctx.ByExpression = self.entityExpression()
            self.state = 1636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 1635
                localctx.InClause = self.partitionOperatorInClause()


            self.state = 1640
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [31]:
                self.state = 1638
                localctx.SubExpressionBody = self.partitionOperatorSubExpressionBody()
                pass
            elif token in [29]:
                self.state = 1639
                localctx.FullExpressionBody = self.partitionOperatorFullExpressionBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOperatorInClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FunctionCall = None # FunctionCallExpressionContext
            self.Literal = None # DynamicLiteralExpressionContext

        def IN(self):
            return self.getToken(HqlParser.IN, 0)

        def functionCallExpression(self):
            return self.getTypedRuleContext(HqlParser.FunctionCallExpressionContext,0)


        def dynamicLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.DynamicLiteralExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_partitionOperatorInClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOperatorInClause" ):
                listener.enterPartitionOperatorInClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOperatorInClause" ):
                listener.exitPartitionOperatorInClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOperatorInClause" ):
                return visitor.visitPartitionOperatorInClause(self)
            else:
                return visitor.visitChildren(self)




    def partitionOperatorInClause(self):

        localctx = HqlParser.PartitionOperatorInClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_partitionOperatorInClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1642
            self.match(HqlParser.IN)
            self.state = 1645
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 38, 40, 41, 42, 50, 53, 55, 59, 66, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 113, 125, 127, 128, 129, 133, 141, 142, 146, 148, 149, 150, 154, 162, 163, 184, 185, 187, 188, 192, 193, 198, 199, 201, 205, 214, 215, 216, 219, 220, 221, 228, 233, 234, 238, 242, 254, 257, 258, 259, 260, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 289, 321]:
                self.state = 1643
                localctx.FunctionCall = self.functionCallExpression()
                pass
            elif token in [287]:
                self.state = 1644
                localctx.Literal = self.dynamicLiteralExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOperatorSubExpressionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SubExpression = None # PipeSubExpressionContext

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def pipeSubExpression(self):
            return self.getTypedRuleContext(HqlParser.PipeSubExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_partitionOperatorSubExpressionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOperatorSubExpressionBody" ):
                listener.enterPartitionOperatorSubExpressionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOperatorSubExpressionBody" ):
                listener.exitPartitionOperatorSubExpressionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOperatorSubExpressionBody" ):
                return visitor.visitPartitionOperatorSubExpressionBody(self)
            else:
                return visitor.visitChildren(self)




    def partitionOperatorSubExpressionBody(self):

        localctx = HqlParser.PartitionOperatorSubExpressionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_partitionOperatorSubExpressionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1647
            self.match(HqlParser.OPENPAREN)
            self.state = 1648
            localctx.SubExpression = self.pipeSubExpression()
            self.state = 1649
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOperatorFullExpressionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # PipeExpressionContext

        def OPENBRACE(self):
            return self.getToken(HqlParser.OPENBRACE, 0)

        def CLOSEBRACE(self):
            return self.getToken(HqlParser.CLOSEBRACE, 0)

        def pipeExpression(self):
            return self.getTypedRuleContext(HqlParser.PipeExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_partitionOperatorFullExpressionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOperatorFullExpressionBody" ):
                listener.enterPartitionOperatorFullExpressionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOperatorFullExpressionBody" ):
                listener.exitPartitionOperatorFullExpressionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOperatorFullExpressionBody" ):
                return visitor.visitPartitionOperatorFullExpressionBody(self)
            else:
                return visitor.visitChildren(self)




    def partitionOperatorFullExpressionBody(self):

        localctx = HqlParser.PartitionOperatorFullExpressionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_partitionOperatorFullExpressionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1651
            self.match(HqlParser.OPENBRACE)
            self.state = 1652
            localctx.Expression = self.pipeExpression()
            self.state = 1653
            self.match(HqlParser.CLOSEBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionByOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Column = None # EntityExpressionContext
            self.IdClause = None # PartitionByOperatorIdClauseContext
            self.SubExpression = None # ContextualSubExpressionContext

        def PARTITIONBY(self):
            return self.getToken(HqlParser.PARTITIONBY, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def entityExpression(self):
            return self.getTypedRuleContext(HqlParser.EntityExpressionContext,0)


        def contextualSubExpression(self):
            return self.getTypedRuleContext(HqlParser.ContextualSubExpressionContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def partitionByOperatorIdClause(self):
            return self.getTypedRuleContext(HqlParser.PartitionByOperatorIdClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_partitionByOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionByOperator" ):
                listener.enterPartitionByOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionByOperator" ):
                listener.exitPartitionByOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionByOperator" ):
                return visitor.visitPartitionByOperator(self)
            else:
                return visitor.visitChildren(self)




    def partitionByOperator(self):

        localctx = HqlParser.PartitionByOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_partitionByOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1655
            self.match(HqlParser.PARTITIONBY)
            self.state = 1659
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1656
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1661
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

            self.state = 1662
            localctx.Column = self.entityExpression()
            self.state = 1664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 1663
                localctx.IdClause = self.partitionByOperatorIdClause()


            self.state = 1666
            self.match(HqlParser.OPENPAREN)
            self.state = 1667
            localctx.SubExpression = self.contextualSubExpression()
            self.state = 1668
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionByOperatorIdClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.IdValue = None # Token

        def ID(self):
            return self.getToken(HqlParser.ID, 0)

        def GUIDLITERAL(self):
            return self.getToken(HqlParser.GUIDLITERAL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_partitionByOperatorIdClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionByOperatorIdClause" ):
                listener.enterPartitionByOperatorIdClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionByOperatorIdClause" ):
                listener.exitPartitionByOperatorIdClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionByOperatorIdClause" ):
                return visitor.visitPartitionByOperatorIdClause(self)
            else:
                return visitor.visitChildren(self)




    def partitionByOperatorIdClause(self):

        localctx = HqlParser.PartitionByOperatorIdClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_partitionByOperatorIdClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1670
            self.match(HqlParser.ID)
            self.state = 1671
            localctx.IdValue = self.match(HqlParser.GUIDLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def PRINT(self):
            return self.getToken(HqlParser.PRINT, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_printOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintOperator" ):
                listener.enterPrintOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintOperator" ):
                listener.exitPrintOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintOperator" ):
                return visitor.visitPrintOperator(self)
            else:
                return visitor.visitChildren(self)




    def printOperator(self):

        localctx = HqlParser.PrintOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_printOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1673
            self.match(HqlParser.PRINT)
            self.state = 1674
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 1679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1675
                self.match(HqlParser.COMMA)
                self.state = 1676
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1681
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectAwayOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._simpleOrWildcardedNameReference = None # SimpleOrWildcardedNameReferenceContext
            self.Columns = list() # of SimpleOrWildcardedNameReferenceContexts

        def PROJECTAWAY(self):
            return self.getToken(HqlParser.PROJECTAWAY, 0)

        def simpleOrWildcardedNameReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.SimpleOrWildcardedNameReferenceContext)
            else:
                return self.getTypedRuleContext(HqlParser.SimpleOrWildcardedNameReferenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_projectAwayOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectAwayOperator" ):
                listener.enterProjectAwayOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectAwayOperator" ):
                listener.exitProjectAwayOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectAwayOperator" ):
                return visitor.visitProjectAwayOperator(self)
            else:
                return visitor.visitChildren(self)




    def projectAwayOperator(self):

        localctx = HqlParser.ProjectAwayOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_projectAwayOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1682
            self.match(HqlParser.PROJECTAWAY)
            self.state = 1691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416123978121218) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -1729240968798725271) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 7196752211023416333) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & -3749008268648248231) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 4611686019509516303) != 0):
                self.state = 1683
                localctx._simpleOrWildcardedNameReference = self.simpleOrWildcardedNameReference()
                localctx.Columns.append(localctx._simpleOrWildcardedNameReference)
                self.state = 1688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 1684
                    self.match(HqlParser.COMMA)
                    self.state = 1685
                    localctx._simpleOrWildcardedNameReference = self.simpleOrWildcardedNameReference()
                    localctx.Columns.append(localctx._simpleOrWildcardedNameReference)
                    self.state = 1690
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectKeepOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._simpleOrWildcardedNameReference = None # SimpleOrWildcardedNameReferenceContext
            self.Columns = list() # of SimpleOrWildcardedNameReferenceContexts

        def PROJECTKEEP(self):
            return self.getToken(HqlParser.PROJECTKEEP, 0)

        def simpleOrWildcardedNameReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.SimpleOrWildcardedNameReferenceContext)
            else:
                return self.getTypedRuleContext(HqlParser.SimpleOrWildcardedNameReferenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_projectKeepOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectKeepOperator" ):
                listener.enterProjectKeepOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectKeepOperator" ):
                listener.exitProjectKeepOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectKeepOperator" ):
                return visitor.visitProjectKeepOperator(self)
            else:
                return visitor.visitChildren(self)




    def projectKeepOperator(self):

        localctx = HqlParser.ProjectKeepOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_projectKeepOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1693
            self.match(HqlParser.PROJECTKEEP)
            self.state = 1694
            localctx._simpleOrWildcardedNameReference = self.simpleOrWildcardedNameReference()
            localctx.Columns.append(localctx._simpleOrWildcardedNameReference)
            self.state = 1699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1695
                self.match(HqlParser.COMMA)
                self.state = 1696
                localctx._simpleOrWildcardedNameReference = self.simpleOrWildcardedNameReference()
                localctx.Columns.append(localctx._simpleOrWildcardedNameReference)
                self.state = 1701
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def PROJECT(self):
            return self.getToken(HqlParser.PROJECT, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_projectOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectOperator" ):
                listener.enterProjectOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectOperator" ):
                listener.exitProjectOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectOperator" ):
                return visitor.visitProjectOperator(self)
            else:
                return visitor.visitChildren(self)




    def projectOperator(self):

        localctx = HqlParser.ProjectOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_projectOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1702
            self.match(HqlParser.PROJECT)
            self.state = 1711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416134715541506) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -3458481937589061933) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -8106479303057002443) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 3450710999116558693) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -4620693212279873473) != 0) or _la==321:
                self.state = 1703
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 1704
                    self.match(HqlParser.COMMA)
                    self.state = 1705
                    localctx._namedExpression = self.namedExpression()
                    localctx.Expressions.append(localctx._namedExpression)
                    self.state = 1710
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectRenameOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def PROJECTRENAME(self):
            return self.getToken(HqlParser.PROJECTRENAME, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_projectRenameOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectRenameOperator" ):
                listener.enterProjectRenameOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectRenameOperator" ):
                listener.exitProjectRenameOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectRenameOperator" ):
                return visitor.visitProjectRenameOperator(self)
            else:
                return visitor.visitChildren(self)




    def projectRenameOperator(self):

        localctx = HqlParser.ProjectRenameOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_projectRenameOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1713
            self.match(HqlParser.PROJECTRENAME)
            self.state = 1722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416134715541506) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -3458481937589061933) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -8106479303057002443) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 3450710999116558693) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -4620693212279873473) != 0) or _la==321:
                self.state = 1714
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 1715
                    self.match(HqlParser.COMMA)
                    self.state = 1716
                    localctx._namedExpression = self.namedExpression()
                    localctx.Expressions.append(localctx._namedExpression)
                    self.state = 1721
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectReorderOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._projectReorderExpression = None # ProjectReorderExpressionContext
            self.Expressions = list() # of ProjectReorderExpressionContexts

        def PROJECTREORDER(self):
            return self.getToken(HqlParser.PROJECTREORDER, 0)

        def projectReorderExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.ProjectReorderExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.ProjectReorderExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_projectReorderOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectReorderOperator" ):
                listener.enterProjectReorderOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectReorderOperator" ):
                listener.exitProjectReorderOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectReorderOperator" ):
                return visitor.visitProjectReorderOperator(self)
            else:
                return visitor.visitChildren(self)




    def projectReorderOperator(self):

        localctx = HqlParser.ProjectReorderOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_projectReorderOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1724
            self.match(HqlParser.PROJECTREORDER)
            self.state = 1733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416123978121218) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -1729240968798725271) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 7196752211023416333) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & -3749008268648248231) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 4611686019509516303) != 0):
                self.state = 1725
                localctx._projectReorderExpression = self.projectReorderExpression()
                localctx.Expressions.append(localctx._projectReorderExpression)
                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 1726
                    self.match(HqlParser.COMMA)
                    self.state = 1727
                    localctx._projectReorderExpression = self.projectReorderExpression()
                    localctx.Expressions.append(localctx._projectReorderExpression)
                    self.state = 1732
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectReorderExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # SimpleOrWildcardedNameReferenceContext
            self.Order = None # Token

        def simpleOrWildcardedNameReference(self):
            return self.getTypedRuleContext(HqlParser.SimpleOrWildcardedNameReferenceContext,0)


        def ASC(self):
            return self.getToken(HqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(HqlParser.DESC, 0)

        def GRANNYASC(self):
            return self.getToken(HqlParser.GRANNYASC, 0)

        def GRANNYDESC(self):
            return self.getToken(HqlParser.GRANNYDESC, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_projectReorderExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectReorderExpression" ):
                listener.enterProjectReorderExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectReorderExpression" ):
                listener.exitProjectReorderExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectReorderExpression" ):
                return visitor.visitProjectReorderExpression(self)
            else:
                return visitor.visitChildren(self)




    def projectReorderExpression(self):

        localctx = HqlParser.ProjectReorderExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_projectReorderExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1735
            localctx.Expression = self.simpleOrWildcardedNameReference()
            self.state = 1737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 3377699988963329) != 0):
                self.state = 1736
                localctx.Order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 3377699988963329) != 0)):
                    localctx.Order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReduceByOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self.ByExpression = None # NamedExpressionContext
            self.WithClause = None # ReduceByWithClauseContext

        def REDUCE(self):
            return self.getToken(HqlParser.REDUCE, 0)

        def BY(self):
            return self.getToken(HqlParser.BY, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(HqlParser.NamedExpressionContext,0)


        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.StrictQueryOperatorParameterContext,i)


        def reduceByWithClause(self):
            return self.getTypedRuleContext(HqlParser.ReduceByWithClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_reduceByOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReduceByOperator" ):
                listener.enterReduceByOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReduceByOperator" ):
                listener.exitReduceByOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReduceByOperator" ):
                return visitor.visitReduceByOperator(self)
            else:
                return visitor.visitChildren(self)




    def reduceByOperator(self):

        localctx = HqlParser.ReduceByOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_reduceByOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1739
            self.match(HqlParser.REDUCE)
            self.state = 1743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223301650926338015) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 13) != 0):
                self.state = 1740
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 1745
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1746
            self.match(HqlParser.BY)
            self.state = 1747
            localctx.ByExpression = self.namedExpression()
            self.state = 1749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==262:
                self.state = 1748
                localctx.WithClause = self.reduceByWithClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReduceByWithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def WITH(self):
            return self.getToken(HqlParser.WITH, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_reduceByWithClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReduceByWithClause" ):
                listener.enterReduceByWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReduceByWithClause" ):
                listener.exitReduceByWithClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReduceByWithClause" ):
                return visitor.visitReduceByWithClause(self)
            else:
                return visitor.visitChildren(self)




    def reduceByWithClause(self):

        localctx = HqlParser.ReduceByWithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_reduceByWithClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1751
            self.match(HqlParser.WITH)
            self.state = 1752
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 1757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1753
                self.match(HqlParser.COMMA)
                self.state = 1754
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1759
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenderOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.CharType = None # Token
            self.WithClause = None # RenderOperatorWithClauseContext
            self.LegacyPropertyList = None # RenderOperatorLegacyPropertyListContext

        def RENDER(self):
            return self.getToken(HqlParser.RENDER, 0)

        def TABLE(self):
            return self.getToken(HqlParser.TABLE, 0)

        def LIST(self):
            return self.getToken(HqlParser.LIST, 0)

        def BARCHART(self):
            return self.getToken(HqlParser.BARCHART, 0)

        def PIECHART(self):
            return self.getToken(HqlParser.PIECHART, 0)

        def LADDERCHART(self):
            return self.getToken(HqlParser.LADDERCHART, 0)

        def TIMECHART(self):
            return self.getToken(HqlParser.TIMECHART, 0)

        def LINECHART(self):
            return self.getToken(HqlParser.LINECHART, 0)

        def ANOMALYCHART(self):
            return self.getToken(HqlParser.ANOMALYCHART, 0)

        def PIVOTCHART(self):
            return self.getToken(HqlParser.PIVOTCHART, 0)

        def AREACHART(self):
            return self.getToken(HqlParser.AREACHART, 0)

        def STACKEDAREACHART(self):
            return self.getToken(HqlParser.STACKEDAREACHART, 0)

        def SCATTERCHART(self):
            return self.getToken(HqlParser.SCATTERCHART, 0)

        def TIMEPIVOT(self):
            return self.getToken(HqlParser.TIMEPIVOT, 0)

        def COLUMNCHART(self):
            return self.getToken(HqlParser.COLUMNCHART, 0)

        def TIMELINE(self):
            return self.getToken(HqlParser.TIMELINE, 0)

        def CHART3D_(self):
            return self.getToken(HqlParser.CHART3D_, 0)

        def CARD(self):
            return self.getToken(HqlParser.CARD, 0)

        def TREEMAP(self):
            return self.getToken(HqlParser.TREEMAP, 0)

        def IDENTIFIER(self):
            return self.getToken(HqlParser.IDENTIFIER, 0)

        def renderOperatorWithClause(self):
            return self.getTypedRuleContext(HqlParser.RenderOperatorWithClauseContext,0)


        def renderOperatorLegacyPropertyList(self):
            return self.getTypedRuleContext(HqlParser.RenderOperatorLegacyPropertyListContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_renderOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenderOperator" ):
                listener.enterRenderOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenderOperator" ):
                listener.exitRenderOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenderOperator" ):
                return visitor.visitRenderOperator(self)
            else:
                return visitor.visitChildren(self)




    def renderOperator(self):

        localctx = HqlParser.RenderOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_renderOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1760
            self.match(HqlParser.RENDER)
            self.state = 1761
            localctx.CharType = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1445743578755104768) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & 769) != 0) or ((((_la - 203)) & ~0x3f) == 0 and ((1 << (_la - 203)) & 1133738226352131) != 0) or _la==321):
                localctx.CharType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1762
                localctx.WithClause = self.renderOperatorWithClause()

            elif la_ == 2:
                self.state = 1763
                localctx.LegacyPropertyList = self.renderOperatorLegacyPropertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenderOperatorWithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._renderOperatorProperty = None # RenderOperatorPropertyContext
            self.Properties = list() # of RenderOperatorPropertyContexts

        def WITH(self):
            return self.getToken(HqlParser.WITH, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def renderOperatorProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RenderOperatorPropertyContext)
            else:
                return self.getTypedRuleContext(HqlParser.RenderOperatorPropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_renderOperatorWithClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenderOperatorWithClause" ):
                listener.enterRenderOperatorWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenderOperatorWithClause" ):
                listener.exitRenderOperatorWithClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenderOperatorWithClause" ):
                return visitor.visitRenderOperatorWithClause(self)
            else:
                return visitor.visitChildren(self)




    def renderOperatorWithClause(self):

        localctx = HqlParser.RenderOperatorWithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_renderOperatorWithClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1766
            self.match(HqlParser.WITH)
            self.state = 1767
            self.match(HqlParser.OPENPAREN)
            self.state = 1776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39 or _la==45 or _la==138 or _la==141 or ((((_la - 228)) & ~0x3f) == 0 and ((1 << (_la - 228)) & 9002801208492033) != 0):
                self.state = 1768
                localctx._renderOperatorProperty = self.renderOperatorProperty()
                localctx.Properties.append(localctx._renderOperatorProperty)
                self.state = 1773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 1769
                    self.match(HqlParser.COMMA)
                    self.state = 1770
                    localctx._renderOperatorProperty = self.renderOperatorProperty()
                    localctx.Properties.append(localctx._renderOperatorProperty)
                    self.state = 1775
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1778
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenderOperatorLegacyPropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._renderOperatorLegacyProperty = None # RenderOperatorLegacyPropertyContext
            self.Properties = list() # of RenderOperatorLegacyPropertyContexts

        def renderOperatorLegacyProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RenderOperatorLegacyPropertyContext)
            else:
                return self.getTypedRuleContext(HqlParser.RenderOperatorLegacyPropertyContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_renderOperatorLegacyPropertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenderOperatorLegacyPropertyList" ):
                listener.enterRenderOperatorLegacyPropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenderOperatorLegacyPropertyList" ):
                listener.exitRenderOperatorLegacyPropertyList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenderOperatorLegacyPropertyList" ):
                return visitor.visitRenderOperatorLegacyPropertyList(self)
            else:
                return visitor.visitChildren(self)




    def renderOperatorLegacyPropertyList(self):

        localctx = HqlParser.RenderOperatorLegacyPropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_renderOperatorLegacyPropertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1781 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1780
                localctx._renderOperatorLegacyProperty = self.renderOperatorLegacyProperty()
                localctx.Properties.append(localctx._renderOperatorLegacyProperty)
                self.state = 1783 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==39 or _la==57 or _la==138 or _la==246 or _la==262):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenderOperatorPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # Token
            self.ExpressionValue = None # FunctionCallOrPathExpressionContext
            self.NameValue = None # SimpleNameReferenceContext
            self.NameListValue = None # RenderPropertyNameListContext
            self.TokenValue = None # Token
            self.BoolValue = None # Token
            self.NumberValue = None # NumericLiteralExpressionContext
            self.LiteralValue = None # LiteralExpressionContext

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def TITLE(self):
            return self.getToken(HqlParser.TITLE, 0)

        def functionCallOrPathExpression(self):
            return self.getTypedRuleContext(HqlParser.FunctionCallOrPathExpressionContext,0)


        def XCOLUMN(self):
            return self.getToken(HqlParser.XCOLUMN, 0)

        def simpleNameReference(self):
            return self.getTypedRuleContext(HqlParser.SimpleNameReferenceContext,0)


        def SERIES(self):
            return self.getToken(HqlParser.SERIES, 0)

        def renderPropertyNameList(self):
            return self.getTypedRuleContext(HqlParser.RenderPropertyNameListContext,0)


        def YCOLUMNS(self):
            return self.getToken(HqlParser.YCOLUMNS, 0)

        def ANOMALYCOLUMNS(self):
            return self.getToken(HqlParser.ANOMALYCOLUMNS, 0)

        def KIND(self):
            return self.getToken(HqlParser.KIND, 0)

        def DEFAULT(self):
            return self.getToken(HqlParser.DEFAULT, 0)

        def UNSTACKED(self):
            return self.getToken(HqlParser.UNSTACKED, 0)

        def STACKED(self):
            return self.getToken(HqlParser.STACKED, 0)

        def STACKED100(self):
            return self.getToken(HqlParser.STACKED100, 0)

        def MAP(self):
            return self.getToken(HqlParser.MAP, 0)

        def XTITLE(self):
            return self.getToken(HqlParser.XTITLE, 0)

        def YTITLE(self):
            return self.getToken(HqlParser.YTITLE, 0)

        def XAXIS(self):
            return self.getToken(HqlParser.XAXIS, 0)

        def LINEAR(self):
            return self.getToken(HqlParser.LINEAR, 0)

        def LOG(self):
            return self.getToken(HqlParser.LOG, 0)

        def YAXIS(self):
            return self.getToken(HqlParser.YAXIS, 0)

        def LEGEND(self):
            return self.getToken(HqlParser.LEGEND, 0)

        def VISIBLE(self):
            return self.getToken(HqlParser.VISIBLE, 0)

        def HIDDEN_(self):
            return self.getToken(HqlParser.HIDDEN_, 0)

        def YSPLIT(self):
            return self.getToken(HqlParser.YSPLIT, 0)

        def NONE(self):
            return self.getToken(HqlParser.NONE, 0)

        def AXES(self):
            return self.getToken(HqlParser.AXES, 0)

        def PANELS(self):
            return self.getToken(HqlParser.PANELS, 0)

        def ACCUMULATE(self):
            return self.getToken(HqlParser.ACCUMULATE, 0)

        def BOOLEANLITERAL(self):
            return self.getToken(HqlParser.BOOLEANLITERAL, 0)

        def YMIN(self):
            return self.getToken(HqlParser.YMIN, 0)

        def numericLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.NumericLiteralExpressionContext,0)


        def YMAX(self):
            return self.getToken(HqlParser.YMAX, 0)

        def XMIN(self):
            return self.getToken(HqlParser.XMIN, 0)

        def literalExpression(self):
            return self.getTypedRuleContext(HqlParser.LiteralExpressionContext,0)


        def XMAX(self):
            return self.getToken(HqlParser.XMAX, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_renderOperatorProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenderOperatorProperty" ):
                listener.enterRenderOperatorProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenderOperatorProperty" ):
                listener.exitRenderOperatorProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenderOperatorProperty" ):
                return visitor.visitRenderOperatorProperty(self)
            else:
                return visitor.visitChildren(self)




    def renderOperatorProperty(self):

        localctx = HqlParser.RenderOperatorPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_renderOperatorProperty)
        self._la = 0 # Token type
        try:
            self.state = 1836
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [246]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1785
                localctx.Name = self.match(HqlParser.TITLE)
                self.state = 1786
                self.match(HqlParser.EQUAL)
                self.state = 1787
                localctx.ExpressionValue = self.functionCallOrPathExpression()
                pass
            elif token in [271]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1788
                localctx.Name = self.match(HqlParser.XCOLUMN)
                self.state = 1789
                self.match(HqlParser.EQUAL)
                self.state = 1790
                localctx.NameValue = self.simpleNameReference()
                pass
            elif token in [228]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1791
                localctx.Name = self.match(HqlParser.SERIES)
                self.state = 1792
                self.match(HqlParser.EQUAL)
                self.state = 1793
                localctx.NameListValue = self.renderPropertyNameList()
                pass
            elif token in [276]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1794
                localctx.Name = self.match(HqlParser.YCOLUMNS)
                self.state = 1795
                self.match(HqlParser.EQUAL)
                self.state = 1796
                localctx.NameListValue = self.renderPropertyNameList()
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1797
                localctx.Name = self.match(HqlParser.ANOMALYCOLUMNS)
                self.state = 1798
                self.match(HqlParser.EQUAL)
                self.state = 1799
                localctx.NameListValue = self.renderPropertyNameList()
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1800
                localctx.Name = self.match(HqlParser.KIND)
                self.state = 1801
                self.match(HqlParser.EQUAL)
                self.state = 1802
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==74 or _la==154 or ((((_la - 233)) & ~0x3f) == 0 and ((1 << (_la - 233)) & 16777219) != 0)):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [274]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1803
                localctx.Name = self.match(HqlParser.XTITLE)
                self.state = 1804
                self.match(HqlParser.EQUAL)
                self.state = 1805
                localctx.ExpressionValue = self.functionCallOrPathExpression()
                pass
            elif token in [280]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1806
                localctx.Name = self.match(HqlParser.YTITLE)
                self.state = 1807
                self.match(HqlParser.EQUAL)
                self.state = 1808
                localctx.ExpressionValue = self.functionCallOrPathExpression()
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1809
                localctx.Name = self.match(HqlParser.XAXIS)
                self.state = 1810
                self.match(HqlParser.EQUAL)
                self.state = 1811
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==146 or _la==150):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [275]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1812
                localctx.Name = self.match(HqlParser.YAXIS)
                self.state = 1813
                self.match(HqlParser.EQUAL)
                self.state = 1814
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==146 or _la==150):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1815
                localctx.Name = self.match(HqlParser.LEGEND)
                self.state = 1816
                self.match(HqlParser.EQUAL)
                self.state = 1817
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==113 or _la==260):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [279]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1818
                localctx.Name = self.match(HqlParser.YSPLIT)
                self.state = 1819
                self.match(HqlParser.EQUAL)
                self.state = 1820
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==50 or _la==163 or _la==194):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1821
                localctx.Name = self.match(HqlParser.ACCUMULATE)
                self.state = 1822
                self.match(HqlParser.EQUAL)
                self.state = 1823
                localctx.BoolValue = self.match(HqlParser.BOOLEANLITERAL)
                pass
            elif token in [278]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1824
                localctx.Name = self.match(HqlParser.YMIN)
                self.state = 1825
                self.match(HqlParser.EQUAL)
                self.state = 1826
                localctx.NumberValue = self.numericLiteralExpression()
                pass
            elif token in [277]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1827
                localctx.Name = self.match(HqlParser.YMAX)
                self.state = 1828
                self.match(HqlParser.EQUAL)
                self.state = 1829
                localctx.NumberValue = self.numericLiteralExpression()
                pass
            elif token in [273]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1830
                localctx.Name = self.match(HqlParser.XMIN)
                self.state = 1831
                self.match(HqlParser.EQUAL)
                self.state = 1832
                localctx.LiteralValue = self.literalExpression()
                pass
            elif token in [272]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1833
                localctx.Name = self.match(HqlParser.XMAX)
                self.state = 1834
                self.match(HqlParser.EQUAL)
                self.state = 1835
                localctx.LiteralValue = self.literalExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenderPropertyNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._extendedNameReference = None # ExtendedNameReferenceContext
            self.Names = list() # of ExtendedNameReferenceContexts

        def extendedNameReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.ExtendedNameReferenceContext)
            else:
                return self.getTypedRuleContext(HqlParser.ExtendedNameReferenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_renderPropertyNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenderPropertyNameList" ):
                listener.enterRenderPropertyNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenderPropertyNameList" ):
                listener.exitRenderPropertyNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenderPropertyNameList" ):
                return visitor.visitRenderPropertyNameList(self)
            else:
                return visitor.visitChildren(self)




    def renderPropertyNameList(self):

        localctx = HqlParser.RenderPropertyNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_renderPropertyNameList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1838
            localctx._extendedNameReference = self.extendedNameReference()
            localctx.Names.append(localctx._extendedNameReference)
            self.state = 1843
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1839
                    self.match(HqlParser.COMMA)
                    self.state = 1840
                    localctx._extendedNameReference = self.extendedNameReference()
                    localctx.Names.append(localctx._extendedNameReference) 
                self.state = 1845
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenderOperatorLegacyPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # Token
            self.StringValue = None # StringLiteralExpressionContext
            self.TokenValue = None # Token
            self.NameListValue = None # RenderPropertyNameListContext
            self.BoolValue = None # Token

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def TITLE(self):
            return self.getToken(HqlParser.TITLE, 0)

        def stringLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.StringLiteralExpressionContext,0)


        def KIND(self):
            return self.getToken(HqlParser.KIND, 0)

        def DEFAULT(self):
            return self.getToken(HqlParser.DEFAULT, 0)

        def UNSTACKED(self):
            return self.getToken(HqlParser.UNSTACKED, 0)

        def STACKED(self):
            return self.getToken(HqlParser.STACKED, 0)

        def STACKED100(self):
            return self.getToken(HqlParser.STACKED100, 0)

        def MAP(self):
            return self.getToken(HqlParser.MAP, 0)

        def WITH(self):
            return self.getToken(HqlParser.WITH, 0)

        def BY(self):
            return self.getToken(HqlParser.BY, 0)

        def renderPropertyNameList(self):
            return self.getTypedRuleContext(HqlParser.RenderPropertyNameListContext,0)


        def ACCUMULATE(self):
            return self.getToken(HqlParser.ACCUMULATE, 0)

        def BOOLEANLITERAL(self):
            return self.getToken(HqlParser.BOOLEANLITERAL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_renderOperatorLegacyProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenderOperatorLegacyProperty" ):
                listener.enterRenderOperatorLegacyProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenderOperatorLegacyProperty" ):
                listener.exitRenderOperatorLegacyProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenderOperatorLegacyProperty" ):
                return visitor.visitRenderOperatorLegacyProperty(self)
            else:
                return visitor.visitChildren(self)




    def renderOperatorLegacyProperty(self):

        localctx = HqlParser.RenderOperatorLegacyPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_renderOperatorLegacyProperty)
        self._la = 0 # Token type
        try:
            self.state = 1859
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [246]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1846
                localctx.Name = self.match(HqlParser.TITLE)
                self.state = 1847
                self.match(HqlParser.EQUAL)
                self.state = 1848
                localctx.StringValue = self.stringLiteralExpression()
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1849
                localctx.Name = self.match(HqlParser.KIND)
                self.state = 1850
                self.match(HqlParser.EQUAL)
                self.state = 1851
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==74 or _la==154 or ((((_la - 233)) & ~0x3f) == 0 and ((1 << (_la - 233)) & 16777219) != 0)):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [262]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1852
                localctx.Name = self.match(HqlParser.WITH)
                self.state = 1853
                localctx.StringValue = self.stringLiteralExpression()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1854
                localctx.Name = self.match(HqlParser.BY)
                self.state = 1855
                localctx.NameListValue = self.renderPropertyNameList()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1856
                localctx.Name = self.match(HqlParser.ACCUMULATE)
                self.state = 1857
                self.match(HqlParser.EQUAL)
                self.state = 1858
                localctx.BoolValue = self.match(HqlParser.BOOLEANLITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleDistinctOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self.Expression = None # NamedExpressionContext
            self.OfExpression = None # NamedExpressionContext

        def SAMPLE_DISTINCT(self):
            return self.getToken(HqlParser.SAMPLE_DISTINCT, 0)

        def OF(self):
            return self.getToken(HqlParser.OF, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.NamedExpressionContext,i)


        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.StrictQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_sampleDistinctOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleDistinctOperator" ):
                listener.enterSampleDistinctOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleDistinctOperator" ):
                listener.exitSampleDistinctOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleDistinctOperator" ):
                return visitor.visitSampleDistinctOperator(self)
            else:
                return visitor.visitChildren(self)




    def sampleDistinctOperator(self):

        localctx = HqlParser.SampleDistinctOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_sampleDistinctOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1861
            self.match(HqlParser.SAMPLE_DISTINCT)
            self.state = 1865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223301650926338015) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 13) != 0):
                self.state = 1862
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 1867
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1868
            localctx.Expression = self.namedExpression()
            self.state = 1869
            self.match(HqlParser.OF)
            self.state = 1870
            localctx.OfExpression = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self.Expression = None # NamedExpressionContext

        def SAMPLE(self):
            return self.getToken(HqlParser.SAMPLE, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(HqlParser.NamedExpressionContext,0)


        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.StrictQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_sampleOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleOperator" ):
                listener.enterSampleOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleOperator" ):
                listener.exitSampleOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleOperator" ):
                return visitor.visitSampleOperator(self)
            else:
                return visitor.visitChildren(self)




    def sampleOperator(self):

        localctx = HqlParser.SampleOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_sampleOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1872
            self.match(HqlParser.SAMPLE)
            self.state = 1876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223301650926338015) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 13) != 0):
                self.state = 1873
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 1878
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1879
            localctx.Expression = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.OrderByClause = None # ScanOperatorOrderByClauseContext
            self.PartitionByClause = None # ScanOperatorPartitionByClauseContext
            self.DeclareClause = None # ScanOperatorDeclareClauseContext
            self._scanOperatorStep = None # ScanOperatorStepContext
            self.Steps = list() # of ScanOperatorStepContexts

        def SCAN(self):
            return self.getToken(HqlParser.SCAN, 0)

        def WITH(self):
            return self.getToken(HqlParser.WITH, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def scanOperatorOrderByClause(self):
            return self.getTypedRuleContext(HqlParser.ScanOperatorOrderByClauseContext,0)


        def scanOperatorPartitionByClause(self):
            return self.getTypedRuleContext(HqlParser.ScanOperatorPartitionByClauseContext,0)


        def scanOperatorDeclareClause(self):
            return self.getTypedRuleContext(HqlParser.ScanOperatorDeclareClauseContext,0)


        def scanOperatorStep(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.ScanOperatorStepContext)
            else:
                return self.getTypedRuleContext(HqlParser.ScanOperatorStepContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_scanOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperator" ):
                listener.enterScanOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperator" ):
                listener.exitScanOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanOperator" ):
                return visitor.visitScanOperator(self)
            else:
                return visitor.visitChildren(self)




    def scanOperator(self):

        localctx = HqlParser.ScanOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_scanOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1881
            self.match(HqlParser.SCAN)
            self.state = 1885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223372019670515679) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 36028797018963981) != 0):
                self.state = 1882
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1887
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 1888
                localctx.OrderByClause = self.scanOperatorOrderByClause()


            self.state = 1892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==198:
                self.state = 1891
                localctx.PartitionByClause = self.scanOperatorPartitionByClause()


            self.state = 1895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 1894
                localctx.DeclareClause = self.scanOperatorDeclareClause()


            self.state = 1897
            self.match(HqlParser.WITH)
            self.state = 1898
            self.match(HqlParser.OPENPAREN)
            self.state = 1900 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1899
                localctx._scanOperatorStep = self.scanOperatorStep()
                localctx.Steps.append(localctx._scanOperatorStep)
                self.state = 1902 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==238):
                    break

            self.state = 1904
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._orderedExpression = None # OrderedExpressionContext
            self.Expressions = list() # of OrderedExpressionContexts

        def ORDER(self):
            return self.getToken(HqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(HqlParser.BY, 0)

        def orderedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.OrderedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.OrderedExpressionContext,i)


        def COMMA(self):
            return self.getToken(HqlParser.COMMA, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_scanOperatorOrderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorOrderByClause" ):
                listener.enterScanOperatorOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorOrderByClause" ):
                listener.exitScanOperatorOrderByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanOperatorOrderByClause" ):
                return visitor.visitScanOperatorOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def scanOperatorOrderByClause(self):

        localctx = HqlParser.ScanOperatorOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_scanOperatorOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1906
            self.match(HqlParser.ORDER)
            self.state = 1907
            self.match(HqlParser.BY)
            self.state = 1908
            localctx._orderedExpression = self.orderedExpression()
            localctx.Expressions.append(localctx._orderedExpression)

            self.state = 1909
            self.match(HqlParser.COMMA)
            self.state = 1910
            localctx._orderedExpression = self.orderedExpression()
            localctx.Expressions.append(localctx._orderedExpression)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorPartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unnamedExpression = None # UnnamedExpressionContext
            self.Expressions = list() # of UnnamedExpressionContexts

        def PARTITION(self):
            return self.getToken(HqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(HqlParser.BY, 0)

        def unnamedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.UnnamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_scanOperatorPartitionByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorPartitionByClause" ):
                listener.enterScanOperatorPartitionByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorPartitionByClause" ):
                listener.exitScanOperatorPartitionByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanOperatorPartitionByClause" ):
                return visitor.visitScanOperatorPartitionByClause(self)
            else:
                return visitor.visitChildren(self)




    def scanOperatorPartitionByClause(self):

        localctx = HqlParser.ScanOperatorPartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_scanOperatorPartitionByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1912
            self.match(HqlParser.PARTITION)
            self.state = 1913
            self.match(HqlParser.BY)
            self.state = 1914
            localctx._unnamedExpression = self.unnamedExpression()
            localctx.Expressions.append(localctx._unnamedExpression)
            self.state = 1919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1915
                self.match(HqlParser.COMMA)
                self.state = 1916
                localctx._unnamedExpression = self.unnamedExpression()
                localctx.Expressions.append(localctx._unnamedExpression)
                self.state = 1921
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorDeclareClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._scalarParameter = None # ScalarParameterContext
            self.Parameters = list() # of ScalarParameterContexts

        def DECLARE(self):
            return self.getToken(HqlParser.DECLARE, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def scalarParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.ScalarParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.ScalarParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_scanOperatorDeclareClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorDeclareClause" ):
                listener.enterScanOperatorDeclareClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorDeclareClause" ):
                listener.exitScanOperatorDeclareClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanOperatorDeclareClause" ):
                return visitor.visitScanOperatorDeclareClause(self)
            else:
                return visitor.visitChildren(self)




    def scanOperatorDeclareClause(self):

        localctx = HqlParser.ScanOperatorDeclareClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_scanOperatorDeclareClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1922
            self.match(HqlParser.DECLARE)
            self.state = 1923
            self.match(HqlParser.OPENPAREN)
            self.state = 1924
            localctx._scalarParameter = self.scalarParameter()
            localctx.Parameters.append(localctx._scalarParameter)
            self.state = 1929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1925
                self.match(HqlParser.COMMA)
                self.state = 1926
                localctx._scalarParameter = self.scalarParameter()
                localctx.Parameters.append(localctx._scalarParameter)
                self.state = 1931
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1932
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorStepContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.OutputClause = None # ScanOperatorStepOutputClauseContext
            self.Expression = None # UnnamedExpressionContext
            self.Body = None # ScanOperatorBodyContext

        def STEP(self):
            return self.getToken(HqlParser.STEP, 0)

        def COLON(self):
            return self.getToken(HqlParser.COLON, 0)

        def SEMICOLON(self):
            return self.getToken(HqlParser.SEMICOLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(HqlParser.ParameterNameContext,0)


        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def OPTIONAL(self):
            return self.getToken(HqlParser.OPTIONAL, 0)

        def scanOperatorStepOutputClause(self):
            return self.getTypedRuleContext(HqlParser.ScanOperatorStepOutputClauseContext,0)


        def scanOperatorBody(self):
            return self.getTypedRuleContext(HqlParser.ScanOperatorBodyContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_scanOperatorStep

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorStep" ):
                listener.enterScanOperatorStep(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorStep" ):
                listener.exitScanOperatorStep(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanOperatorStep" ):
                return visitor.visitScanOperatorStep(self)
            else:
                return visitor.visitChildren(self)




    def scanOperatorStep(self):

        localctx = HqlParser.ScanOperatorStepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_scanOperatorStep)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1934
            self.match(HqlParser.STEP)
            self.state = 1935
            localctx.Name = self.parameterName()
            self.state = 1937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188:
                self.state = 1936
                self.match(HqlParser.OPTIONAL)


            self.state = 1940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192:
                self.state = 1939
                localctx.OutputClause = self.scanOperatorStepOutputClause()


            self.state = 1942
            self.match(HqlParser.COLON)
            self.state = 1943
            localctx.Expression = self.unnamedExpression()
            self.state = 1945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 1944
                localctx.Body = self.scanOperatorBody()


            self.state = 1947
            self.match(HqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorStepOutputClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OutputKind = None # Token

        def OUTPUT(self):
            return self.getToken(HqlParser.OUTPUT, 0)

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def ALL(self):
            return self.getToken(HqlParser.ALL, 0)

        def LAST(self):
            return self.getToken(HqlParser.LAST, 0)

        def NONE(self):
            return self.getToken(HqlParser.NONE, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_scanOperatorStepOutputClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorStepOutputClause" ):
                listener.enterScanOperatorStepOutputClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorStepOutputClause" ):
                listener.exitScanOperatorStepOutputClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanOperatorStepOutputClause" ):
                return visitor.visitScanOperatorStepOutputClause(self)
            else:
                return visitor.visitChildren(self)




    def scanOperatorStepOutputClause(self):

        localctx = HqlParser.ScanOperatorStepOutputClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_scanOperatorStepOutputClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1949
            self.match(HqlParser.OUTPUT)
            self.state = 1950
            self.match(HqlParser.EQUAL)
            self.state = 1951
            localctx.OutputKind = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==42 or _la==140 or _la==163):
                localctx.OutputKind = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._scanOperatorAssignment = None # ScanOperatorAssignmentContext
            self.Assignments = list() # of ScanOperatorAssignmentContexts

        def EQUAL_GREATERTHAN(self):
            return self.getToken(HqlParser.EQUAL_GREATERTHAN, 0)

        def scanOperatorAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.ScanOperatorAssignmentContext)
            else:
                return self.getTypedRuleContext(HqlParser.ScanOperatorAssignmentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_scanOperatorBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorBody" ):
                listener.enterScanOperatorBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorBody" ):
                listener.exitScanOperatorBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanOperatorBody" ):
                return visitor.visitScanOperatorBody(self)
            else:
                return visitor.visitChildren(self)




    def scanOperatorBody(self):

        localctx = HqlParser.ScanOperatorBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_scanOperatorBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            self.match(HqlParser.EQUAL_GREATERTHAN)
            self.state = 1954
            localctx._scanOperatorAssignment = self.scanOperatorAssignment()
            localctx.Assignments.append(localctx._scanOperatorAssignment)
            self.state = 1959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1955
                self.match(HqlParser.COMMA)
                self.state = 1956
                localctx._scanOperatorAssignment = self.scanOperatorAssignment()
                localctx.Assignments.append(localctx._scanOperatorAssignment)
                self.state = 1961
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.Expression = None # UnnamedExpressionContext

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def parameterName(self):
            return self.getTypedRuleContext(HqlParser.ParameterNameContext,0)


        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_scanOperatorAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorAssignment" ):
                listener.enterScanOperatorAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorAssignment" ):
                listener.exitScanOperatorAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanOperatorAssignment" ):
                return visitor.visitScanOperatorAssignment(self)
            else:
                return visitor.visitChildren(self)




    def scanOperatorAssignment(self):

        localctx = HqlParser.ScanOperatorAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_scanOperatorAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1962
            localctx.Name = self.parameterName()
            self.state = 1963
            self.match(HqlParser.EQUAL)
            self.state = 1964
            localctx.Expression = self.unnamedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SearchOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.DataScope = None # DataScopeClauseContext
            self.InClause = None # SearchOperatorInClauseContext
            self.Expression = None # UnnamedExpressionContext
            self.Star = None # StarExpressionContext
            self.StarAndExpression = None # SearchOperatorStarAndExpressionContext

        def SEARCH(self):
            return self.getToken(HqlParser.SEARCH, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def starExpression(self):
            return self.getTypedRuleContext(HqlParser.StarExpressionContext,0)


        def searchOperatorStarAndExpression(self):
            return self.getTypedRuleContext(HqlParser.SearchOperatorStarAndExpressionContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def dataScopeClause(self):
            return self.getTypedRuleContext(HqlParser.DataScopeClauseContext,0)


        def searchOperatorInClause(self):
            return self.getTypedRuleContext(HqlParser.SearchOperatorInClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_searchOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchOperator" ):
                listener.enterSearchOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchOperator" ):
                listener.exitSearchOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchOperator" ):
                return visitor.visitSearchOperator(self)
            else:
                return visitor.visitChildren(self)




    def searchOperator(self):

        localctx = HqlParser.SearchOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_searchOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1966
            self.match(HqlParser.SEARCH)
            self.state = 1970
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1967
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1972
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

            self.state = 1974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 1973
                localctx.DataScope = self.dataScopeClause()


            self.state = 1977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 1976
                localctx.InClause = self.searchOperatorInClause()


            self.state = 1982
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1979
                localctx.Expression = self.unnamedExpression()
                pass

            elif la_ == 2:
                self.state = 1980
                localctx.Star = self.starExpression()
                pass

            elif la_ == 3:
                self.state = 1981
                localctx.StarAndExpression = self.searchOperatorStarAndExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SearchOperatorStarAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # UnnamedExpressionContext

        def ASTERISK(self):
            return self.getToken(HqlParser.ASTERISK, 0)

        def AND(self):
            return self.getToken(HqlParser.AND, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_searchOperatorStarAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchOperatorStarAndExpression" ):
                listener.enterSearchOperatorStarAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchOperatorStarAndExpression" ):
                listener.exitSearchOperatorStarAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchOperatorStarAndExpression" ):
                return visitor.visitSearchOperatorStarAndExpression(self)
            else:
                return visitor.visitChildren(self)




    def searchOperatorStarAndExpression(self):

        localctx = HqlParser.SearchOperatorStarAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_searchOperatorStarAndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1984
            self.match(HqlParser.ASTERISK)
            self.state = 1985
            self.match(HqlParser.AND)
            self.state = 1986
            localctx.Expression = self.unnamedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SearchOperatorInClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._findOperatorSource = None # FindOperatorSourceContext
            self.Expressions = list() # of FindOperatorSourceContexts

        def IN(self):
            return self.getToken(HqlParser.IN, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def findOperatorSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.FindOperatorSourceContext)
            else:
                return self.getTypedRuleContext(HqlParser.FindOperatorSourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_searchOperatorInClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchOperatorInClause" ):
                listener.enterSearchOperatorInClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchOperatorInClause" ):
                listener.exitSearchOperatorInClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchOperatorInClause" ):
                return visitor.visitSearchOperatorInClause(self)
            else:
                return visitor.visitChildren(self)




    def searchOperatorInClause(self):

        localctx = HqlParser.SearchOperatorInClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_searchOperatorInClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1988
            self.match(HqlParser.IN)
            self.state = 1989
            self.match(HqlParser.OPENPAREN)
            self.state = 1990
            localctx._findOperatorSource = self.findOperatorSource()
            localctx.Expressions.append(localctx._findOperatorSource)
            self.state = 1995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1991
                self.match(HqlParser.COMMA)
                self.state = 1992
                localctx._findOperatorSource = self.findOperatorSource()
                localctx.Expressions.append(localctx._findOperatorSource)
                self.state = 1997
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1998
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SerializeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def SERIALIZE(self):
            return self.getToken(HqlParser.SERIALIZE, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.StrictQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_serializeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSerializeOperator" ):
                listener.enterSerializeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSerializeOperator" ):
                listener.exitSerializeOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSerializeOperator" ):
                return visitor.visitSerializeOperator(self)
            else:
                return visitor.visitChildren(self)




    def serializeOperator(self):

        localctx = HqlParser.SerializeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_serializeOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2000
            self.match(HqlParser.SERIALIZE)
            self.state = 2004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223301650926338015) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 13) != 0):
                self.state = 2001
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 2006
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2007
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 2012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 2008
                self.match(HqlParser.COMMA)
                self.state = 2009
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 2014
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self._orderedExpression = None # OrderedExpressionContext
            self.Expressions = list() # of OrderedExpressionContexts

        def BY(self):
            return self.getToken(HqlParser.BY, 0)

        def orderedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.OrderedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.OrderedExpressionContext,i)


        def SORT(self):
            return self.getToken(HqlParser.SORT, 0)

        def ORDER(self):
            return self.getToken(HqlParser.ORDER, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_sortOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortOperator" ):
                listener.enterSortOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortOperator" ):
                listener.exitSortOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortOperator" ):
                return visitor.visitSortOperator(self)
            else:
                return visitor.visitChildren(self)




    def sortOperator(self):

        localctx = HqlParser.SortOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_sortOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2015
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==190 or _la==231):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223372019670515679) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 36028797018963981) != 0):
                self.state = 2016
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 2021
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2022
            self.match(HqlParser.BY)
            self.state = 2023
            localctx._orderedExpression = self.orderedExpression()
            localctx.Expressions.append(localctx._orderedExpression)
            self.state = 2028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 2024
                self.match(HqlParser.COMMA)
                self.state = 2025
                localctx._orderedExpression = self.orderedExpression()
                localctx.Expressions.append(localctx._orderedExpression)
                self.state = 2030
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext
            self.Ordering = None # SortOrderingContext

        def namedExpression(self):
            return self.getTypedRuleContext(HqlParser.NamedExpressionContext,0)


        def sortOrdering(self):
            return self.getTypedRuleContext(HqlParser.SortOrderingContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_orderedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedExpression" ):
                listener.enterOrderedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedExpression" ):
                listener.exitOrderedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedExpression" ):
                return visitor.visitOrderedExpression(self)
            else:
                return visitor.visitChildren(self)




    def orderedExpression(self):

        localctx = HqlParser.OrderedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_orderedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2031
            localctx.Expression = self.namedExpression()
            self.state = 2032
            localctx.Ordering = self.sortOrdering()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortOrderingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OrderKind = None # Token
            self.NullsKind = None # Token

        def NULLS(self):
            return self.getToken(HqlParser.NULLS, 0)

        def ASC(self):
            return self.getToken(HqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(HqlParser.DESC, 0)

        def FIRST(self):
            return self.getToken(HqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(HqlParser.LAST, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_sortOrdering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortOrdering" ):
                listener.enterSortOrdering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortOrdering" ):
                listener.exitSortOrdering(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortOrdering" ):
                return visitor.visitSortOrdering(self)
            else:
                return visitor.visitChildren(self)




    def sortOrdering(self):

        localctx = HqlParser.SortOrderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_sortOrdering)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or _la==76:
                self.state = 2034
                localctx.OrderKind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==48 or _la==76):
                    localctx.OrderKind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==185:
                self.state = 2037
                self.match(HqlParser.NULLS)
                self.state = 2038
                localctx.NullsKind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==92 or _la==140):
                    localctx.NullsKind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SummarizeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts
            self.ByClause = None # SummarizeOperatorByClauseContext

        def SUMMARIZE(self):
            return self.getToken(HqlParser.SUMMARIZE, 0)

        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.StrictQueryOperatorParameterContext,i)


        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.NamedExpressionContext,i)


        def summarizeOperatorByClause(self):
            return self.getTypedRuleContext(HqlParser.SummarizeOperatorByClauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_summarizeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSummarizeOperator" ):
                listener.enterSummarizeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSummarizeOperator" ):
                listener.exitSummarizeOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSummarizeOperator" ):
                return visitor.visitSummarizeOperator(self)
            else:
                return visitor.visitChildren(self)




    def summarizeOperator(self):

        localctx = HqlParser.SummarizeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_summarizeOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2041
            self.match(HqlParser.SUMMARIZE)
            self.state = 2045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223301650926338015) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 13) != 0):
                self.state = 2042
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 2047
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2056
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 2048
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 2053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 2049
                    self.match(HqlParser.COMMA)
                    self.state = 2050
                    localctx._namedExpression = self.namedExpression()
                    localctx.Expressions.append(localctx._namedExpression)
                    self.state = 2055
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 2058
                localctx.ByClause = self.summarizeOperatorByClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SummarizeOperatorByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts
            self.BinClause = None # SummarizeOperatorLegacyBinClauseContext

        def BY(self):
            return self.getToken(HqlParser.BY, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def summarizeOperatorLegacyBinClause(self):
            return self.getTypedRuleContext(HqlParser.SummarizeOperatorLegacyBinClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_summarizeOperatorByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSummarizeOperatorByClause" ):
                listener.enterSummarizeOperatorByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSummarizeOperatorByClause" ):
                listener.exitSummarizeOperatorByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSummarizeOperatorByClause" ):
                return visitor.visitSummarizeOperatorByClause(self)
            else:
                return visitor.visitChildren(self)




    def summarizeOperatorByClause(self):

        localctx = HqlParser.SummarizeOperatorByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_summarizeOperatorByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2061
            self.match(HqlParser.BY)
            self.state = 2062
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 2067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 2063
                self.match(HqlParser.COMMA)
                self.state = 2064
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 2069
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 2070
                localctx.BinClause = self.summarizeOperatorLegacyBinClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SummarizeOperatorLegacyBinClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NumberLikeLiteralExpressionContext

        def BIN(self):
            return self.getToken(HqlParser.BIN, 0)

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def numberLikeLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.NumberLikeLiteralExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_summarizeOperatorLegacyBinClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSummarizeOperatorLegacyBinClause" ):
                listener.enterSummarizeOperatorLegacyBinClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSummarizeOperatorLegacyBinClause" ):
                listener.exitSummarizeOperatorLegacyBinClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSummarizeOperatorLegacyBinClause" ):
                return visitor.visitSummarizeOperatorLegacyBinClause(self)
            else:
                return visitor.visitChildren(self)




    def summarizeOperatorLegacyBinClause(self):

        localctx = HqlParser.SummarizeOperatorLegacyBinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_summarizeOperatorLegacyBinClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2073
            self.match(HqlParser.BIN)
            self.state = 2074
            self.match(HqlParser.EQUAL)
            self.state = 2075
            localctx.Expression = self.numberLikeLiteralExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TakeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self.Limit = None # UnnamedExpressionContext
            self._tableNameReference = None # TableNameReferenceContext
            self.Tables = list() # of TableNameReferenceContexts

        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def LIMIT(self):
            return self.getToken(HqlParser.LIMIT, 0)

        def TAKE(self):
            return self.getToken(HqlParser.TAKE, 0)

        def FROM(self):
            return self.getToken(HqlParser.FROM, 0)

        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.StrictQueryOperatorParameterContext,i)


        def tableNameReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.TableNameReferenceContext)
            else:
                return self.getTypedRuleContext(HqlParser.TableNameReferenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_takeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTakeOperator" ):
                listener.enterTakeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTakeOperator" ):
                listener.exitTakeOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTakeOperator" ):
                return visitor.visitTakeOperator(self)
            else:
                return visitor.visitChildren(self)




    def takeOperator(self):

        localctx = HqlParser.TakeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_takeOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2077
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==145 or _la==241):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223301650926338015) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 13) != 0):
                self.state = 2078
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 2083
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2084
            localctx.Limit = self.unnamedExpression()
            self.state = 2094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 2085
                self.match(HqlParser.FROM)
                self.state = 2086
                localctx._tableNameReference = self.tableNameReference()
                localctx.Tables.append(localctx._tableNameReference)
                self.state = 2091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 2087
                    self.match(HqlParser.COMMA)
                    self.state = 2088
                    localctx._tableNameReference = self.tableNameReference()
                    localctx.Tables.append(localctx._tableNameReference)
                    self.state = 2093
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self.Expression = None # NamedExpressionContext
            self.ByExpression = None # OrderedExpressionContext

        def TOP(self):
            return self.getToken(HqlParser.TOP, 0)

        def BY(self):
            return self.getToken(HqlParser.BY, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(HqlParser.NamedExpressionContext,0)


        def orderedExpression(self):
            return self.getTypedRuleContext(HqlParser.OrderedExpressionContext,0)


        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.StrictQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_topOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopOperator" ):
                listener.enterTopOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopOperator" ):
                listener.exitTopOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopOperator" ):
                return visitor.visitTopOperator(self)
            else:
                return visitor.visitChildren(self)




    def topOperator(self):

        localctx = HqlParser.TopOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_topOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2096
            self.match(HqlParser.TOP)
            self.state = 2100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223301650926338015) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 13) != 0):
                self.state = 2097
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 2102
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2103
            localctx.Expression = self.namedExpression()
            self.state = 2104
            self.match(HqlParser.BY)
            self.state = 2105
            localctx.ByExpression = self.orderedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopHittersOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext
            self.OfExpression = None # NamedExpressionContext
            self.ByClause = None # TopHittersOperatorByClauseContext

        def TOP_HITTERS(self):
            return self.getToken(HqlParser.TOP_HITTERS, 0)

        def OF(self):
            return self.getToken(HqlParser.OF, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.NamedExpressionContext,i)


        def topHittersOperatorByClause(self):
            return self.getTypedRuleContext(HqlParser.TopHittersOperatorByClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_topHittersOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopHittersOperator" ):
                listener.enterTopHittersOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopHittersOperator" ):
                listener.exitTopHittersOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopHittersOperator" ):
                return visitor.visitTopHittersOperator(self)
            else:
                return visitor.visitChildren(self)




    def topHittersOperator(self):

        localctx = HqlParser.TopHittersOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_topHittersOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2107
            self.match(HqlParser.TOP_HITTERS)
            self.state = 2108
            localctx.Expression = self.namedExpression()
            self.state = 2109
            self.match(HqlParser.OF)
            self.state = 2110
            localctx.OfExpression = self.namedExpression()
            self.state = 2112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 2111
                localctx.ByClause = self.topHittersOperatorByClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopHittersOperatorByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ByExpression = None # OrderedExpressionContext

        def BY(self):
            return self.getToken(HqlParser.BY, 0)

        def orderedExpression(self):
            return self.getTypedRuleContext(HqlParser.OrderedExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_topHittersOperatorByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopHittersOperatorByClause" ):
                listener.enterTopHittersOperatorByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopHittersOperatorByClause" ):
                listener.exitTopHittersOperatorByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopHittersOperatorByClause" ):
                return visitor.visitTopHittersOperatorByClause(self)
            else:
                return visitor.visitChildren(self)




    def topHittersOperatorByClause(self):

        localctx = HqlParser.TopHittersOperatorByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_topHittersOperatorByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2114
            self.match(HqlParser.BY)
            self.state = 2115
            localctx.ByExpression = self.orderedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopNestedOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._topNestedOperatorPart = None # TopNestedOperatorPartContext
            self.Segments = list() # of TopNestedOperatorPartContexts

        def topNestedOperatorPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.TopNestedOperatorPartContext)
            else:
                return self.getTypedRuleContext(HqlParser.TopNestedOperatorPartContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_topNestedOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopNestedOperator" ):
                listener.enterTopNestedOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopNestedOperator" ):
                listener.exitTopNestedOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopNestedOperator" ):
                return visitor.visitTopNestedOperator(self)
            else:
                return visitor.visitChildren(self)




    def topNestedOperator(self):

        localctx = HqlParser.TopNestedOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_topNestedOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2117
            localctx._topNestedOperatorPart = self.topNestedOperatorPart()
            localctx.Segments.append(localctx._topNestedOperatorPart)
            self.state = 2122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 2118
                self.match(HqlParser.COMMA)
                self.state = 2119
                localctx._topNestedOperatorPart = self.topNestedOperatorPart()
                localctx.Segments.append(localctx._topNestedOperatorPart)
                self.state = 2124
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopNestedOperatorPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext
            self.OfExpression = None # NamedExpressionContext
            self.WithOthers = None # TopNestedOperatorWithOthersClauseContext
            self.ByExpression = None # OrderedExpressionContext

        def TOP_NESTED(self):
            return self.getToken(HqlParser.TOP_NESTED, 0)

        def OF(self):
            return self.getToken(HqlParser.OF, 0)

        def BY(self):
            return self.getToken(HqlParser.BY, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.NamedExpressionContext,i)


        def orderedExpression(self):
            return self.getTypedRuleContext(HqlParser.OrderedExpressionContext,0)


        def topNestedOperatorWithOthersClause(self):
            return self.getTypedRuleContext(HqlParser.TopNestedOperatorWithOthersClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_topNestedOperatorPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopNestedOperatorPart" ):
                listener.enterTopNestedOperatorPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopNestedOperatorPart" ):
                listener.exitTopNestedOperatorPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopNestedOperatorPart" ):
                return visitor.visitTopNestedOperatorPart(self)
            else:
                return visitor.visitChildren(self)




    def topNestedOperatorPart(self):

        localctx = HqlParser.TopNestedOperatorPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_topNestedOperatorPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2125
            self.match(HqlParser.TOP_NESTED)
            self.state = 2127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 2126
                localctx.Expression = self.namedExpression()


            self.state = 2129
            self.match(HqlParser.OF)
            self.state = 2130
            localctx.OfExpression = self.namedExpression()
            self.state = 2132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==262:
                self.state = 2131
                localctx.WithOthers = self.topNestedOperatorWithOthersClause()


            self.state = 2134
            self.match(HqlParser.BY)
            self.state = 2135
            localctx.ByExpression = self.orderedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopNestedOperatorWithOthersClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext

        def WITH(self):
            return self.getToken(HqlParser.WITH, 0)

        def OTHERS(self):
            return self.getToken(HqlParser.OTHERS, 0)

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(HqlParser.NamedExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_topNestedOperatorWithOthersClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopNestedOperatorWithOthersClause" ):
                listener.enterTopNestedOperatorWithOthersClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopNestedOperatorWithOthersClause" ):
                listener.exitTopNestedOperatorWithOthersClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopNestedOperatorWithOthersClause" ):
                return visitor.visitTopNestedOperatorWithOthersClause(self)
            else:
                return visitor.visitChildren(self)




    def topNestedOperatorWithOthersClause(self):

        localctx = HqlParser.TopNestedOperatorWithOthersClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_topNestedOperatorWithOthersClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2137
            self.match(HqlParser.WITH)
            self.state = 2138
            self.match(HqlParser.OTHERS)
            self.state = 2139
            self.match(HqlParser.EQUAL)
            self.state = 2140
            localctx.Expression = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self._unionOperatorExpression = None # UnionOperatorExpressionContext
            self.Expressions = list() # of UnionOperatorExpressionContexts

        def UNION(self):
            return self.getToken(HqlParser.UNION, 0)

        def unionOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.UnionOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.UnionOperatorExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_unionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionOperator" ):
                listener.enterUnionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionOperator" ):
                listener.exitUnionOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionOperator" ):
                return visitor.visitUnionOperator(self)
            else:
                return visitor.visitChildren(self)




    def unionOperator(self):

        localctx = HqlParser.UnionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_unionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2142
            self.match(HqlParser.UNION)
            self.state = 2146
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,183,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2143
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 2148
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,183,self._ctx)

            self.state = 2149
            localctx._unionOperatorExpression = self.unionOperatorExpression()
            localctx.Expressions.append(localctx._unionOperatorExpression)
            self.state = 2154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 2150
                self.match(HqlParser.COMMA)
                self.state = 2151
                localctx._unionOperatorExpression = self.unionOperatorExpression()
                localctx.Expressions.append(localctx._unionOperatorExpression)
                self.state = 2156
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wildcardedEntityExpression(self):
            return self.getTypedRuleContext(HqlParser.WildcardedEntityExpressionContext,0)


        def entityNameReference(self):
            return self.getTypedRuleContext(HqlParser.EntityNameReferenceContext,0)


        def parenthesizedExpression(self):
            return self.getTypedRuleContext(HqlParser.ParenthesizedExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_unionOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionOperatorExpression" ):
                listener.enterUnionOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionOperatorExpression" ):
                listener.exitUnionOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionOperatorExpression" ):
                return visitor.visitUnionOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def unionOperatorExpression(self):

        localctx = HqlParser.UnionOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_unionOperatorExpression)
        try:
            self.state = 2160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2157
                self.wildcardedEntityExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2158
                self.entityNameReference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2159
                self.parenthesizedExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self.Predicate = None # NamedExpressionContext

        def namedExpression(self):
            return self.getTypedRuleContext(HqlParser.NamedExpressionContext,0)


        def FILTER(self):
            return self.getToken(HqlParser.FILTER, 0)

        def WHERE(self):
            return self.getToken(HqlParser.WHERE, 0)

        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.StrictQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_whereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereOperator" ):
                listener.enterWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereOperator" ):
                listener.exitWhereOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereOperator" ):
                return visitor.visitWhereOperator(self)
            else:
                return visitor.visitChildren(self)




    def whereOperator(self):

        localctx = HqlParser.WhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_whereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2162
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==90 or _la==261):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223301650926338015) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 13) != 0):
                self.state = 2163
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 2168
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2169
            localctx.Predicate = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnnestOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Field = None # UnnamedExpressionContext
            self.OnClause = None # UnnestOperatorOnClauseContext

        def UNNEST(self):
            return self.getToken(HqlParser.UNNEST, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def unnestOperatorOnClause(self):
            return self.getTypedRuleContext(HqlParser.UnnestOperatorOnClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_unnestOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnestOperator" ):
                listener.enterUnnestOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnestOperator" ):
                listener.exitUnnestOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnnestOperator" ):
                return visitor.visitUnnestOperator(self)
            else:
                return visitor.visitChildren(self)




    def unnestOperator(self):

        localctx = HqlParser.UnnestOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_unnestOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2171
            self.match(HqlParser.UNNEST)
            self.state = 2172
            localctx.Field = self.unnamedExpression()
            self.state = 2174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==187:
                self.state = 2173
                localctx.OnClause = self.unnestOperatorOnClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnnestOperatorOnClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._tableNameReference = None # TableNameReferenceContext
            self.Expressions = list() # of TableNameReferenceContexts

        def ON(self):
            return self.getToken(HqlParser.ON, 0)

        def tableNameReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.TableNameReferenceContext)
            else:
                return self.getTypedRuleContext(HqlParser.TableNameReferenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_unnestOperatorOnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnestOperatorOnClause" ):
                listener.enterUnnestOperatorOnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnestOperatorOnClause" ):
                listener.exitUnnestOperatorOnClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnnestOperatorOnClause" ):
                return visitor.visitUnnestOperatorOnClause(self)
            else:
                return visitor.visitChildren(self)




    def unnestOperatorOnClause(self):

        localctx = HqlParser.UnnestOperatorOnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_unnestOperatorOnClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2176
            self.match(HqlParser.ON)
            self.state = 2185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416123978121218) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -1729240968798725271) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 7196752211023416333) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & -3749008268648248231) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 4611686019509516303) != 0):
                self.state = 2177
                localctx._tableNameReference = self.tableNameReference()
                localctx.Expressions.append(localctx._tableNameReference)
                self.state = 2182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 2178
                    self.match(HqlParser.COMMA)
                    self.state = 2179
                    localctx._tableNameReference = self.tableNameReference()
                    localctx.Expressions.append(localctx._tableNameReference)
                    self.state = 2184
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextualSubExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pipeSubExpression(self):
            return self.getTypedRuleContext(HqlParser.PipeSubExpressionContext,0)


        def contextualPipeExpression(self):
            return self.getTypedRuleContext(HqlParser.ContextualPipeExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_contextualSubExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextualSubExpression" ):
                listener.enterContextualSubExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextualSubExpression" ):
                listener.exitContextualSubExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContextualSubExpression" ):
                return visitor.visitContextualSubExpression(self)
            else:
                return visitor.visitChildren(self)




    def contextualSubExpression(self):

        localctx = HqlParser.ContextualSubExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_contextualSubExpression)
        try:
            self.state = 2189
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47, 49, 61, 66, 77, 82, 84, 86, 89, 90, 91, 94, 96, 100, 101, 102, 103, 104, 134, 137, 145, 149, 152, 153, 158, 159, 160, 161, 190, 195, 196, 197, 198, 199, 207, 208, 210, 211, 212, 216, 219, 222, 223, 224, 226, 227, 231, 239, 241, 248, 249, 250, 255, 256, 261]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2187
                self.pipeSubExpression()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2188
                self.contextualPipeExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextualPipeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ContextualDataTableExpressionContext
            self._contextualPipeExpressionPipedOperator = None # ContextualPipeExpressionPipedOperatorContext
            self.PipedOperators = list() # of ContextualPipeExpressionPipedOperatorContexts

        def contextualDataTableExpression(self):
            return self.getTypedRuleContext(HqlParser.ContextualDataTableExpressionContext,0)


        def contextualPipeExpressionPipedOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.ContextualPipeExpressionPipedOperatorContext)
            else:
                return self.getTypedRuleContext(HqlParser.ContextualPipeExpressionPipedOperatorContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_contextualPipeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextualPipeExpression" ):
                listener.enterContextualPipeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextualPipeExpression" ):
                listener.exitContextualPipeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContextualPipeExpression" ):
                return visitor.visitContextualPipeExpression(self)
            else:
                return visitor.visitChildren(self)




    def contextualPipeExpression(self):

        localctx = HqlParser.ContextualPipeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_contextualPipeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2191
            localctx.Expression = self.contextualDataTableExpression()
            self.state = 2195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 2192
                localctx._contextualPipeExpressionPipedOperator = self.contextualPipeExpressionPipedOperator()
                localctx.PipedOperators.append(localctx._contextualPipeExpressionPipedOperator)
                self.state = 2197
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextualPipeExpressionPipedOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # AfterPipeOperatorContext

        def BAR(self):
            return self.getToken(HqlParser.BAR, 0)

        def afterPipeOperator(self):
            return self.getTypedRuleContext(HqlParser.AfterPipeOperatorContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_contextualPipeExpressionPipedOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextualPipeExpressionPipedOperator" ):
                listener.enterContextualPipeExpressionPipedOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextualPipeExpressionPipedOperator" ):
                listener.exitContextualPipeExpressionPipedOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContextualPipeExpressionPipedOperator" ):
                return visitor.visitContextualPipeExpressionPipedOperator(self)
            else:
                return visitor.visitChildren(self)




    def contextualPipeExpressionPipedOperator(self):

        localctx = HqlParser.ContextualPipeExpressionPipedOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_contextualPipeExpressionPipedOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2198
            self.match(HqlParser.BAR)
            self.state = 2199
            localctx.Operator = self.afterPipeOperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictQueryOperatorParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.NameToken = None # Token
            self.NameValue = None # IdentifierOrKeywordNameContext
            self.LiteralValue = None # LiteralExpressionContext

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def BAGEXPANSION(self):
            return self.getToken(HqlParser.BAGEXPANSION, 0)

        def BIN_LEGACY(self):
            return self.getToken(HqlParser.BIN_LEGACY, 0)

        def CROSSCLUSTER__(self):
            return self.getToken(HqlParser.CROSSCLUSTER__, 0)

        def CROSSDB__(self):
            return self.getToken(HqlParser.CROSSDB__, 0)

        def DECODEBLOCKS(self):
            return self.getToken(HqlParser.DECODEBLOCKS, 0)

        def EXPANDOUTPUT(self):
            return self.getToken(HqlParser.EXPANDOUTPUT, 0)

        def HINT_CONCURRENCY(self):
            return self.getToken(HqlParser.HINT_CONCURRENCY, 0)

        def HINT_DISTRIBUTION(self):
            return self.getToken(HqlParser.HINT_DISTRIBUTION, 0)

        def HINT_MATERIALIZED(self):
            return self.getToken(HqlParser.HINT_MATERIALIZED, 0)

        def HINT_NUM_PARTITIONS(self):
            return self.getToken(HqlParser.HINT_NUM_PARTITIONS, 0)

        def HINT_PASS_FILTERS(self):
            return self.getToken(HqlParser.HINT_PASS_FILTERS, 0)

        def HINT_PASS_FILTERS_COLUMN(self):
            return self.getToken(HqlParser.HINT_PASS_FILTERS_COLUMN, 0)

        def HINT_PROGRESSIVE_TOP(self):
            return self.getToken(HqlParser.HINT_PROGRESSIVE_TOP, 0)

        def HINT_REMOTE(self):
            return self.getToken(HqlParser.HINT_REMOTE, 0)

        def HINT_SUFFLEKEY(self):
            return self.getToken(HqlParser.HINT_SUFFLEKEY, 0)

        def HINT_SPREAD(self):
            return self.getToken(HqlParser.HINT_SPREAD, 0)

        def HINT_STRATEGY(self):
            return self.getToken(HqlParser.HINT_STRATEGY, 0)

        def ISFUZZY(self):
            return self.getToken(HqlParser.ISFUZZY, 0)

        def ISFUZZY__(self):
            return self.getToken(HqlParser.ISFUZZY__, 0)

        def ID__(self):
            return self.getToken(HqlParser.ID__, 0)

        def KIND(self):
            return self.getToken(HqlParser.KIND, 0)

        def PACKEDCOLUMN__(self):
            return self.getToken(HqlParser.PACKEDCOLUMN__, 0)

        def SOURCECOLUMNINDEX__(self):
            return self.getToken(HqlParser.SOURCECOLUMNINDEX__, 0)

        def WITH_ITEM_INDEX(self):
            return self.getToken(HqlParser.WITH_ITEM_INDEX, 0)

        def WITH_MATCH_ID(self):
            return self.getToken(HqlParser.WITH_MATCH_ID, 0)

        def WITH_STEP_NAME(self):
            return self.getToken(HqlParser.WITH_STEP_NAME, 0)

        def WITHSOURCE(self):
            return self.getToken(HqlParser.WITHSOURCE, 0)

        def WITH_SOURCE(self):
            return self.getToken(HqlParser.WITH_SOURCE, 0)

        def WITHNOSOURCE__(self):
            return self.getToken(HqlParser.WITHNOSOURCE__, 0)

        def GLOBAL(self):
            return self.getToken(HqlParser.GLOBAL, 0)

        def identifierOrKeywordName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordNameContext,0)


        def literalExpression(self):
            return self.getTypedRuleContext(HqlParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_strictQueryOperatorParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrictQueryOperatorParameter" ):
                listener.enterStrictQueryOperatorParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrictQueryOperatorParameter" ):
                listener.exitStrictQueryOperatorParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrictQueryOperatorParameter" ):
                return visitor.visitStrictQueryOperatorParameter(self)
            else:
                return visitor.visitChildren(self)




    def strictQueryOperatorParameter(self):

        localctx = HqlParser.StrictQueryOperatorParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_strictQueryOperatorParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2201
            localctx.NameToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223301650926338015) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 13) != 0)):
                localctx.NameToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2202
            self.match(HqlParser.EQUAL)
            self.state = 2205
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 113, 125, 127, 128, 129, 133, 141, 142, 146, 148, 149, 150, 154, 162, 163, 184, 185, 187, 188, 192, 193, 198, 199, 201, 205, 214, 215, 216, 219, 220, 221, 228, 233, 234, 238, 242, 254, 257, 258, 259, 260, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 289, 321]:
                self.state = 2203
                localctx.NameValue = self.identifierOrKeywordName()
                pass
            elif token in [11, 33, 287, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320]:
                self.state = 2204
                localctx.LiteralValue = self.literalExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelaxedQueryOperatorParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.NameToken = None # Token
            self.NameValue = None # IdentifierOrKeywordNameContext
            self.LiteralValue = None # LiteralExpressionContext

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def IDENTIFIER(self):
            return self.getToken(HqlParser.IDENTIFIER, 0)

        def BAGEXPANSION(self):
            return self.getToken(HqlParser.BAGEXPANSION, 0)

        def BIN_LEGACY(self):
            return self.getToken(HqlParser.BIN_LEGACY, 0)

        def CROSSCLUSTER__(self):
            return self.getToken(HqlParser.CROSSCLUSTER__, 0)

        def CROSSDB__(self):
            return self.getToken(HqlParser.CROSSDB__, 0)

        def DECODEBLOCKS(self):
            return self.getToken(HqlParser.DECODEBLOCKS, 0)

        def EXPANDOUTPUT(self):
            return self.getToken(HqlParser.EXPANDOUTPUT, 0)

        def HINT_CONCURRENCY(self):
            return self.getToken(HqlParser.HINT_CONCURRENCY, 0)

        def HINT_DISTRIBUTION(self):
            return self.getToken(HqlParser.HINT_DISTRIBUTION, 0)

        def HINT_MATERIALIZED(self):
            return self.getToken(HqlParser.HINT_MATERIALIZED, 0)

        def HINT_NUM_PARTITIONS(self):
            return self.getToken(HqlParser.HINT_NUM_PARTITIONS, 0)

        def HINT_PASS_FILTERS(self):
            return self.getToken(HqlParser.HINT_PASS_FILTERS, 0)

        def HINT_PASS_FILTERS_COLUMN(self):
            return self.getToken(HqlParser.HINT_PASS_FILTERS_COLUMN, 0)

        def HINT_PROGRESSIVE_TOP(self):
            return self.getToken(HqlParser.HINT_PROGRESSIVE_TOP, 0)

        def HINT_REMOTE(self):
            return self.getToken(HqlParser.HINT_REMOTE, 0)

        def HINT_SUFFLEKEY(self):
            return self.getToken(HqlParser.HINT_SUFFLEKEY, 0)

        def HINT_SPREAD(self):
            return self.getToken(HqlParser.HINT_SPREAD, 0)

        def HINT_STRATEGY(self):
            return self.getToken(HqlParser.HINT_STRATEGY, 0)

        def ISFUZZY(self):
            return self.getToken(HqlParser.ISFUZZY, 0)

        def ISFUZZY__(self):
            return self.getToken(HqlParser.ISFUZZY__, 0)

        def ID__(self):
            return self.getToken(HqlParser.ID__, 0)

        def KIND(self):
            return self.getToken(HqlParser.KIND, 0)

        def PACKEDCOLUMN__(self):
            return self.getToken(HqlParser.PACKEDCOLUMN__, 0)

        def SOURCECOLUMNINDEX__(self):
            return self.getToken(HqlParser.SOURCECOLUMNINDEX__, 0)

        def WITH_ITEM_INDEX(self):
            return self.getToken(HqlParser.WITH_ITEM_INDEX, 0)

        def WITH_MATCH_ID(self):
            return self.getToken(HqlParser.WITH_MATCH_ID, 0)

        def WITH_STEP_NAME(self):
            return self.getToken(HqlParser.WITH_STEP_NAME, 0)

        def WITHSOURCE(self):
            return self.getToken(HqlParser.WITHSOURCE, 0)

        def WITH_SOURCE(self):
            return self.getToken(HqlParser.WITH_SOURCE, 0)

        def WITHNOSOURCE__(self):
            return self.getToken(HqlParser.WITHNOSOURCE__, 0)

        def identifierOrKeywordName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordNameContext,0)


        def literalExpression(self):
            return self.getTypedRuleContext(HqlParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_relaxedQueryOperatorParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelaxedQueryOperatorParameter" ):
                listener.enterRelaxedQueryOperatorParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelaxedQueryOperatorParameter" ):
                listener.exitRelaxedQueryOperatorParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelaxedQueryOperatorParameter" ):
                return visitor.visitRelaxedQueryOperatorParameter(self)
            else:
                return visitor.visitChildren(self)




    def relaxedQueryOperatorParameter(self):

        localctx = HqlParser.RelaxedQueryOperatorParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_relaxedQueryOperatorParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2207
            localctx.NameToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223372019670515679) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 36028797018963981) != 0)):
                localctx.NameToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2208
            self.match(HqlParser.EQUAL)
            self.state = 2211
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 113, 125, 127, 128, 129, 133, 141, 142, 146, 148, 149, 150, 154, 162, 163, 184, 185, 187, 188, 192, 193, 198, 199, 201, 205, 214, 215, 216, 219, 220, 221, 228, 233, 234, 238, 242, 254, 257, 258, 259, 260, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 289, 321]:
                self.state = 2209
                localctx.NameValue = self.identifierOrKeywordName()
                pass
            elif token in [11, 33, 287, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320]:
                self.state = 2210
                localctx.LiteralValue = self.literalExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryOperatorPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # Token
            self.NameValue = None # IdentifierOrKeywordNameContext
            self.LiteralValue = None # LiteralExpressionContext

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def IDENTIFIER(self):
            return self.getToken(HqlParser.IDENTIFIER, 0)

        def identifierOrKeywordName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordNameContext,0)


        def literalExpression(self):
            return self.getTypedRuleContext(HqlParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_queryOperatorProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryOperatorProperty" ):
                listener.enterQueryOperatorProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryOperatorProperty" ):
                listener.exitQueryOperatorProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryOperatorProperty" ):
                return visitor.visitQueryOperatorProperty(self)
            else:
                return visitor.visitChildren(self)




    def queryOperatorProperty(self):

        localctx = HqlParser.QueryOperatorPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_queryOperatorProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2213
            localctx.Name = self.match(HqlParser.IDENTIFIER)
            self.state = 2214
            self.match(HqlParser.EQUAL)
            self.state = 2217
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 113, 125, 127, 128, 129, 133, 141, 142, 146, 148, 149, 150, 154, 162, 163, 184, 185, 187, 188, 192, 193, 198, 199, 201, 205, 214, 215, 216, 219, 220, 221, 228, 233, 234, 238, 242, 254, 257, 258, 259, 260, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 289, 321]:
                self.state = 2215
                localctx.NameValue = self.identifierOrKeywordName()
                pass
            elif token in [11, 33, 287, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320]:
                self.state = 2216
                localctx.LiteralValue = self.literalExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # NamedExpressionNameClauseContext
            self.Expression = None # UnnamedExpressionContext

        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def namedExpressionNameClause(self):
            return self.getTypedRuleContext(HqlParser.NamedExpressionNameClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_namedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpression" ):
                listener.enterNamedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpression" ):
                listener.exitNamedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpression" ):
                return visitor.visitNamedExpression(self)
            else:
                return visitor.visitChildren(self)




    def namedExpression(self):

        localctx = HqlParser.NamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_namedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2220
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 2219
                localctx.Name = self.namedExpressionNameClause()


            self.state = 2222
            localctx.Expression = self.unnamedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionNameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrExtendedKeywordOrEscapedNameContext
            self.NameList = None # NamedExpressionNameListContext

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def identifierOrExtendedKeywordOrEscapedName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext,0)


        def namedExpressionNameList(self):
            return self.getTypedRuleContext(HqlParser.NamedExpressionNameListContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_namedExpressionNameClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpressionNameClause" ):
                listener.enterNamedExpressionNameClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpressionNameClause" ):
                listener.exitNamedExpressionNameClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpressionNameClause" ):
                return visitor.visitNamedExpressionNameClause(self)
            else:
                return visitor.visitChildren(self)




    def namedExpressionNameClause(self):

        localctx = HqlParser.NamedExpressionNameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_namedExpressionNameClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2226
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 38, 39, 40, 41, 42, 47, 50, 53, 55, 57, 59, 61, 62, 66, 69, 71, 72, 74, 75, 77, 78, 82, 83, 86, 87, 89, 90, 91, 94, 95, 105, 113, 125, 127, 128, 129, 131, 133, 134, 141, 142, 145, 146, 148, 149, 150, 154, 156, 162, 163, 184, 185, 186, 187, 188, 192, 193, 195, 198, 199, 201, 205, 206, 214, 215, 216, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 231, 233, 234, 238, 239, 241, 242, 246, 247, 248, 249, 250, 251, 252, 254, 257, 258, 259, 260, 261, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 289, 321]:
                self.state = 2224
                localctx.Name = self.identifierOrExtendedKeywordOrEscapedName()
                pass
            elif token in [31]:
                self.state = 2225
                localctx.NameList = self.namedExpressionNameList()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2228
            self.match(HqlParser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifierOrExtendedKeywordOrEscapedName = None # IdentifierOrExtendedKeywordOrEscapedNameContext
            self.Names = list() # of IdentifierOrExtendedKeywordOrEscapedNameContexts

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def identifierOrExtendedKeywordOrEscapedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext)
            else:
                return self.getTypedRuleContext(HqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_namedExpressionNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpressionNameList" ):
                listener.enterNamedExpressionNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpressionNameList" ):
                listener.exitNamedExpressionNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpressionNameList" ):
                return visitor.visitNamedExpressionNameList(self)
            else:
                return visitor.visitChildren(self)




    def namedExpressionNameList(self):

        localctx = HqlParser.NamedExpressionNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_namedExpressionNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2230
            self.match(HqlParser.OPENPAREN)
            self.state = 2231
            localctx._identifierOrExtendedKeywordOrEscapedName = self.identifierOrExtendedKeywordOrEscapedName()
            localctx.Names.append(localctx._identifierOrExtendedKeywordOrEscapedName)
            self.state = 2236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 2232
                self.match(HqlParser.COMMA)
                self.state = 2233
                localctx._identifierOrExtendedKeywordOrEscapedName = self.identifierOrExtendedKeywordOrEscapedName()
                localctx.Names.append(localctx._identifierOrExtendedKeywordOrEscapedName)
                self.state = 2238
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2239
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopedFunctionCallExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Scope = None # SimpleNameReferenceContext
            self.FunctionCall = None # FunctionCallExpressionContext

        def DOT(self):
            return self.getToken(HqlParser.DOT, 0)

        def simpleNameReference(self):
            return self.getTypedRuleContext(HqlParser.SimpleNameReferenceContext,0)


        def functionCallExpression(self):
            return self.getTypedRuleContext(HqlParser.FunctionCallExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_scopedFunctionCallExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScopedFunctionCallExpression" ):
                listener.enterScopedFunctionCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScopedFunctionCallExpression" ):
                listener.exitScopedFunctionCallExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScopedFunctionCallExpression" ):
                return visitor.visitScopedFunctionCallExpression(self)
            else:
                return visitor.visitChildren(self)




    def scopedFunctionCallExpression(self):

        localctx = HqlParser.ScopedFunctionCallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_scopedFunctionCallExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2241
            localctx.Scope = self.simpleNameReference()
            self.state = 2242
            self.match(HqlParser.DOT)
            self.state = 2243
            localctx.FunctionCall = self.functionCallExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnnamedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(HqlParser.LogicalOrExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_unnamedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnamedExpression" ):
                listener.enterUnnamedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnamedExpression" ):
                listener.exitUnnamedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnnamedExpression" ):
                return visitor.visitUnnamedExpression(self)
            else:
                return visitor.visitChildren(self)




    def unnamedExpression(self):

        localctx = HqlParser.UnnamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_unnamedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2245
            self.logicalOrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # LogicalAndExpressionContext
            self._logicalOrOperation = None # LogicalOrOperationContext
            self.Operations = list() # of LogicalOrOperationContexts

        def logicalAndExpression(self):
            return self.getTypedRuleContext(HqlParser.LogicalAndExpressionContext,0)


        def logicalOrOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.LogicalOrOperationContext)
            else:
                return self.getTypedRuleContext(HqlParser.LogicalOrOperationContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOrExpression" ):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def logicalOrExpression(self):

        localctx = HqlParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_logicalOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2247
            localctx.Left = self.logicalAndExpression()
            self.state = 2251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==189:
                self.state = 2248
                localctx._logicalOrOperation = self.logicalOrOperation()
                localctx.Operations.append(localctx._logicalOrOperation)
                self.state = 2253
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Right = None # LogicalAndExpressionContext

        def OR(self):
            return self.getToken(HqlParser.OR, 0)

        def logicalAndExpression(self):
            return self.getTypedRuleContext(HqlParser.LogicalAndExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_logicalOrOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrOperation" ):
                listener.enterLogicalOrOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrOperation" ):
                listener.exitLogicalOrOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOrOperation" ):
                return visitor.visitLogicalOrOperation(self)
            else:
                return visitor.visitChildren(self)




    def logicalOrOperation(self):

        localctx = HqlParser.LogicalOrOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_logicalOrOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2254
            self.match(HqlParser.OR)
            self.state = 2255
            localctx.Right = self.logicalAndExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # EqualityExpressionContext
            self._logicalAndOperation = None # LogicalAndOperationContext
            self.Operations = list() # of LogicalAndOperationContexts

        def equalityExpression(self):
            return self.getTypedRuleContext(HqlParser.EqualityExpressionContext,0)


        def logicalAndOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.LogicalAndOperationContext)
            else:
                return self.getTypedRuleContext(HqlParser.LogicalAndOperationContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpression" ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)




    def logicalAndExpression(self):

        localctx = HqlParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_logicalAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2257
            localctx.Left = self.equalityExpression()
            self.state = 2261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==43:
                self.state = 2258
                localctx._logicalAndOperation = self.logicalAndOperation()
                localctx.Operations.append(localctx._logicalAndOperation)
                self.state = 2263
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Right = None # EqualityExpressionContext

        def AND(self):
            return self.getToken(HqlParser.AND, 0)

        def equalityExpression(self):
            return self.getTypedRuleContext(HqlParser.EqualityExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_logicalAndOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndOperation" ):
                listener.enterLogicalAndOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndOperation" ):
                listener.exitLogicalAndOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndOperation" ):
                return visitor.visitLogicalAndOperation(self)
            else:
                return visitor.visitChildren(self)




    def logicalAndOperation(self):

        localctx = HqlParser.LogicalAndOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_logicalAndOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2264
            self.match(HqlParser.AND)
            self.state = 2265
            localctx.Right = self.equalityExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self):
            return self.getTypedRuleContext(HqlParser.RelationalExpressionContext,0)


        def equalsEqualityExpression(self):
            return self.getTypedRuleContext(HqlParser.EqualsEqualityExpressionContext,0)


        def listEqualityExpression(self):
            return self.getTypedRuleContext(HqlParser.ListEqualityExpressionContext,0)


        def betweenEqualityExpression(self):
            return self.getTypedRuleContext(HqlParser.BetweenEqualityExpressionContext,0)


        def starEqualityExpression(self):
            return self.getTypedRuleContext(HqlParser.StarEqualityExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpression" ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)




    def equalityExpression(self):

        localctx = HqlParser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_equalityExpression)
        try:
            self.state = 2272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2267
                self.relationalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2268
                self.equalsEqualityExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2269
                self.listEqualityExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2270
                self.betweenEqualityExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2271
                self.starEqualityExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualsEqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # RelationalExpressionContext
            self.OperatorToken = None # Token
            self.Right = None # RelationalExpressionContext

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelationalExpressionContext,i)


        def EQUALEQUAL(self):
            return self.getToken(HqlParser.EQUALEQUAL, 0)

        def LESSTHAN_GREATERTHAN(self):
            return self.getToken(HqlParser.LESSTHAN_GREATERTHAN, 0)

        def EXCLAIMATIONPOINT_EQUAL(self):
            return self.getToken(HqlParser.EXCLAIMATIONPOINT_EQUAL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_equalsEqualityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualsEqualityExpression" ):
                listener.enterEqualsEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualsEqualityExpression" ):
                listener.exitEqualsEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualsEqualityExpression" ):
                return visitor.visitEqualsEqualityExpression(self)
            else:
                return visitor.visitChildren(self)




    def equalsEqualityExpression(self):

        localctx = HqlParser.EqualsEqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_equalsEqualityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2274
            localctx.Left = self.relationalExpression()
            self.state = 2275
            localctx.OperatorToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 269746176) != 0)):
                localctx.OperatorToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2276
            localctx.Right = self.relationalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListEqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # RelationalExpressionContext
            self.OperatorToken = None # Token
            self._invocationExpression = None # InvocationExpressionContext
            self.Expressions = list() # of InvocationExpressionContexts

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def relationalExpression(self):
            return self.getTypedRuleContext(HqlParser.RelationalExpressionContext,0)


        def invocationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.InvocationExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.InvocationExpressionContext,i)


        def IN(self):
            return self.getToken(HqlParser.IN, 0)

        def NOT_IN(self):
            return self.getToken(HqlParser.NOT_IN, 0)

        def IN_CI(self):
            return self.getToken(HqlParser.IN_CI, 0)

        def NOT_IN_CI(self):
            return self.getToken(HqlParser.NOT_IN_CI, 0)

        def HAS_ANY(self):
            return self.getToken(HqlParser.HAS_ANY, 0)

        def HAS_ALL(self):
            return self.getToken(HqlParser.HAS_ALL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_listEqualityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListEqualityExpression" ):
                listener.enterListEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListEqualityExpression" ):
                listener.exitListEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListEqualityExpression" ):
                return visitor.visitListEqualityExpression(self)
            else:
                return visitor.visitChildren(self)




    def listEqualityExpression(self):

        localctx = HqlParser.ListEqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_listEqualityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2278
            localctx.Left = self.relationalExpression()
            self.state = 2279
            localctx.OperatorToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 100663299) != 0) or _la==176 or _la==177):
                localctx.OperatorToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2280
            self.match(HqlParser.OPENPAREN)
            self.state = 2281
            localctx._invocationExpression = self.invocationExpression()
            localctx.Expressions.append(localctx._invocationExpression)
            self.state = 2286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 2282
                self.match(HqlParser.COMMA)
                self.state = 2283
                localctx._invocationExpression = self.invocationExpression()
                localctx.Expressions.append(localctx._invocationExpression)
                self.state = 2288
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2289
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BetweenEqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # RelationalExpressionContext
            self.OperatorToken = None # Token
            self.StartExpression = None # InvocationExpressionContext
            self.EndExpression = None # InvocationExpressionContext

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def DOTDOT(self):
            return self.getToken(HqlParser.DOTDOT, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def relationalExpression(self):
            return self.getTypedRuleContext(HqlParser.RelationalExpressionContext,0)


        def invocationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.InvocationExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.InvocationExpressionContext,i)


        def BETWEEN(self):
            return self.getToken(HqlParser.BETWEEN, 0)

        def NOT_BETWEEN(self):
            return self.getToken(HqlParser.NOT_BETWEEN, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_betweenEqualityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenEqualityExpression" ):
                listener.enterBetweenEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenEqualityExpression" ):
                listener.exitBetweenEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetweenEqualityExpression" ):
                return visitor.visitBetweenEqualityExpression(self)
            else:
                return visitor.visitChildren(self)




    def betweenEqualityExpression(self):

        localctx = HqlParser.BetweenEqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_betweenEqualityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2291
            localctx.Left = self.relationalExpression()
            self.state = 2292
            localctx.OperatorToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==54 or _la==165):
                localctx.OperatorToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2293
            self.match(HqlParser.OPENPAREN)
            self.state = 2294
            localctx.StartExpression = self.invocationExpression()
            self.state = 2295
            self.match(HqlParser.DOTDOT)
            self.state = 2296
            localctx.EndExpression = self.invocationExpression()
            self.state = 2297
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StarEqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # RelationalExpressionContext

        def ASTERISK(self):
            return self.getToken(HqlParser.ASTERISK, 0)

        def EQUALEQUAL(self):
            return self.getToken(HqlParser.EQUALEQUAL, 0)

        def relationalExpression(self):
            return self.getTypedRuleContext(HqlParser.RelationalExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_starEqualityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStarEqualityExpression" ):
                listener.enterStarEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStarEqualityExpression" ):
                listener.exitStarEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStarEqualityExpression" ):
                return visitor.visitStarEqualityExpression(self)
            else:
                return visitor.visitChildren(self)




    def starEqualityExpression(self):

        localctx = HqlParser.StarEqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_starEqualityExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2299
            self.match(HqlParser.ASTERISK)
            self.state = 2300
            self.match(HqlParser.EQUALEQUAL)
            self.state = 2301
            localctx.Expression = self.relationalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # AdditiveExpressionContext
            self.OperatorToken = None # Token
            self.Right = None # AdditiveExpressionContext

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.AdditiveExpressionContext,i)


        def LESSTHAN(self):
            return self.getToken(HqlParser.LESSTHAN, 0)

        def GREATERTHAN(self):
            return self.getToken(HqlParser.GREATERTHAN, 0)

        def LESSTHAN_EQUAL(self):
            return self.getToken(HqlParser.LESSTHAN_EQUAL, 0)

        def GREATERTHAN_EQUAL(self):
            return self.getToken(HqlParser.GREATERTHAN_EQUAL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalExpression" ):
                return visitor.visitRelationalExpression(self)
            else:
                return visitor.visitChildren(self)




    def relationalExpression(self):

        localctx = HqlParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2303
            localctx.Left = self.additiveExpression()
            self.state = 2306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 163577856) != 0):
                self.state = 2304
                localctx.OperatorToken = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 163577856) != 0)):
                    localctx.OperatorToken = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2305
                localctx.Right = self.additiveExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # MultiplicativeExpressionContext
            self._additiveOperation = None # AdditiveOperationContext
            self.Operations = list() # of AdditiveOperationContexts

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(HqlParser.MultiplicativeExpressionContext,0)


        def additiveOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.AdditiveOperationContext)
            else:
                return self.getTypedRuleContext(HqlParser.AdditiveOperationContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)




    def additiveExpression(self):

        localctx = HqlParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2308
            localctx.Left = self.multiplicativeExpression()
            self.state = 2312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11 or _la==33:
                self.state = 2309
                localctx._additiveOperation = self.additiveOperation()
                localctx.Operations.append(localctx._additiveOperation)
                self.state = 2314
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OperatorToken = None # Token
            self.Right = None # MultiplicativeExpressionContext

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(HqlParser.MultiplicativeExpressionContext,0)


        def PLUS(self):
            return self.getToken(HqlParser.PLUS, 0)

        def DASH(self):
            return self.getToken(HqlParser.DASH, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_additiveOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveOperation" ):
                listener.enterAdditiveOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveOperation" ):
                listener.exitAdditiveOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveOperation" ):
                return visitor.visitAdditiveOperation(self)
            else:
                return visitor.visitChildren(self)




    def additiveOperation(self):

        localctx = HqlParser.AdditiveOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_additiveOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2315
            localctx.OperatorToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==11 or _la==33):
                localctx.OperatorToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2316
            localctx.Right = self.multiplicativeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # StringOperatorExpressionContext
            self._multiplicativeOperation = None # MultiplicativeOperationContext
            self.Operations = list() # of MultiplicativeOperationContexts

        def stringOperatorExpression(self):
            return self.getTypedRuleContext(HqlParser.StringOperatorExpressionContext,0)


        def multiplicativeOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.MultiplicativeOperationContext)
            else:
                return self.getTypedRuleContext(HqlParser.MultiplicativeOperationContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeExpression(self):

        localctx = HqlParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2318
            localctx.Left = self.stringOperatorExpression()
            self.state = 2322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 38654705666) != 0):
                self.state = 2319
                localctx._multiplicativeOperation = self.multiplicativeOperation()
                localctx.Operations.append(localctx._multiplicativeOperation)
                self.state = 2324
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OperatorToken = None # Token
            self.Right = None # StringOperatorExpressionContext

        def stringOperatorExpression(self):
            return self.getTypedRuleContext(HqlParser.StringOperatorExpressionContext,0)


        def ASTERISK(self):
            return self.getToken(HqlParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(HqlParser.SLASH, 0)

        def PERCENTSIGN(self):
            return self.getToken(HqlParser.PERCENTSIGN, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_multiplicativeOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeOperation" ):
                listener.enterMultiplicativeOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeOperation" ):
                listener.exitMultiplicativeOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeOperation" ):
                return visitor.visitMultiplicativeOperation(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeOperation(self):

        localctx = HqlParser.MultiplicativeOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_multiplicativeOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2325
            localctx.OperatorToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 38654705666) != 0)):
                localctx.OperatorToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2326
            localctx.Right = self.stringOperatorExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringBinaryOperatorExpression(self):
            return self.getTypedRuleContext(HqlParser.StringBinaryOperatorExpressionContext,0)


        def stringStarOperatorExpression(self):
            return self.getTypedRuleContext(HqlParser.StringStarOperatorExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_stringOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringOperatorExpression" ):
                listener.enterStringOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringOperatorExpression" ):
                listener.exitStringOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringOperatorExpression" ):
                return visitor.visitStringOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def stringOperatorExpression(self):

        localctx = HqlParser.StringOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_stringOperatorExpression)
        try:
            self.state = 2330
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11, 30, 31, 33, 38, 40, 41, 42, 50, 53, 55, 59, 65, 66, 69, 71, 72, 74, 75, 78, 82, 83, 87, 88, 89, 94, 95, 113, 125, 127, 128, 129, 133, 141, 142, 146, 148, 149, 150, 154, 157, 162, 163, 184, 185, 187, 188, 192, 193, 198, 199, 201, 205, 214, 215, 216, 219, 220, 221, 228, 233, 234, 238, 242, 251, 252, 254, 257, 258, 259, 260, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 287, 289, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2328
                self.stringBinaryOperatorExpression()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2329
                self.stringStarOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringBinaryOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # InvocationExpressionContext
            self._stringBinaryOperation = None # StringBinaryOperationContext
            self.Operations = list() # of StringBinaryOperationContexts

        def invocationExpression(self):
            return self.getTypedRuleContext(HqlParser.InvocationExpressionContext,0)


        def stringBinaryOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.StringBinaryOperationContext)
            else:
                return self.getTypedRuleContext(HqlParser.StringBinaryOperationContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_stringBinaryOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringBinaryOperatorExpression" ):
                listener.enterStringBinaryOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringBinaryOperatorExpression" ):
                listener.exitStringBinaryOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringBinaryOperatorExpression" ):
                return visitor.visitStringBinaryOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def stringBinaryOperatorExpression(self):

        localctx = HqlParser.StringBinaryOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_stringBinaryOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2332
            localctx.Left = self.invocationExpression()
            self.state = 2336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018424765440) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 547556790730753) != 0) or ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & 2173245067267) != 0) or _la==236 or _la==237:
                self.state = 2333
                localctx._stringBinaryOperation = self.stringBinaryOperation()
                localctx.Operations.append(localctx._stringBinaryOperation)
                self.state = 2338
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringBinaryOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # StringBinaryOperatorContext
            self.HasOperator = None # Token
            self.Right = None # InvocationExpressionContext

        def invocationExpression(self):
            return self.getTypedRuleContext(HqlParser.InvocationExpressionContext,0)


        def stringBinaryOperator(self):
            return self.getTypedRuleContext(HqlParser.StringBinaryOperatorContext,0)


        def COLON(self):
            return self.getToken(HqlParser.COLON, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_stringBinaryOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringBinaryOperation" ):
                listener.enterStringBinaryOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringBinaryOperation" ):
                listener.exitStringBinaryOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringBinaryOperation" ):
                return visitor.visitStringBinaryOperation(self)
            else:
                return visitor.visitChildren(self)




    def stringBinaryOperation(self):

        localctx = HqlParser.StringBinaryOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_stringBinaryOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2341
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 21, 62, 63, 64, 79, 80, 105, 108, 109, 110, 111, 112, 143, 144, 155, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 236, 237]:
                self.state = 2339
                localctx.Operator = self.stringBinaryOperator()
                pass
            elif token in [10]:
                self.state = 2340
                localctx.HasOperator = self.match(HqlParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2343
            localctx.Right = self.invocationExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringBinaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OperatorToken = None # Token

        def EQUALTILDE(self):
            return self.getToken(HqlParser.EQUALTILDE, 0)

        def EXCLAIMATIONPOINT_TILDE(self):
            return self.getToken(HqlParser.EXCLAIMATIONPOINT_TILDE, 0)

        def HAS(self):
            return self.getToken(HqlParser.HAS, 0)

        def NOT_HAS(self):
            return self.getToken(HqlParser.NOT_HAS, 0)

        def HAS_CS(self):
            return self.getToken(HqlParser.HAS_CS, 0)

        def NOT_HAS_CS(self):
            return self.getToken(HqlParser.NOT_HAS_CS, 0)

        def HASPREFIX(self):
            return self.getToken(HqlParser.HASPREFIX, 0)

        def NOT_HASPREFIX(self):
            return self.getToken(HqlParser.NOT_HASPREFIX, 0)

        def HASPREFIX_CS(self):
            return self.getToken(HqlParser.HASPREFIX_CS, 0)

        def NOT_HASPREFIX_CS(self):
            return self.getToken(HqlParser.NOT_HASPREFIX_CS, 0)

        def HASSUFFIX(self):
            return self.getToken(HqlParser.HASSUFFIX, 0)

        def NOT_HASSUFFIX(self):
            return self.getToken(HqlParser.NOT_HASSUFFIX, 0)

        def HASSUFFIX_CS(self):
            return self.getToken(HqlParser.HASSUFFIX_CS, 0)

        def NOT_HASSUFFIX_CS(self):
            return self.getToken(HqlParser.NOT_HASSUFFIX_CS, 0)

        def LIKE(self):
            return self.getToken(HqlParser.LIKE, 0)

        def NOTLIKE(self):
            return self.getToken(HqlParser.NOTLIKE, 0)

        def LIKECS(self):
            return self.getToken(HqlParser.LIKECS, 0)

        def NOTLIKECS(self):
            return self.getToken(HqlParser.NOTLIKECS, 0)

        def CONTAINS(self):
            return self.getToken(HqlParser.CONTAINS, 0)

        def NOTCONTAINS(self):
            return self.getToken(HqlParser.NOTCONTAINS, 0)

        def CONTAINSCS(self):
            return self.getToken(HqlParser.CONTAINSCS, 0)

        def NOTCONTAINSCS(self):
            return self.getToken(HqlParser.NOTCONTAINSCS, 0)

        def NOT_CONTAINS(self):
            return self.getToken(HqlParser.NOT_CONTAINS, 0)

        def CONTAINS_CS(self):
            return self.getToken(HqlParser.CONTAINS_CS, 0)

        def NOT_CONTAINS_CS(self):
            return self.getToken(HqlParser.NOT_CONTAINS_CS, 0)

        def STARTSWITH(self):
            return self.getToken(HqlParser.STARTSWITH, 0)

        def NOT_STARTSWITH(self):
            return self.getToken(HqlParser.NOT_STARTSWITH, 0)

        def STARTSWITH_CS(self):
            return self.getToken(HqlParser.STARTSWITH_CS, 0)

        def NOT_STARTSWITH_CS(self):
            return self.getToken(HqlParser.NOT_STARTSWITH_CS, 0)

        def ENDSWITH(self):
            return self.getToken(HqlParser.ENDSWITH, 0)

        def NOT_ENDSWITH(self):
            return self.getToken(HqlParser.NOT_ENDSWITH, 0)

        def ENDSWITH_CS(self):
            return self.getToken(HqlParser.ENDSWITH_CS, 0)

        def NOT_ENDSWITH_CS(self):
            return self.getToken(HqlParser.NOT_ENDSWITH_CS, 0)

        def MATCHES_REGEX(self):
            return self.getToken(HqlParser.MATCHES_REGEX, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_stringBinaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringBinaryOperator" ):
                listener.enterStringBinaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringBinaryOperator" ):
                listener.exitStringBinaryOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringBinaryOperator" ):
                return visitor.visitStringBinaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def stringBinaryOperator(self):

        localctx = HqlParser.StringBinaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_stringBinaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2345
            localctx.OperatorToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018424766464) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 547556790730753) != 0) or ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & 2173245067267) != 0) or _la==236 or _la==237):
                localctx.OperatorToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringStarOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LeftStarToken = None # Token
            self.Operator = None # StringBinaryOperatorContext
            self.Right = None # InvocationExpressionContext

        def ASTERISK(self):
            return self.getToken(HqlParser.ASTERISK, 0)

        def stringBinaryOperator(self):
            return self.getTypedRuleContext(HqlParser.StringBinaryOperatorContext,0)


        def invocationExpression(self):
            return self.getTypedRuleContext(HqlParser.InvocationExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_stringStarOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringStarOperatorExpression" ):
                listener.enterStringStarOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringStarOperatorExpression" ):
                listener.exitStringStarOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringStarOperatorExpression" ):
                return visitor.visitStringStarOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def stringStarOperatorExpression(self):

        localctx = HqlParser.StringStarOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_stringStarOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2347
            localctx.LeftStarToken = self.match(HqlParser.ASTERISK)
            self.state = 2348
            localctx.Operator = self.stringBinaryOperator()
            self.state = 2349
            localctx.Right = self.invocationExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InvocationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OperatorToken = None # Token
            self.Expression = None # FunctionCallOrPathExpressionContext

        def functionCallOrPathExpression(self):
            return self.getTypedRuleContext(HqlParser.FunctionCallOrPathExpressionContext,0)


        def PLUS(self):
            return self.getToken(HqlParser.PLUS, 0)

        def DASH(self):
            return self.getToken(HqlParser.DASH, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_invocationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvocationExpression" ):
                listener.enterInvocationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvocationExpression" ):
                listener.exitInvocationExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvocationExpression" ):
                return visitor.visitInvocationExpression(self)
            else:
                return visitor.visitChildren(self)




    def invocationExpression(self):

        localctx = HqlParser.InvocationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_invocationExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11 or _la==33:
                self.state = 2351
                localctx.OperatorToken = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==11 or _la==33):
                    localctx.OperatorToken = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2354
            localctx.Expression = self.functionCallOrPathExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallOrPathExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCallOrPathRoot(self):
            return self.getTypedRuleContext(HqlParser.FunctionCallOrPathRootContext,0)


        def functionCallOrPathPathExpression(self):
            return self.getTypedRuleContext(HqlParser.FunctionCallOrPathPathExpressionContext,0)


        def toTableExpression(self):
            return self.getTypedRuleContext(HqlParser.ToTableExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_functionCallOrPathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOrPathExpression" ):
                listener.enterFunctionCallOrPathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOrPathExpression" ):
                listener.exitFunctionCallOrPathExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallOrPathExpression" ):
                return visitor.visitFunctionCallOrPathExpression(self)
            else:
                return visitor.visitChildren(self)




    def functionCallOrPathExpression(self):

        localctx = HqlParser.FunctionCallOrPathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_functionCallOrPathExpression)
        try:
            self.state = 2359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2356
                self.functionCallOrPathRoot()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2357
                self.functionCallOrPathPathExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2358
                self.toTableExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallOrPathRootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotCompositeFunctionCallExpression(self):
            return self.getTypedRuleContext(HqlParser.DotCompositeFunctionCallExpressionContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(HqlParser.PrimaryExpressionContext,0)


        def toScalarExpression(self):
            return self.getTypedRuleContext(HqlParser.ToScalarExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_functionCallOrPathRoot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOrPathRoot" ):
                listener.enterFunctionCallOrPathRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOrPathRoot" ):
                listener.exitFunctionCallOrPathRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallOrPathRoot" ):
                return visitor.visitFunctionCallOrPathRoot(self)
            else:
                return visitor.visitChildren(self)




    def functionCallOrPathRoot(self):

        localctx = HqlParser.FunctionCallOrPathRootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_functionCallOrPathRoot)
        try:
            self.state = 2364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2361
                self.dotCompositeFunctionCallExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2362
                self.primaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2363
                self.toScalarExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallOrPathPathExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # FunctionCallOrPathRootContext
            self._functionCallOrPathOperation = None # FunctionCallOrPathOperationContext
            self.Operations = list() # of FunctionCallOrPathOperationContexts

        def functionCallOrPathRoot(self):
            return self.getTypedRuleContext(HqlParser.FunctionCallOrPathRootContext,0)


        def functionCallOrPathOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.FunctionCallOrPathOperationContext)
            else:
                return self.getTypedRuleContext(HqlParser.FunctionCallOrPathOperationContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_functionCallOrPathPathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOrPathPathExpression" ):
                listener.enterFunctionCallOrPathPathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOrPathPathExpression" ):
                listener.exitFunctionCallOrPathPathExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallOrPathPathExpression" ):
                return visitor.visitFunctionCallOrPathPathExpression(self)
            else:
                return visitor.visitChildren(self)




    def functionCallOrPathPathExpression(self):

        localctx = HqlParser.FunctionCallOrPathPathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_functionCallOrPathPathExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2366
            localctx.Expression = self.functionCallOrPathRoot()
            self.state = 2368 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2367
                localctx._functionCallOrPathOperation = self.functionCallOrPathOperation()
                localctx.Operations.append(localctx._functionCallOrPathOperation)
                self.state = 2370 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==15 or _la==30):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallOrPathOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionalCallOrPathPathOperation(self):
            return self.getTypedRuleContext(HqlParser.FunctionalCallOrPathPathOperationContext,0)


        def functionCallOrPathElementOperation(self):
            return self.getTypedRuleContext(HqlParser.FunctionCallOrPathElementOperationContext,0)


        def legacyFunctionCallOrPathElementOperation(self):
            return self.getTypedRuleContext(HqlParser.LegacyFunctionCallOrPathElementOperationContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_functionCallOrPathOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOrPathOperation" ):
                listener.enterFunctionCallOrPathOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOrPathOperation" ):
                listener.exitFunctionCallOrPathOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallOrPathOperation" ):
                return visitor.visitFunctionCallOrPathOperation(self)
            else:
                return visitor.visitChildren(self)




    def functionCallOrPathOperation(self):

        localctx = HqlParser.FunctionCallOrPathOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_functionCallOrPathOperation)
        try:
            self.state = 2375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2372
                self.functionalCallOrPathPathOperation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2373
                self.functionCallOrPathElementOperation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2374
                self.legacyFunctionCallOrPathElementOperation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionalCallOrPathPathOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def DOT(self):
            return self.getToken(HqlParser.DOT, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_functionalCallOrPathPathOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionalCallOrPathPathOperation" ):
                listener.enterFunctionalCallOrPathPathOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionalCallOrPathPathOperation" ):
                listener.exitFunctionalCallOrPathPathOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionalCallOrPathPathOperation" ):
                return visitor.visitFunctionalCallOrPathPathOperation(self)
            else:
                return visitor.visitChildren(self)




    def functionalCallOrPathPathOperation(self):

        localctx = HqlParser.FunctionalCallOrPathPathOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_functionalCallOrPathPathOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2377
            self.match(HqlParser.DOT)
            self.state = 2378
            localctx.Name = self.identifierOrKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallOrPathElementOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Element = None # UnnamedExpressionContext

        def OPENBRACKET(self):
            return self.getToken(HqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(HqlParser.CLOSEBRACKET, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_functionCallOrPathElementOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOrPathElementOperation" ):
                listener.enterFunctionCallOrPathElementOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOrPathElementOperation" ):
                listener.exitFunctionCallOrPathElementOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallOrPathElementOperation" ):
                return visitor.visitFunctionCallOrPathElementOperation(self)
            else:
                return visitor.visitChildren(self)




    def functionCallOrPathElementOperation(self):

        localctx = HqlParser.FunctionCallOrPathElementOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_functionCallOrPathElementOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2380
            self.match(HqlParser.OPENBRACKET)
            self.state = 2381
            localctx.Element = self.unnamedExpression()
            self.state = 2382
            self.match(HqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LegacyFunctionCallOrPathElementOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Element = None # UnnamedExpressionContext

        def DOT(self):
            return self.getToken(HqlParser.DOT, 0)

        def OPENBRACKET(self):
            return self.getToken(HqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(HqlParser.CLOSEBRACKET, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_legacyFunctionCallOrPathElementOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyFunctionCallOrPathElementOperation" ):
                listener.enterLegacyFunctionCallOrPathElementOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyFunctionCallOrPathElementOperation" ):
                listener.exitLegacyFunctionCallOrPathElementOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLegacyFunctionCallOrPathElementOperation" ):
                return visitor.visitLegacyFunctionCallOrPathElementOperation(self)
            else:
                return visitor.visitChildren(self)




    def legacyFunctionCallOrPathElementOperation(self):

        localctx = HqlParser.LegacyFunctionCallOrPathElementOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_legacyFunctionCallOrPathElementOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2384
            self.match(HqlParser.DOT)
            self.state = 2385
            self.match(HqlParser.OPENBRACKET)
            self.state = 2386
            localctx.Element = self.unnamedExpression()
            self.state = 2387
            self.match(HqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ToScalarExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # PipeExpressionContext

        def TOSCALAR(self):
            return self.getToken(HqlParser.TOSCALAR, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def pipeExpression(self):
            return self.getTypedRuleContext(HqlParser.PipeExpressionContext,0)


        def noOptimizationParameter(self):
            return self.getTypedRuleContext(HqlParser.NoOptimizationParameterContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_toScalarExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterToScalarExpression" ):
                listener.enterToScalarExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitToScalarExpression" ):
                listener.exitToScalarExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitToScalarExpression" ):
                return visitor.visitToScalarExpression(self)
            else:
                return visitor.visitChildren(self)




    def toScalarExpression(self):

        localctx = HqlParser.ToScalarExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_toScalarExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2389
            self.match(HqlParser.TOSCALAR)
            self.state = 2391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2390
                self.noOptimizationParameter()


            self.state = 2393
            self.match(HqlParser.OPENPAREN)
            self.state = 2394
            localctx.Expression = self.pipeExpression()
            self.state = 2395
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ToTableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # PipeExpressionContext

        def TOTABLE(self):
            return self.getToken(HqlParser.TOTABLE, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def pipeExpression(self):
            return self.getTypedRuleContext(HqlParser.PipeExpressionContext,0)


        def noOptimizationParameter(self):
            return self.getTypedRuleContext(HqlParser.NoOptimizationParameterContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_toTableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterToTableExpression" ):
                listener.enterToTableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitToTableExpression" ):
                listener.exitToTableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitToTableExpression" ):
                return visitor.visitToTableExpression(self)
            else:
                return visitor.visitChildren(self)




    def toTableExpression(self):

        localctx = HqlParser.ToTableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_toTableExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2397
            self.match(HqlParser.TOTABLE)
            self.state = 2399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2398
                self.noOptimizationParameter()


            self.state = 2401
            self.match(HqlParser.OPENPAREN)
            self.state = 2402
            localctx.Expression = self.pipeExpression()
            self.state = 2403
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoOptimizationParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KIND(self):
            return self.getToken(HqlParser.KIND, 0)

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def NOOPTIMIZATION(self):
            return self.getToken(HqlParser.NOOPTIMIZATION, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_noOptimizationParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoOptimizationParameter" ):
                listener.enterNoOptimizationParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoOptimizationParameter" ):
                listener.exitNoOptimizationParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoOptimizationParameter" ):
                return visitor.visitNoOptimizationParameter(self)
            else:
                return visitor.visitChildren(self)




    def noOptimizationParameter(self):

        localctx = HqlParser.NoOptimizationParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_noOptimizationParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2405
            self.match(HqlParser.KIND)
            self.state = 2406
            self.match(HqlParser.EQUAL)
            self.state = 2407
            self.match(HqlParser.NOOPTIMIZATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotCompositeFunctionCallExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Call = None # FunctionCallExpressionContext
            self._dotCompositeFunctionCallOperation = None # DotCompositeFunctionCallOperationContext
            self.Operations = list() # of DotCompositeFunctionCallOperationContexts

        def functionCallExpression(self):
            return self.getTypedRuleContext(HqlParser.FunctionCallExpressionContext,0)


        def dotCompositeFunctionCallOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.DotCompositeFunctionCallOperationContext)
            else:
                return self.getTypedRuleContext(HqlParser.DotCompositeFunctionCallOperationContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_dotCompositeFunctionCallExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotCompositeFunctionCallExpression" ):
                listener.enterDotCompositeFunctionCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotCompositeFunctionCallExpression" ):
                listener.exitDotCompositeFunctionCallExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotCompositeFunctionCallExpression" ):
                return visitor.visitDotCompositeFunctionCallExpression(self)
            else:
                return visitor.visitChildren(self)




    def dotCompositeFunctionCallExpression(self):

        localctx = HqlParser.DotCompositeFunctionCallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_dotCompositeFunctionCallExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2409
            localctx.Call = self.functionCallExpression()
            self.state = 2413
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,215,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2410
                    localctx._dotCompositeFunctionCallOperation = self.dotCompositeFunctionCallOperation()
                    localctx.Operations.append(localctx._dotCompositeFunctionCallOperation) 
                self.state = 2415
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,215,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotCompositeFunctionCallOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Call = None # FunctionCallExpressionContext

        def DOT(self):
            return self.getToken(HqlParser.DOT, 0)

        def functionCallExpression(self):
            return self.getTypedRuleContext(HqlParser.FunctionCallExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_dotCompositeFunctionCallOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotCompositeFunctionCallOperation" ):
                listener.enterDotCompositeFunctionCallOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotCompositeFunctionCallOperation" ):
                listener.exitDotCompositeFunctionCallOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotCompositeFunctionCallOperation" ):
                return visitor.visitDotCompositeFunctionCallOperation(self)
            else:
                return visitor.visitChildren(self)




    def dotCompositeFunctionCallOperation(self):

        localctx = HqlParser.DotCompositeFunctionCallOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_dotCompositeFunctionCallOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2416
            self.match(HqlParser.DOT)
            self.state = 2417
            localctx.Call = self.functionCallExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedFunctionCallExpression(self):
            return self.getTypedRuleContext(HqlParser.NamedFunctionCallExpressionContext,0)


        def countExpression(self):
            return self.getTypedRuleContext(HqlParser.CountExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_functionCallExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpression" ):
                listener.enterFunctionCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpression" ):
                listener.exitFunctionCallExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallExpression" ):
                return visitor.visitFunctionCallExpression(self)
            else:
                return visitor.visitChildren(self)




    def functionCallExpression(self):

        localctx = HqlParser.FunctionCallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_functionCallExpression)
        try:
            self.state = 2421
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 113, 125, 127, 128, 129, 133, 141, 142, 146, 148, 149, 150, 154, 162, 163, 184, 185, 187, 188, 192, 193, 198, 199, 201, 205, 214, 215, 216, 219, 220, 221, 228, 233, 234, 238, 242, 254, 257, 258, 259, 260, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 289, 321]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2419
                self.namedFunctionCallExpression()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2420
                self.countExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedFunctionCallExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # SimpleNameReferenceContext
            self._argumentExpression = None # ArgumentExpressionContext
            self.Arguments = list() # of ArgumentExpressionContexts

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def simpleNameReference(self):
            return self.getTypedRuleContext(HqlParser.SimpleNameReferenceContext,0)


        def argumentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.ArgumentExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.ArgumentExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_namedFunctionCallExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedFunctionCallExpression" ):
                listener.enterNamedFunctionCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedFunctionCallExpression" ):
                listener.exitNamedFunctionCallExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedFunctionCallExpression" ):
                return visitor.visitNamedFunctionCallExpression(self)
            else:
                return visitor.visitChildren(self)




    def namedFunctionCallExpression(self):

        localctx = HqlParser.NamedFunctionCallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_namedFunctionCallExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2423
            localctx.Name = self.simpleNameReference()
            self.state = 2424
            self.match(HqlParser.OPENPAREN)
            self.state = 2433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416134715541506) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -3458481937589061933) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -8106479303057002443) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 3450710999116558693) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -4620693212279873473) != 0) or _la==321:
                self.state = 2425
                localctx._argumentExpression = self.argumentExpression()
                localctx.Arguments.append(localctx._argumentExpression)
                self.state = 2430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 2426
                    self.match(HqlParser.COMMA)
                    self.state = 2427
                    localctx._argumentExpression = self.argumentExpression()
                    localctx.Arguments.append(localctx._argumentExpression)
                    self.state = 2432
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2435
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self):
            return self.getTypedRuleContext(HqlParser.NamedExpressionContext,0)


        def starExpression(self):
            return self.getTypedRuleContext(HqlParser.StarExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_argumentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpression" ):
                listener.enterArgumentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpression" ):
                listener.exitArgumentExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentExpression" ):
                return visitor.visitArgumentExpression(self)
            else:
                return visitor.visitChildren(self)




    def argumentExpression(self):

        localctx = HqlParser.ArgumentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_argumentExpression)
        try:
            self.state = 2439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2437
                self.namedExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2438
                self.starExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CountExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext

        def COUNT(self):
            return self.getToken(HqlParser.COUNT, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(HqlParser.NamedExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_countExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCountExpression" ):
                listener.enterCountExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCountExpression" ):
                listener.exitCountExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCountExpression" ):
                return visitor.visitCountExpression(self)
            else:
                return visitor.visitChildren(self)




    def countExpression(self):

        localctx = HqlParser.CountExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_countExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2441
            self.match(HqlParser.COUNT)
            self.state = 2442
            self.match(HqlParser.OPENPAREN)
            self.state = 2444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416134715541506) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -3458481937589061933) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -8106479303057002443) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 3450710999116558693) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -4620693212279873473) != 0) or _la==321:
                self.state = 2443
                localctx.Expression = self.namedExpression()


            self.state = 2446
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StarExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(HqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_starExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStarExpression" ):
                listener.enterStarExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStarExpression" ):
                listener.exitStarExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStarExpression" ):
                return visitor.visitStarExpression(self)
            else:
                return visitor.visitChildren(self)




    def starExpression(self):

        localctx = HqlParser.StarExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_starExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2448
            self.match(HqlParser.ASTERISK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.UnsignedLiteralExpressionContext,0)


        def nameReferenceWithDataScope(self):
            return self.getTypedRuleContext(HqlParser.NameReferenceWithDataScopeContext,0)


        def dataTableExpression(self):
            return self.getTypedRuleContext(HqlParser.DataTableExpressionContext,0)


        def externalDataExpression(self):
            return self.getTypedRuleContext(HqlParser.ExternalDataExpressionContext,0)


        def contextualDataTableExpression(self):
            return self.getTypedRuleContext(HqlParser.ContextualDataTableExpressionContext,0)


        def materializedViewCombineExpression(self):
            return self.getTypedRuleContext(HqlParser.MaterializedViewCombineExpressionContext,0)


        def parenthesizedExpression(self):
            return self.getTypedRuleContext(HqlParser.ParenthesizedExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = HqlParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_primaryExpression)
        try:
            self.state = 2457
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [287, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2450
                self.unsignedLiteralExpression()
                pass
            elif token in [30, 38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 113, 125, 127, 128, 129, 133, 141, 142, 146, 148, 149, 150, 154, 162, 163, 184, 185, 187, 188, 192, 193, 198, 199, 201, 205, 214, 215, 216, 219, 220, 221, 228, 233, 234, 238, 242, 254, 257, 258, 259, 260, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 289, 321]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2451
                self.nameReferenceWithDataScope()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2452
                self.dataTableExpression()
                pass
            elif token in [87, 88]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2453
                self.externalDataExpression()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2454
                self.contextualDataTableExpression()
                pass
            elif token in [157]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2455
                self.materializedViewCombineExpression()
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2456
                self.parenthesizedExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameReferenceWithDataScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # SimpleNameReferenceContext
            self.Scope = None # DataScopeClauseContext

        def simpleNameReference(self):
            return self.getTypedRuleContext(HqlParser.SimpleNameReferenceContext,0)


        def dataScopeClause(self):
            return self.getTypedRuleContext(HqlParser.DataScopeClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_nameReferenceWithDataScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameReferenceWithDataScope" ):
                listener.enterNameReferenceWithDataScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameReferenceWithDataScope" ):
                listener.exitNameReferenceWithDataScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameReferenceWithDataScope" ):
                return visitor.visitNameReferenceWithDataScope(self)
            else:
                return visitor.visitChildren(self)




    def nameReferenceWithDataScope(self):

        localctx = HqlParser.NameReferenceWithDataScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_nameReferenceWithDataScope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2459
            localctx.Name = self.simpleNameReference()
            self.state = 2461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 2460
                localctx.Scope = self.dataScopeClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataScopeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.KindToken = None # Token

        def DATASCOPE(self):
            return self.getToken(HqlParser.DATASCOPE, 0)

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def HOTCACHE(self):
            return self.getToken(HqlParser.HOTCACHE, 0)

        def ALL(self):
            return self.getToken(HqlParser.ALL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_dataScopeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataScopeClause" ):
                listener.enterDataScopeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataScopeClause" ):
                listener.exitDataScopeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataScopeClause" ):
                return visitor.visitDataScopeClause(self)
            else:
                return visitor.visitChildren(self)




    def dataScopeClause(self):

        localctx = HqlParser.DataScopeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_dataScopeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2463
            self.match(HqlParser.DATASCOPE)
            self.state = 2464
            self.match(HqlParser.EQUAL)
            self.state = 2465
            localctx.KindToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==42 or _la==126):
                localctx.KindToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ExpressionContext

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_parenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenthesizedExpression(self):

        localctx = HqlParser.ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_parenthesizedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2467
            self.match(HqlParser.OPENPAREN)
            self.state = 2468
            localctx.Expression = self.expression()
            self.state = 2469
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # SimpleNameReferenceContext
            self.FromExpression = None # UnnamedExpressionContext
            self.ToExpression = None # UnnamedExpressionContext
            self.StepExpression = None # UnnamedExpressionContext

        def RANGE(self):
            return self.getToken(HqlParser.RANGE, 0)

        def FROM(self):
            return self.getToken(HqlParser.FROM, 0)

        def TO(self):
            return self.getToken(HqlParser.TO, 0)

        def STEP(self):
            return self.getToken(HqlParser.STEP, 0)

        def simpleNameReference(self):
            return self.getTypedRuleContext(HqlParser.SimpleNameReferenceContext,0)


        def unnamedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.UnnamedExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_rangeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeExpression" ):
                listener.enterRangeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeExpression" ):
                listener.exitRangeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeExpression" ):
                return visitor.visitRangeExpression(self)
            else:
                return visitor.visitChildren(self)




    def rangeExpression(self):

        localctx = HqlParser.RangeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_rangeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2471
            self.match(HqlParser.RANGE)
            self.state = 2472
            localctx.Expression = self.simpleNameReference()
            self.state = 2473
            self.match(HqlParser.FROM)
            self.state = 2474
            localctx.FromExpression = self.unnamedExpression()
            self.state = 2475
            self.match(HqlParser.TO)
            self.state = 2476
            localctx.ToExpression = self.unnamedExpression()
            self.state = 2477
            self.match(HqlParser.STEP)
            self.state = 2478
            localctx.StepExpression = self.unnamedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def entityNameReference(self):
            return self.getTypedRuleContext(HqlParser.EntityNameReferenceContext,0)


        def entityPathOrElementExpression(self):
            return self.getTypedRuleContext(HqlParser.EntityPathOrElementExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_entityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityExpression" ):
                listener.enterEntityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityExpression" ):
                listener.exitEntityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntityExpression" ):
                return visitor.visitEntityExpression(self)
            else:
                return visitor.visitChildren(self)




    def entityExpression(self):

        localctx = HqlParser.EntityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_entityExpression)
        try:
            self.state = 2482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2480
                self.entityNameReference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2481
                self.entityPathOrElementExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityPathOrElementExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # EntityNameReferenceContext
            self._entityPathOrElementOperator = None # EntityPathOrElementOperatorContext
            self.Operators = list() # of EntityPathOrElementOperatorContexts

        def entityNameReference(self):
            return self.getTypedRuleContext(HqlParser.EntityNameReferenceContext,0)


        def entityPathOrElementOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.EntityPathOrElementOperatorContext)
            else:
                return self.getTypedRuleContext(HqlParser.EntityPathOrElementOperatorContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_entityPathOrElementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityPathOrElementExpression" ):
                listener.enterEntityPathOrElementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityPathOrElementExpression" ):
                listener.exitEntityPathOrElementExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntityPathOrElementExpression" ):
                return visitor.visitEntityPathOrElementExpression(self)
            else:
                return visitor.visitChildren(self)




    def entityPathOrElementExpression(self):

        localctx = HqlParser.EntityPathOrElementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_entityPathOrElementExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2484
            localctx.Expression = self.entityNameReference()
            self.state = 2486 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2485
                localctx._entityPathOrElementOperator = self.entityPathOrElementOperator()
                localctx.Operators.append(localctx._entityPathOrElementOperator)
                self.state = 2488 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==15 or _la==30):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityPathOrElementOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Path = None # EntityPathOperatorContext
            self.Element = None # EntityElementOperatorContext
            self.PathElement = None # LegacyEntityPathElementOperatorContext

        def entityPathOperator(self):
            return self.getTypedRuleContext(HqlParser.EntityPathOperatorContext,0)


        def entityElementOperator(self):
            return self.getTypedRuleContext(HqlParser.EntityElementOperatorContext,0)


        def legacyEntityPathElementOperator(self):
            return self.getTypedRuleContext(HqlParser.LegacyEntityPathElementOperatorContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_entityPathOrElementOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityPathOrElementOperator" ):
                listener.enterEntityPathOrElementOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityPathOrElementOperator" ):
                listener.exitEntityPathOrElementOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntityPathOrElementOperator" ):
                return visitor.visitEntityPathOrElementOperator(self)
            else:
                return visitor.visitChildren(self)




    def entityPathOrElementOperator(self):

        localctx = HqlParser.EntityPathOrElementOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_entityPathOrElementOperator)
        try:
            self.state = 2493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2490
                localctx.Path = self.entityPathOperator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2491
                localctx.Element = self.entityElementOperator()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2492
                localctx.PathElement = self.legacyEntityPathElementOperator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityPathOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # EntityNameContext

        def DOT(self):
            return self.getToken(HqlParser.DOT, 0)

        def entityName(self):
            return self.getTypedRuleContext(HqlParser.EntityNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_entityPathOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityPathOperator" ):
                listener.enterEntityPathOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityPathOperator" ):
                listener.exitEntityPathOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntityPathOperator" ):
                return visitor.visitEntityPathOperator(self)
            else:
                return visitor.visitChildren(self)




    def entityPathOperator(self):

        localctx = HqlParser.EntityPathOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_entityPathOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2495
            self.match(HqlParser.DOT)
            self.state = 2496
            localctx.Name = self.entityName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityElementOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # UnnamedExpressionContext

        def OPENBRACKET(self):
            return self.getToken(HqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(HqlParser.CLOSEBRACKET, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_entityElementOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityElementOperator" ):
                listener.enterEntityElementOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityElementOperator" ):
                listener.exitEntityElementOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntityElementOperator" ):
                return visitor.visitEntityElementOperator(self)
            else:
                return visitor.visitChildren(self)




    def entityElementOperator(self):

        localctx = HqlParser.EntityElementOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_entityElementOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2498
            self.match(HqlParser.OPENBRACKET)
            self.state = 2499
            localctx.Expression = self.unnamedExpression()
            self.state = 2500
            self.match(HqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LegacyEntityPathElementOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # UnnamedExpressionContext

        def DOT(self):
            return self.getToken(HqlParser.DOT, 0)

        def OPENBRACKET(self):
            return self.getToken(HqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(HqlParser.CLOSEBRACKET, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(HqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_legacyEntityPathElementOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyEntityPathElementOperator" ):
                listener.enterLegacyEntityPathElementOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyEntityPathElementOperator" ):
                listener.exitLegacyEntityPathElementOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLegacyEntityPathElementOperator" ):
                return visitor.visitLegacyEntityPathElementOperator(self)
            else:
                return visitor.visitChildren(self)




    def legacyEntityPathElementOperator(self):

        localctx = HqlParser.LegacyEntityPathElementOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_legacyEntityPathElementOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2502
            self.match(HqlParser.DOT)
            self.state = 2503
            self.match(HqlParser.OPENBRACKET)
            self.state = 2504
            localctx.Expression = self.unnamedExpression()
            self.state = 2505
            self.match(HqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ATSIGN = None # AtSignNameContext
            self.Name = None # IdentifierOrExtendedKeywordOrEscapedNameContext
            self.ExtendedName = None # ExtendedPathNameContext

        def atSignName(self):
            return self.getTypedRuleContext(HqlParser.AtSignNameContext,0)


        def identifierOrExtendedKeywordOrEscapedName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext,0)


        def extendedPathName(self):
            return self.getTypedRuleContext(HqlParser.ExtendedPathNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_entityName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityName" ):
                listener.enterEntityName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityName" ):
                listener.exitEntityName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntityName" ):
                return visitor.visitEntityName(self)
            else:
                return visitor.visitChildren(self)




    def entityName(self):

        localctx = HqlParser.EntityNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_entityName)
        try:
            self.state = 2510
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2507
                localctx.ATSIGN = self.atSignName()
                pass
            elif token in [30, 38, 39, 40, 41, 42, 47, 50, 53, 55, 57, 59, 61, 62, 66, 69, 71, 72, 74, 75, 77, 78, 82, 83, 86, 87, 89, 90, 91, 94, 95, 105, 113, 125, 127, 128, 129, 131, 133, 134, 141, 142, 145, 146, 148, 149, 150, 154, 156, 162, 163, 184, 185, 186, 187, 188, 192, 193, 195, 198, 199, 201, 205, 206, 214, 215, 216, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 231, 233, 234, 238, 239, 241, 242, 246, 247, 248, 249, 250, 251, 252, 254, 257, 258, 259, 260, 261, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 289, 321]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2508
                localctx.Name = self.identifierOrExtendedKeywordOrEscapedName()
                pass
            elif token in [138, 264, 268]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2509
                localctx.ExtendedName = self.extendedPathName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityNameReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # EntityNameContext

        def entityName(self):
            return self.getTypedRuleContext(HqlParser.EntityNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_entityNameReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityNameReference" ):
                listener.enterEntityNameReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityNameReference" ):
                listener.exitEntityNameReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntityNameReference" ):
                return visitor.visitEntityNameReference(self)
            else:
                return visitor.visitChildren(self)




    def entityNameReference(self):

        localctx = HqlParser.EntityNameReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_entityNameReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2512
            localctx.Name = self.entityName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtSignNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.NameToken = None # Token

        def ATSIGN(self):
            return self.getToken(HqlParser.ATSIGN, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_atSignName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtSignName" ):
                listener.enterAtSignName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtSignName" ):
                listener.exitAtSignName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtSignName" ):
                return visitor.visitAtSignName(self)
            else:
                return visitor.visitChildren(self)




    def atSignName(self):

        localctx = HqlParser.AtSignNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_atSignName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2514
            localctx.NameToken = self.match(HqlParser.ATSIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendedPathNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.NameToken = None # Token

        def KIND(self):
            return self.getToken(HqlParser.KIND, 0)

        def WITHSOURCE(self):
            return self.getToken(HqlParser.WITHSOURCE, 0)

        def WITH_SOURCE(self):
            return self.getToken(HqlParser.WITH_SOURCE, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_extendedPathName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendedPathName" ):
                listener.enterExtendedPathName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendedPathName" ):
                listener.exitExtendedPathName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendedPathName" ):
                return visitor.visitExtendedPathName(self)
            else:
                return visitor.visitChildren(self)




    def extendedPathName(self):

        localctx = HqlParser.ExtendedPathNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_extendedPathName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2516
            localctx.NameToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==138 or _la==264 or _la==268):
                localctx.NameToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedEntityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wildcardedNameReference(self):
            return self.getTypedRuleContext(HqlParser.WildcardedNameReferenceContext,0)


        def dotCompositeFunctionCallExpression(self):
            return self.getTypedRuleContext(HqlParser.DotCompositeFunctionCallExpressionContext,0)


        def wildcardedPathExpression(self):
            return self.getTypedRuleContext(HqlParser.WildcardedPathExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_wildcardedEntityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedEntityExpression" ):
                listener.enterWildcardedEntityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedEntityExpression" ):
                listener.exitWildcardedEntityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcardedEntityExpression" ):
                return visitor.visitWildcardedEntityExpression(self)
            else:
                return visitor.visitChildren(self)




    def wildcardedEntityExpression(self):

        localctx = HqlParser.WildcardedEntityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_wildcardedEntityExpression)
        try:
            self.state = 2521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2518
                self.wildcardedNameReference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2519
                self.dotCompositeFunctionCallExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2520
                self.wildcardedPathExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedPathExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # DotCompositeFunctionCallExpressionContext
            self.Name = None # WildcardedPathNameContext

        def DOT(self):
            return self.getToken(HqlParser.DOT, 0)

        def dotCompositeFunctionCallExpression(self):
            return self.getTypedRuleContext(HqlParser.DotCompositeFunctionCallExpressionContext,0)


        def wildcardedPathName(self):
            return self.getTypedRuleContext(HqlParser.WildcardedPathNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_wildcardedPathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedPathExpression" ):
                listener.enterWildcardedPathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedPathExpression" ):
                listener.exitWildcardedPathExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcardedPathExpression" ):
                return visitor.visitWildcardedPathExpression(self)
            else:
                return visitor.visitChildren(self)




    def wildcardedPathExpression(self):

        localctx = HqlParser.WildcardedPathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_wildcardedPathExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2523
            localctx.Expression = self.dotCompositeFunctionCallExpression()
            self.state = 2524
            self.match(HqlParser.DOT)
            self.state = 2525
            localctx.Name = self.wildcardedPathName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedPathNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wildcardedName(self):
            return self.getTypedRuleContext(HqlParser.WildcardedNameContext,0)


        def entityName(self):
            return self.getTypedRuleContext(HqlParser.EntityNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_wildcardedPathName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedPathName" ):
                listener.enterWildcardedPathName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedPathName" ):
                listener.exitWildcardedPathName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcardedPathName" ):
                return visitor.visitWildcardedPathName(self)
            else:
                return visitor.visitChildren(self)




    def wildcardedPathName(self):

        localctx = HqlParser.WildcardedPathNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_wildcardedPathName)
        try:
            self.state = 2529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2527
                self.wildcardedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2528
                self.entityName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextualDataTableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Id = None # Token
            self.Schema = None # RowSchemaContext

        def CONTEXTUAL_DATATABLE(self):
            return self.getToken(HqlParser.CONTEXTUAL_DATATABLE, 0)

        def GUIDLITERAL(self):
            return self.getToken(HqlParser.GUIDLITERAL, 0)

        def rowSchema(self):
            return self.getTypedRuleContext(HqlParser.RowSchemaContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_contextualDataTableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextualDataTableExpression" ):
                listener.enterContextualDataTableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextualDataTableExpression" ):
                listener.exitContextualDataTableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContextualDataTableExpression" ):
                return visitor.visitContextualDataTableExpression(self)
            else:
                return visitor.visitChildren(self)




    def contextualDataTableExpression(self):

        localctx = HqlParser.ContextualDataTableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_contextualDataTableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2531
            self.match(HqlParser.CONTEXTUAL_DATATABLE)
            self.state = 2532
            localctx.Id = self.match(HqlParser.GUIDLITERAL)
            self.state = 2533
            localctx.Schema = self.rowSchema()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Schema = None # RowSchemaContext
            self._literalExpression = None # LiteralExpressionContext
            self.Values = list() # of LiteralExpressionContexts

        def DATATABLE(self):
            return self.getToken(HqlParser.DATATABLE, 0)

        def OPENBRACKET(self):
            return self.getToken(HqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(HqlParser.CLOSEBRACKET, 0)

        def rowSchema(self):
            return self.getTypedRuleContext(HqlParser.RowSchemaContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def literalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.LiteralExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.LiteralExpressionContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_dataTableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTableExpression" ):
                listener.enterDataTableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTableExpression" ):
                listener.exitDataTableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataTableExpression" ):
                return visitor.visitDataTableExpression(self)
            else:
                return visitor.visitChildren(self)




    def dataTableExpression(self):

        localctx = HqlParser.DataTableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_dataTableExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2535
            self.match(HqlParser.DATATABLE)
            self.state = 2539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223372019670515679) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 36028797018963981) != 0):
                self.state = 2536
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 2541
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2542
            localctx.Schema = self.rowSchema()
            self.state = 2543
            self.match(HqlParser.OPENBRACKET)
            self.state = 2545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11 or _la==33 or ((((_la - 287)) & ~0x3f) == 0 and ((1 << (_la - 287)) & 12876513281) != 0):
                self.state = 2544
                localctx._literalExpression = self.literalExpression()
                localctx.Values.append(localctx._literalExpression)


            self.state = 2551
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2547
                    self.match(HqlParser.COMMA)
                    self.state = 2548
                    localctx._literalExpression = self.literalExpression()
                    localctx.Values.append(localctx._literalExpression) 
                self.state = 2553
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

            self.state = 2555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 2554
                self.match(HqlParser.COMMA)


            self.state = 2557
            self.match(HqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._rowSchemaColumnDeclaration = None # RowSchemaColumnDeclarationContext
            self.Columns = list() # of RowSchemaColumnDeclarationContexts

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def rowSchemaColumnDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RowSchemaColumnDeclarationContext)
            else:
                return self.getTypedRuleContext(HqlParser.RowSchemaColumnDeclarationContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_rowSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowSchema" ):
                listener.enterRowSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowSchema" ):
                listener.exitRowSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowSchema" ):
                return visitor.visitRowSchema(self)
            else:
                return visitor.visitChildren(self)




    def rowSchema(self):

        localctx = HqlParser.RowSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_rowSchema)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2559
            self.match(HqlParser.OPENPAREN)
            self.state = 2561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416123978121216) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -1729240968798725271) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 7196752211023416333) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & -3749008268648248231) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 4611686019509516303) != 0):
                self.state = 2560
                localctx._rowSchemaColumnDeclaration = self.rowSchemaColumnDeclaration()
                localctx.Columns.append(localctx._rowSchemaColumnDeclaration)


            self.state = 2567
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,234,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2563
                    self.match(HqlParser.COMMA)
                    self.state = 2564
                    localctx._rowSchemaColumnDeclaration = self.rowSchemaColumnDeclaration()
                    localctx.Columns.append(localctx._rowSchemaColumnDeclaration) 
                self.state = 2569
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,234,self._ctx)

            self.state = 2571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 2570
                self.match(HqlParser.COMMA)


            self.state = 2573
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowSchemaColumnDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.Type = None # ScalarTypeContext

        def COLON(self):
            return self.getToken(HqlParser.COLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(HqlParser.ParameterNameContext,0)


        def scalarType(self):
            return self.getTypedRuleContext(HqlParser.ScalarTypeContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_rowSchemaColumnDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowSchemaColumnDeclaration" ):
                listener.enterRowSchemaColumnDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowSchemaColumnDeclaration" ):
                listener.exitRowSchemaColumnDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowSchemaColumnDeclaration" ):
                return visitor.visitRowSchemaColumnDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def rowSchemaColumnDeclaration(self):

        localctx = HqlParser.RowSchemaColumnDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_rowSchemaColumnDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2575
            localctx.Name = self.parameterName()
            self.state = 2576
            self.match(HqlParser.COLON)
            self.state = 2577
            localctx.Type = self.scalarType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalDataExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Schema = None # RowSchemaContext
            self._stringLiteralExpression = None # StringLiteralExpressionContext
            self.ConnectionStrings = list() # of StringLiteralExpressionContexts
            self.WithClause = None # ExternalDataWithClauseContext

        def OPENBRACKET(self):
            return self.getToken(HqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(HqlParser.CLOSEBRACKET, 0)

        def rowSchema(self):
            return self.getTypedRuleContext(HqlParser.RowSchemaContext,0)


        def stringLiteralExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.StringLiteralExpressionContext)
            else:
                return self.getTypedRuleContext(HqlParser.StringLiteralExpressionContext,i)


        def EXTERNALDATA(self):
            return self.getToken(HqlParser.EXTERNALDATA, 0)

        def EXTERNAL_DATA(self):
            return self.getToken(HqlParser.EXTERNAL_DATA, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(HqlParser.RelaxedQueryOperatorParameterContext,i)


        def externalDataWithClause(self):
            return self.getTypedRuleContext(HqlParser.ExternalDataWithClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_externalDataExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDataExpression" ):
                listener.enterExternalDataExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDataExpression" ):
                listener.exitExternalDataExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalDataExpression" ):
                return visitor.visitExternalDataExpression(self)
            else:
                return visitor.visitChildren(self)




    def externalDataExpression(self):

        localctx = HqlParser.ExternalDataExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_externalDataExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2579
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==87 or _la==88):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -9223372019670515679) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 11568127) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -2305843008139952127) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 36028797018963981) != 0):
                self.state = 2580
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 2585
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2586
            localctx.Schema = self.rowSchema()
            self.state = 2587
            self.match(HqlParser.OPENBRACKET)
            self.state = 2588
            localctx._stringLiteralExpression = self.stringLiteralExpression()
            localctx.ConnectionStrings.append(localctx._stringLiteralExpression)
            self.state = 2593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 2589
                self.match(HqlParser.COMMA)
                self.state = 2590
                localctx._stringLiteralExpression = self.stringLiteralExpression()
                localctx.ConnectionStrings.append(localctx._stringLiteralExpression)
                self.state = 2595
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2596
            self.match(HqlParser.CLOSEBRACKET)
            self.state = 2598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.state = 2597
                localctx.WithClause = self.externalDataWithClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalDataWithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._externalDataWithClauseProperty = None # ExternalDataWithClausePropertyContext
            self.Properties = list() # of ExternalDataWithClausePropertyContexts

        def WITH(self):
            return self.getToken(HqlParser.WITH, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def externalDataWithClauseProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.ExternalDataWithClausePropertyContext)
            else:
                return self.getTypedRuleContext(HqlParser.ExternalDataWithClausePropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_externalDataWithClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDataWithClause" ):
                listener.enterExternalDataWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDataWithClause" ):
                listener.exitExternalDataWithClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalDataWithClause" ):
                return visitor.visitExternalDataWithClause(self)
            else:
                return visitor.visitChildren(self)




    def externalDataWithClause(self):

        localctx = HqlParser.ExternalDataWithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_externalDataWithClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2600
            self.match(HqlParser.WITH)
            self.state = 2601
            self.match(HqlParser.OPENPAREN)
            self.state = 2613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416123978121216) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -1729240968798725271) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 7196752211023416333) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & -3749008268648248231) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 4611686019509516303) != 0):
                self.state = 2602
                localctx._externalDataWithClauseProperty = self.externalDataWithClauseProperty()
                localctx.Properties.append(localctx._externalDataWithClauseProperty)
                self.state = 2607
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,239,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2603
                        self.match(HqlParser.COMMA)
                        self.state = 2604
                        localctx._externalDataWithClauseProperty = self.externalDataWithClauseProperty()
                        localctx.Properties.append(localctx._externalDataWithClauseProperty) 
                    self.state = 2609
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,239,self._ctx)

                self.state = 2611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 2610
                    self.match(HqlParser.COMMA)




            self.state = 2615
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalDataWithClausePropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.StringValue = None # StringLiteralExpressionContext
            self.TokenValue = None # Token
            self.NameValue = None # ParameterNameContext

        def EQUAL(self):
            return self.getToken(HqlParser.EQUAL, 0)

        def parameterName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.ParameterNameContext)
            else:
                return self.getTypedRuleContext(HqlParser.ParameterNameContext,i)


        def stringLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.StringLiteralExpressionContext,0)


        def LONGLITERAL(self):
            return self.getToken(HqlParser.LONGLITERAL, 0)

        def REALLITERAL(self):
            return self.getToken(HqlParser.REALLITERAL, 0)

        def BOOLEANLITERAL(self):
            return self.getToken(HqlParser.BOOLEANLITERAL, 0)

        def DATETIMELITERAL(self):
            return self.getToken(HqlParser.DATETIMELITERAL, 0)

        def TYPELITERAL(self):
            return self.getToken(HqlParser.TYPELITERAL, 0)

        def GUIDLITERAL(self):
            return self.getToken(HqlParser.GUIDLITERAL, 0)

        def RAWGUIDLITERAL(self):
            return self.getToken(HqlParser.RAWGUIDLITERAL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_externalDataWithClauseProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDataWithClauseProperty" ):
                listener.enterExternalDataWithClauseProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDataWithClauseProperty" ):
                listener.exitExternalDataWithClauseProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalDataWithClauseProperty" ):
                return visitor.visitExternalDataWithClauseProperty(self)
            else:
                return visitor.visitChildren(self)




    def externalDataWithClauseProperty(self):

        localctx = HqlParser.ExternalDataWithClausePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_externalDataWithClauseProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2617
            localctx.Name = self.parameterName()
            self.state = 2618
            self.match(HqlParser.EQUAL)
            self.state = 2622
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [314]:
                self.state = 2619
                localctx.StringValue = self.stringLiteralExpression()
                pass
            elif token in [310, 312, 315, 316, 318, 319, 320]:
                self.state = 2620
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 310)) & ~0x3f) == 0 and ((1 << (_la - 310)) & 1893) != 0)):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [30, 38, 39, 40, 41, 42, 47, 50, 53, 55, 57, 59, 61, 62, 66, 69, 71, 72, 74, 75, 77, 78, 82, 83, 86, 87, 89, 90, 91, 94, 95, 105, 113, 125, 127, 128, 129, 131, 133, 134, 141, 142, 145, 146, 148, 149, 150, 154, 156, 162, 163, 184, 185, 186, 187, 188, 192, 193, 195, 198, 199, 201, 205, 206, 214, 215, 216, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 231, 233, 234, 238, 239, 241, 242, 246, 247, 248, 249, 250, 251, 252, 254, 257, 258, 259, 260, 261, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 289, 321]:
                self.state = 2621
                localctx.NameValue = self.parameterName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaterializedViewCombineExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # StringLiteralExpressionContext
            self.BaseClause = None # MaterializeViewCombineBaseClauseContext
            self.DeltaClause = None # MaterializedViewCombineDeltaClauseContext
            self.AggregationsClause = None # MaterializedViewCombineAggregationsClauseContext

        def MATERIALIZED_VIEW_COMBINE(self):
            return self.getToken(HqlParser.MATERIALIZED_VIEW_COMBINE, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def stringLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.StringLiteralExpressionContext,0)


        def materializeViewCombineBaseClause(self):
            return self.getTypedRuleContext(HqlParser.MaterializeViewCombineBaseClauseContext,0)


        def materializedViewCombineDeltaClause(self):
            return self.getTypedRuleContext(HqlParser.MaterializedViewCombineDeltaClauseContext,0)


        def materializedViewCombineAggregationsClause(self):
            return self.getTypedRuleContext(HqlParser.MaterializedViewCombineAggregationsClauseContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_materializedViewCombineExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterializedViewCombineExpression" ):
                listener.enterMaterializedViewCombineExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterializedViewCombineExpression" ):
                listener.exitMaterializedViewCombineExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaterializedViewCombineExpression" ):
                return visitor.visitMaterializedViewCombineExpression(self)
            else:
                return visitor.visitChildren(self)




    def materializedViewCombineExpression(self):

        localctx = HqlParser.MaterializedViewCombineExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_materializedViewCombineExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2624
            self.match(HqlParser.MATERIALIZED_VIEW_COMBINE)
            self.state = 2625
            self.match(HqlParser.OPENPAREN)
            self.state = 2626
            localctx.Name = self.stringLiteralExpression()
            self.state = 2627
            self.match(HqlParser.CLOSEPAREN)
            self.state = 2628
            localctx.BaseClause = self.materializeViewCombineBaseClause()
            self.state = 2629
            localctx.DeltaClause = self.materializedViewCombineDeltaClause()
            self.state = 2630
            localctx.AggregationsClause = self.materializedViewCombineAggregationsClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaterializeViewCombineBaseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ExpressionContext

        def BASE(self):
            return self.getToken(HqlParser.BASE, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_materializeViewCombineBaseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterializeViewCombineBaseClause" ):
                listener.enterMaterializeViewCombineBaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterializeViewCombineBaseClause" ):
                listener.exitMaterializeViewCombineBaseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaterializeViewCombineBaseClause" ):
                return visitor.visitMaterializeViewCombineBaseClause(self)
            else:
                return visitor.visitChildren(self)




    def materializeViewCombineBaseClause(self):

        localctx = HqlParser.MaterializeViewCombineBaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_materializeViewCombineBaseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2632
            self.match(HqlParser.BASE)
            self.state = 2633
            self.match(HqlParser.OPENPAREN)
            self.state = 2634
            localctx.Expression = self.expression()
            self.state = 2635
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaterializedViewCombineDeltaClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ExpressionContext

        def DELTA(self):
            return self.getToken(HqlParser.DELTA, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_materializedViewCombineDeltaClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterializedViewCombineDeltaClause" ):
                listener.enterMaterializedViewCombineDeltaClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterializedViewCombineDeltaClause" ):
                listener.exitMaterializedViewCombineDeltaClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaterializedViewCombineDeltaClause" ):
                return visitor.visitMaterializedViewCombineDeltaClause(self)
            else:
                return visitor.visitChildren(self)




    def materializedViewCombineDeltaClause(self):

        localctx = HqlParser.MaterializedViewCombineDeltaClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_materializedViewCombineDeltaClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2637
            self.match(HqlParser.DELTA)
            self.state = 2638
            self.match(HqlParser.OPENPAREN)
            self.state = 2639
            localctx.Expression = self.expression()
            self.state = 2640
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaterializedViewCombineAggregationsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # SummarizeOperatorContext

        def AGGREGATIONS(self):
            return self.getToken(HqlParser.AGGREGATIONS, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def summarizeOperator(self):
            return self.getTypedRuleContext(HqlParser.SummarizeOperatorContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_materializedViewCombineAggregationsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterializedViewCombineAggregationsClause" ):
                listener.enterMaterializedViewCombineAggregationsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterializedViewCombineAggregationsClause" ):
                listener.exitMaterializedViewCombineAggregationsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaterializedViewCombineAggregationsClause" ):
                return visitor.visitMaterializedViewCombineAggregationsClause(self)
            else:
                return visitor.visitChildren(self)




    def materializedViewCombineAggregationsClause(self):

        localctx = HqlParser.MaterializedViewCombineAggregationsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_materializedViewCombineAggregationsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2642
            self.match(HqlParser.AGGREGATIONS)
            self.state = 2643
            self.match(HqlParser.OPENPAREN)
            self.state = 2644
            localctx.Operator = self.summarizeOperator()
            self.state = 2645
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def BOOL(self):
            return self.getToken(HqlParser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(HqlParser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(HqlParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(HqlParser.DATETIME, 0)

        def DECIMAL(self):
            return self.getToken(HqlParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(HqlParser.DOUBLE, 0)

        def DYNAMIC(self):
            return self.getToken(HqlParser.DYNAMIC, 0)

        def GUID(self):
            return self.getToken(HqlParser.GUID, 0)

        def INT(self):
            return self.getToken(HqlParser.INT, 0)

        def INT64(self):
            return self.getToken(HqlParser.INT64, 0)

        def INT8(self):
            return self.getToken(HqlParser.INT8, 0)

        def LONG(self):
            return self.getToken(HqlParser.LONG, 0)

        def REAL(self):
            return self.getToken(HqlParser.REAL, 0)

        def STRING(self):
            return self.getToken(HqlParser.STRING, 0)

        def TIME(self):
            return self.getToken(HqlParser.TIME, 0)

        def TIMESPAN(self):
            return self.getToken(HqlParser.TIMESPAN, 0)

        def UNIQUEID(self):
            return self.getToken(HqlParser.UNIQUEID, 0)

        def IP4(self):
            return self.getToken(HqlParser.IP4, 0)

        def IP6(self):
            return self.getToken(HqlParser.IP6, 0)

        def IP(self):
            return self.getToken(HqlParser.IP, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_scalarType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarType" ):
                listener.enterScalarType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarType" ):
                listener.exitScalarType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalarType" ):
                return visitor.visitScalarType(self)
            else:
                return visitor.visitChildren(self)




    def scalarType(self):

        localctx = HqlParser.ScalarTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_scalarType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2647
            localctx.Token = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 281)) & ~0x3f) == 0 and ((1 << (_la - 281)) & 503834495) != 0)):
                localctx.Token = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendedScalarTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def BOOL(self):
            return self.getToken(HqlParser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(HqlParser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(HqlParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(HqlParser.DATETIME, 0)

        def DECIMAL(self):
            return self.getToken(HqlParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(HqlParser.DOUBLE, 0)

        def DYNAMIC(self):
            return self.getToken(HqlParser.DYNAMIC, 0)

        def FLOAT(self):
            return self.getToken(HqlParser.FLOAT, 0)

        def GUID(self):
            return self.getToken(HqlParser.GUID, 0)

        def INT(self):
            return self.getToken(HqlParser.INT, 0)

        def INT16(self):
            return self.getToken(HqlParser.INT16, 0)

        def INT32(self):
            return self.getToken(HqlParser.INT32, 0)

        def INT64(self):
            return self.getToken(HqlParser.INT64, 0)

        def INT8(self):
            return self.getToken(HqlParser.INT8, 0)

        def LONG(self):
            return self.getToken(HqlParser.LONG, 0)

        def REAL(self):
            return self.getToken(HqlParser.REAL, 0)

        def STRING(self):
            return self.getToken(HqlParser.STRING, 0)

        def TIME(self):
            return self.getToken(HqlParser.TIME, 0)

        def TIMESPAN(self):
            return self.getToken(HqlParser.TIMESPAN, 0)

        def UINT(self):
            return self.getToken(HqlParser.UINT, 0)

        def UINT16(self):
            return self.getToken(HqlParser.UINT16, 0)

        def UINT32(self):
            return self.getToken(HqlParser.UINT32, 0)

        def UINT64(self):
            return self.getToken(HqlParser.UINT64, 0)

        def UINT8(self):
            return self.getToken(HqlParser.UINT8, 0)

        def ULONG(self):
            return self.getToken(HqlParser.ULONG, 0)

        def UNIQUEID(self):
            return self.getToken(HqlParser.UNIQUEID, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_extendedScalarType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendedScalarType" ):
                listener.enterExtendedScalarType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendedScalarType" ):
                listener.exitExtendedScalarType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendedScalarType" ):
                return visitor.visitExtendedScalarType(self)
            else:
                return visitor.visitChildren(self)




    def extendedScalarType(self):

        localctx = HqlParser.ExtendedScalarTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_extendedScalarType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2649
            localctx.Token = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 281)) & ~0x3f) == 0 and ((1 << (_la - 281)) & 67108863) != 0)):
                localctx.Token = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrExtendedKeywordOrEscapedNameContext

        def identifierOrExtendedKeywordOrEscapedName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_parameterName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterName" ):
                listener.enterParameterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterName" ):
                listener.exitParameterName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterName" ):
                return visitor.visitParameterName(self)
            else:
                return visitor.visitChildren(self)




    def parameterName(self):

        localctx = HqlParser.ParameterNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_parameterName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2651
            localctx.Name = self.identifierOrExtendedKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleNameReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_simpleNameReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleNameReference" ):
                listener.enterSimpleNameReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleNameReference" ):
                listener.exitSimpleNameReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleNameReference" ):
                return visitor.visitSimpleNameReference(self)
            else:
                return visitor.visitChildren(self)




    def simpleNameReference(self):

        localctx = HqlParser.SimpleNameReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_simpleNameReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2653
            localctx.Name = self.identifierOrKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendedNameReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrExtendedKeywordOrEscapedNameContext

        def identifierOrExtendedKeywordOrEscapedName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_extendedNameReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendedNameReference" ):
                listener.enterExtendedNameReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendedNameReference" ):
                listener.exitExtendedNameReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendedNameReference" ):
                return visitor.visitExtendedNameReference(self)
            else:
                return visitor.visitChildren(self)




    def extendedNameReference(self):

        localctx = HqlParser.ExtendedNameReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_extendedNameReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2655
            localctx.Name = self.identifierOrExtendedKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedNameReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # WildcardedNameContext

        def wildcardedName(self):
            return self.getTypedRuleContext(HqlParser.WildcardedNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_wildcardedNameReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedNameReference" ):
                listener.enterWildcardedNameReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedNameReference" ):
                listener.exitWildcardedNameReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcardedNameReference" ):
                return visitor.visitWildcardedNameReference(self)
            else:
                return visitor.visitChildren(self)




    def wildcardedNameReference(self):

        localctx = HqlParser.WildcardedNameReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_wildcardedNameReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2657
            localctx.Name = self.wildcardedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleOrWildcardedNameReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SimpleName = None # SimpleNameReferenceContext
            self.WildcardedName = None # WildcardedNameReferenceContext

        def simpleNameReference(self):
            return self.getTypedRuleContext(HqlParser.SimpleNameReferenceContext,0)


        def wildcardedNameReference(self):
            return self.getTypedRuleContext(HqlParser.WildcardedNameReferenceContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_simpleOrWildcardedNameReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleOrWildcardedNameReference" ):
                listener.enterSimpleOrWildcardedNameReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleOrWildcardedNameReference" ):
                listener.exitSimpleOrWildcardedNameReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleOrWildcardedNameReference" ):
                return visitor.visitSimpleOrWildcardedNameReference(self)
            else:
                return visitor.visitChildren(self)




    def simpleOrWildcardedNameReference(self):

        localctx = HqlParser.SimpleOrWildcardedNameReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_simpleOrWildcardedNameReference)
        try:
            self.state = 2661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2659
                localctx.SimpleName = self.simpleNameReference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2660
                localctx.WildcardedName = self.wildcardedNameReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableNameReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.WildcardName = None # WildcardedNameContext
            self.IdentifierName = None # IdentifierNameContext
            self.EscapedName = None # EscapedNameContext

        def wildcardedName(self):
            return self.getTypedRuleContext(HqlParser.WildcardedNameContext,0)


        def identifierName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierNameContext,0)


        def escapedName(self):
            return self.getTypedRuleContext(HqlParser.EscapedNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_tableNameReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableNameReference" ):
                listener.enterTableNameReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableNameReference" ):
                listener.exitTableNameReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableNameReference" ):
                return visitor.visitTableNameReference(self)
            else:
                return visitor.visitChildren(self)




    def tableNameReference(self):

        localctx = HqlParser.TableNameReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_tableNameReference)
        try:
            self.state = 2666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2663
                localctx.WildcardName = self.wildcardedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2664
                localctx.IdentifierName = self.identifierName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2665
                localctx.EscapedName = self.escapedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def IDENTIFIER(self):
            return self.getToken(HqlParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_identifierName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierName" ):
                listener.enterIdentifierName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierName" ):
                listener.exitIdentifierName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierName" ):
                return visitor.visitIdentifierName(self)
            else:
                return visitor.visitChildren(self)




    def identifierName(self):

        localctx = HqlParser.IdentifierNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_identifierName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2668
            localctx.Token = self.match(HqlParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def ACCESS(self):
            return self.getToken(HqlParser.ACCESS, 0)

        def AGGREGATIONS(self):
            return self.getToken(HqlParser.AGGREGATIONS, 0)

        def ALIAS(self):
            return self.getToken(HqlParser.ALIAS, 0)

        def ALL(self):
            return self.getToken(HqlParser.ALL, 0)

        def AXES(self):
            return self.getToken(HqlParser.AXES, 0)

        def BASE(self):
            return self.getToken(HqlParser.BASE, 0)

        def BIN(self):
            return self.getToken(HqlParser.BIN, 0)

        def BOOL(self):
            return self.getToken(HqlParser.BOOL, 0)

        def CLUSTER(self):
            return self.getToken(HqlParser.CLUSTER, 0)

        def DATABASE(self):
            return self.getToken(HqlParser.DATABASE, 0)

        def DECLARE(self):
            return self.getToken(HqlParser.DECLARE, 0)

        def DEFAULT(self):
            return self.getToken(HqlParser.DEFAULT, 0)

        def DELTA(self):
            return self.getToken(HqlParser.DELTA, 0)

        def EDGES(self):
            return self.getToken(HqlParser.EDGES, 0)

        def EVALUATE(self):
            return self.getToken(HqlParser.EVALUATE, 0)

        def EXECUTE(self):
            return self.getToken(HqlParser.EXECUTE, 0)

        def FACET(self):
            return self.getToken(HqlParser.FACET, 0)

        def FORK(self):
            return self.getToken(HqlParser.FORK, 0)

        def FROM(self):
            return self.getToken(HqlParser.FROM, 0)

        def GUID(self):
            return self.getToken(HqlParser.GUID, 0)

        def HIDDEN_(self):
            return self.getToken(HqlParser.HIDDEN_, 0)

        def HOT(self):
            return self.getToken(HqlParser.HOT, 0)

        def HOTDATA(self):
            return self.getToken(HqlParser.HOTDATA, 0)

        def HOTINDEX(self):
            return self.getToken(HqlParser.HOTINDEX, 0)

        def ID(self):
            return self.getToken(HqlParser.ID, 0)

        def INTO(self):
            return self.getToken(HqlParser.INTO, 0)

        def LEGEND(self):
            return self.getToken(HqlParser.LEGEND, 0)

        def LET(self):
            return self.getToken(HqlParser.LET, 0)

        def LINEAR(self):
            return self.getToken(HqlParser.LINEAR, 0)

        def LOG(self):
            return self.getToken(HqlParser.LOG, 0)

        def LOOKUP(self):
            return self.getToken(HqlParser.LOOKUP, 0)

        def LIST(self):
            return self.getToken(HqlParser.LIST, 0)

        def MAP(self):
            return self.getToken(HqlParser.MAP, 0)

        def NODES(self):
            return self.getToken(HqlParser.NODES, 0)

        def NONE(self):
            return self.getToken(HqlParser.NONE, 0)

        def NULL(self):
            return self.getToken(HqlParser.NULL, 0)

        def NULLS(self):
            return self.getToken(HqlParser.NULLS, 0)

        def ON(self):
            return self.getToken(HqlParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(HqlParser.OPTIONAL, 0)

        def OUTPUT(self):
            return self.getToken(HqlParser.OUTPUT, 0)

        def PACK(self):
            return self.getToken(HqlParser.PACK, 0)

        def PARTITION(self):
            return self.getToken(HqlParser.PARTITION, 0)

        def PARTITIONBY(self):
            return self.getToken(HqlParser.PARTITIONBY, 0)

        def PATTERN(self):
            return self.getToken(HqlParser.PATTERN, 0)

        def PLUGIN(self):
            return self.getToken(HqlParser.PLUGIN, 0)

        def QUERYPARAMETERS(self):
            return self.getToken(HqlParser.QUERYPARAMETERS, 0)

        def RANGE(self):
            return self.getToken(HqlParser.RANGE, 0)

        def REDUCE(self):
            return self.getToken(HqlParser.REDUCE, 0)

        def REPLACE(self):
            return self.getToken(HqlParser.REPLACE, 0)

        def RENDER(self):
            return self.getToken(HqlParser.RENDER, 0)

        def RESTRICT(self):
            return self.getToken(HqlParser.RESTRICT, 0)

        def SERIES(self):
            return self.getToken(HqlParser.SERIES, 0)

        def STACKED(self):
            return self.getToken(HqlParser.STACKED, 0)

        def STACKED100(self):
            return self.getToken(HqlParser.STACKED100, 0)

        def STEP(self):
            return self.getToken(HqlParser.STEP, 0)

        def THRESHOLD(self):
            return self.getToken(HqlParser.THRESHOLD, 0)

        def TYPEOF(self):
            return self.getToken(HqlParser.TYPEOF, 0)

        def UNSTACKED(self):
            return self.getToken(HqlParser.UNSTACKED, 0)

        def UUID(self):
            return self.getToken(HqlParser.UUID, 0)

        def VIEW(self):
            return self.getToken(HqlParser.VIEW, 0)

        def VISIBLE(self):
            return self.getToken(HqlParser.VISIBLE, 0)

        def WITH(self):
            return self.getToken(HqlParser.WITH, 0)

        def XAXIS(self):
            return self.getToken(HqlParser.XAXIS, 0)

        def XCOLUMN(self):
            return self.getToken(HqlParser.XCOLUMN, 0)

        def XMAX(self):
            return self.getToken(HqlParser.XMAX, 0)

        def XMIN(self):
            return self.getToken(HqlParser.XMIN, 0)

        def XTITLE(self):
            return self.getToken(HqlParser.XTITLE, 0)

        def YAXIS(self):
            return self.getToken(HqlParser.YAXIS, 0)

        def YCOLUMNS(self):
            return self.getToken(HqlParser.YCOLUMNS, 0)

        def YMAX(self):
            return self.getToken(HqlParser.YMAX, 0)

        def YMIN(self):
            return self.getToken(HqlParser.YMIN, 0)

        def YTITLE(self):
            return self.getToken(HqlParser.YTITLE, 0)

        def YSPLIT(self):
            return self.getToken(HqlParser.YSPLIT, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_keywordName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordName" ):
                listener.enterKeywordName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordName" ):
                listener.exitKeywordName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordName" ):
                return visitor.visitKeywordName(self)
            else:
                return visitor.visitChildren(self)




    def keywordName(self):

        localctx = HqlParser.KeywordNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_keywordName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2670
            localctx.Token = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 38)) & ~0x3f) == 0 and ((1 << (_la - 38)) & 218478683485278237) != 0) or ((((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & 1691298798096385) != 0) or ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & 307951464744141595) != 0) or ((((_la - 254)) & ~0x3f) == 0 and ((1 << (_la - 254)) & 34628108665) != 0)):
                localctx.Token = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendedKeywordNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def ACCUMULATE(self):
            return self.getToken(HqlParser.ACCUMULATE, 0)

        def AS(self):
            return self.getToken(HqlParser.AS, 0)

        def BY(self):
            return self.getToken(HqlParser.BY, 0)

        def CONTAINS(self):
            return self.getToken(HqlParser.CONTAINS, 0)

        def CONSUME(self):
            return self.getToken(HqlParser.CONSUME, 0)

        def COUNT(self):
            return self.getToken(HqlParser.COUNT, 0)

        def DATATABLE(self):
            return self.getToken(HqlParser.DATATABLE, 0)

        def DISTINCT(self):
            return self.getToken(HqlParser.DISTINCT, 0)

        def EXTEND(self):
            return self.getToken(HqlParser.EXTEND, 0)

        def EXTERNALDATA(self):
            return self.getToken(HqlParser.EXTERNALDATA, 0)

        def FIND(self):
            return self.getToken(HqlParser.FIND, 0)

        def FILTER(self):
            return self.getToken(HqlParser.FILTER, 0)

        def HAS(self):
            return self.getToken(HqlParser.HAS, 0)

        def IN(self):
            return self.getToken(HqlParser.IN, 0)

        def INVOKE(self):
            return self.getToken(HqlParser.INVOKE, 0)

        def LIMIT(self):
            return self.getToken(HqlParser.LIMIT, 0)

        def MATERIALIZE(self):
            return self.getToken(HqlParser.MATERIALIZE, 0)

        def OF(self):
            return self.getToken(HqlParser.OF, 0)

        def PARSE(self):
            return self.getToken(HqlParser.PARSE, 0)

        def PRINT(self):
            return self.getToken(HqlParser.PRINT, 0)

        def SAMPLE(self):
            return self.getToken(HqlParser.SAMPLE, 0)

        def SAMPLE_DISTINCT(self):
            return self.getToken(HqlParser.SAMPLE_DISTINCT, 0)

        def SCAN(self):
            return self.getToken(HqlParser.SCAN, 0)

        def SEARCH(self):
            return self.getToken(HqlParser.SEARCH, 0)

        def SERIALIZE(self):
            return self.getToken(HqlParser.SERIALIZE, 0)

        def SET(self):
            return self.getToken(HqlParser.SET, 0)

        def SORT(self):
            return self.getToken(HqlParser.SORT, 0)

        def SUMMARIZE(self):
            return self.getToken(HqlParser.SUMMARIZE, 0)

        def TAKE(self):
            return self.getToken(HqlParser.TAKE, 0)

        def TITLE(self):
            return self.getToken(HqlParser.TITLE, 0)

        def TO(self):
            return self.getToken(HqlParser.TO, 0)

        def TOP(self):
            return self.getToken(HqlParser.TOP, 0)

        def TOSCALAR(self):
            return self.getToken(HqlParser.TOSCALAR, 0)

        def TOTABLE(self):
            return self.getToken(HqlParser.TOTABLE, 0)

        def TOP_NESTED(self):
            return self.getToken(HqlParser.TOP_NESTED, 0)

        def TOP_HITTERS(self):
            return self.getToken(HqlParser.TOP_HITTERS, 0)

        def WHERE(self):
            return self.getToken(HqlParser.WHERE, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_extendedKeywordName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendedKeywordName" ):
                listener.enterExtendedKeywordName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendedKeywordName" ):
                listener.exitExtendedKeywordName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendedKeywordName" ):
                return visitor.visitExtendedKeywordName(self)
            else:
                return visitor.visitChildren(self)




    def extendedKeywordName(self):

        localctx = HqlParser.ExtendedKeywordNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_extendedKeywordName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2672
            localctx.Token = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & 7177891226059009) != 0) or ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 2252899929292801) != 0) or ((((_la - 186)) & ~0x3f) == 0 and ((1 << (_la - 186)) & -1107837748295761407) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & 2055) != 0)):
                localctx.Token = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EscapedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.StringLiteral = None # StringLiteralExpressionContext

        def OPENBRACKET(self):
            return self.getToken(HqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(HqlParser.CLOSEBRACKET, 0)

        def stringLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.StringLiteralExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_escapedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEscapedName" ):
                listener.enterEscapedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEscapedName" ):
                listener.exitEscapedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEscapedName" ):
                return visitor.visitEscapedName(self)
            else:
                return visitor.visitChildren(self)




    def escapedName(self):

        localctx = HqlParser.EscapedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_escapedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2674
            self.match(HqlParser.OPENBRACKET)
            self.state = 2675
            localctx.StringLiteral = self.stringLiteralExpression()
            self.state = 2676
            self.match(HqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrKeywordNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Identifier = None # IdentifierNameContext
            self.Keyword = None # KeywordNameContext

        def identifierName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierNameContext,0)


        def keywordName(self):
            return self.getTypedRuleContext(HqlParser.KeywordNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_identifierOrKeywordName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrKeywordName" ):
                listener.enterIdentifierOrKeywordName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrKeywordName" ):
                listener.exitIdentifierOrKeywordName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierOrKeywordName" ):
                return visitor.visitIdentifierOrKeywordName(self)
            else:
                return visitor.visitChildren(self)




    def identifierOrKeywordName(self):

        localctx = HqlParser.IdentifierOrKeywordNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_identifierOrKeywordName)
        try:
            self.state = 2680
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [321]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2678
                localctx.Identifier = self.identifierName()
                pass
            elif token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 113, 125, 127, 128, 129, 133, 141, 142, 146, 148, 149, 150, 154, 162, 163, 184, 185, 187, 188, 192, 193, 198, 199, 201, 205, 214, 215, 216, 219, 220, 221, 228, 233, 234, 238, 242, 254, 257, 258, 259, 260, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 289]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2679
                localctx.Keyword = self.keywordName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrKeywordOrEscapedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Identifier = None # IdentifierNameContext
            self.Keyword = None # KeywordNameContext
            self.Escaped = None # EscapedNameContext

        def identifierName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierNameContext,0)


        def keywordName(self):
            return self.getTypedRuleContext(HqlParser.KeywordNameContext,0)


        def escapedName(self):
            return self.getTypedRuleContext(HqlParser.EscapedNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_identifierOrKeywordOrEscapedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrKeywordOrEscapedName" ):
                listener.enterIdentifierOrKeywordOrEscapedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrKeywordOrEscapedName" ):
                listener.exitIdentifierOrKeywordOrEscapedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierOrKeywordOrEscapedName" ):
                return visitor.visitIdentifierOrKeywordOrEscapedName(self)
            else:
                return visitor.visitChildren(self)




    def identifierOrKeywordOrEscapedName(self):

        localctx = HqlParser.IdentifierOrKeywordOrEscapedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_identifierOrKeywordOrEscapedName)
        try:
            self.state = 2685
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [321]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2682
                localctx.Identifier = self.identifierName()
                pass
            elif token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 113, 125, 127, 128, 129, 133, 141, 142, 146, 148, 149, 150, 154, 162, 163, 184, 185, 187, 188, 192, 193, 198, 199, 201, 205, 214, 215, 216, 219, 220, 221, 228, 233, 234, 238, 242, 254, 257, 258, 259, 260, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 289]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2683
                localctx.Keyword = self.keywordName()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2684
                localctx.Escaped = self.escapedName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrExtendedKeywordOrEscapedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Identifier = None # IdentifierNameContext
            self.Keyword = None # KeywordNameContext
            self.ExtendedKeyword = None # ExtendedKeywordNameContext
            self.Escaped = None # EscapedNameContext

        def identifierName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierNameContext,0)


        def keywordName(self):
            return self.getTypedRuleContext(HqlParser.KeywordNameContext,0)


        def extendedKeywordName(self):
            return self.getTypedRuleContext(HqlParser.ExtendedKeywordNameContext,0)


        def escapedName(self):
            return self.getTypedRuleContext(HqlParser.EscapedNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_identifierOrExtendedKeywordOrEscapedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrExtendedKeywordOrEscapedName" ):
                listener.enterIdentifierOrExtendedKeywordOrEscapedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrExtendedKeywordOrEscapedName" ):
                listener.exitIdentifierOrExtendedKeywordOrEscapedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierOrExtendedKeywordOrEscapedName" ):
                return visitor.visitIdentifierOrExtendedKeywordOrEscapedName(self)
            else:
                return visitor.visitChildren(self)




    def identifierOrExtendedKeywordOrEscapedName(self):

        localctx = HqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_identifierOrExtendedKeywordOrEscapedName)
        try:
            self.state = 2691
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [321]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2687
                localctx.Identifier = self.identifierName()
                pass
            elif token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 113, 125, 127, 128, 129, 133, 141, 142, 146, 148, 149, 150, 154, 162, 163, 184, 185, 187, 188, 192, 193, 198, 199, 201, 205, 214, 215, 216, 219, 220, 221, 228, 233, 234, 238, 242, 254, 257, 258, 259, 260, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 289]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2688
                localctx.Keyword = self.keywordName()
                pass
            elif token in [39, 47, 57, 61, 62, 66, 71, 77, 86, 87, 90, 91, 105, 131, 134, 145, 156, 186, 195, 206, 222, 223, 224, 226, 227, 229, 231, 239, 241, 246, 247, 248, 249, 250, 251, 252, 261]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2689
                localctx.ExtendedKeyword = self.extendedKeywordName()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2690
                localctx.Escaped = self.escapedName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrExtendedKeywordNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Identifier = None # IdentifierNameContext
            self.Keyword = None # KeywordNameContext
            self.ExtendedKeyword = None # ExtendedKeywordNameContext

        def identifierName(self):
            return self.getTypedRuleContext(HqlParser.IdentifierNameContext,0)


        def keywordName(self):
            return self.getTypedRuleContext(HqlParser.KeywordNameContext,0)


        def extendedKeywordName(self):
            return self.getTypedRuleContext(HqlParser.ExtendedKeywordNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_identifierOrExtendedKeywordName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrExtendedKeywordName" ):
                listener.enterIdentifierOrExtendedKeywordName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrExtendedKeywordName" ):
                listener.exitIdentifierOrExtendedKeywordName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierOrExtendedKeywordName" ):
                return visitor.visitIdentifierOrExtendedKeywordName(self)
            else:
                return visitor.visitChildren(self)




    def identifierOrExtendedKeywordName(self):

        localctx = HqlParser.IdentifierOrExtendedKeywordNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_identifierOrExtendedKeywordName)
        try:
            self.state = 2696
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [321]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2693
                localctx.Identifier = self.identifierName()
                pass
            elif token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 113, 125, 127, 128, 129, 133, 141, 142, 146, 148, 149, 150, 154, 162, 163, 184, 185, 187, 188, 192, 193, 198, 199, 201, 205, 214, 215, 216, 219, 220, 221, 228, 233, 234, 238, 242, 254, 257, 258, 259, 260, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 289]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2694
                localctx.Keyword = self.keywordName()
                pass
            elif token in [39, 47, 57, 61, 62, 66, 71, 77, 86, 87, 90, 91, 105, 131, 134, 145, 156, 186, 195, 206, 222, 223, 224, 226, 227, 229, 231, 239, 241, 246, 247, 248, 249, 250, 251, 252, 261]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2695
                localctx.ExtendedKeyword = self.extendedKeywordName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Prefix = None # WildcardedNamePrefixContext
            self._wildcardedNameSegment = None # WildcardedNameSegmentContext
            self.Segments = list() # of WildcardedNameSegmentContexts

        def ASTERISK(self):
            return self.getToken(HqlParser.ASTERISK, 0)

        def wildcardedNamePrefix(self):
            return self.getTypedRuleContext(HqlParser.WildcardedNamePrefixContext,0)


        def wildcardedNameSegment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.WildcardedNameSegmentContext)
            else:
                return self.getTypedRuleContext(HqlParser.WildcardedNameSegmentContext,i)


        def getRuleIndex(self):
            return HqlParser.RULE_wildcardedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedName" ):
                listener.enterWildcardedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedName" ):
                listener.exitWildcardedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcardedName" ):
                return visitor.visitWildcardedName(self)
            else:
                return visitor.visitChildren(self)




    def wildcardedName(self):

        localctx = HqlParser.WildcardedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_wildcardedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416122904379392) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -1729240968798725271) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 7196752211023416333) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & -3749008268648248231) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 4611686019509516303) != 0):
                self.state = 2698
                localctx.Prefix = self.wildcardedNamePrefix()


            self.state = 2701
            self.match(HqlParser.ASTERISK)
            self.state = 2705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416122904379394) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -1729240968798725271) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 7196752211023416333) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & -3749008268648248231) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & 4613937819323201551) != 0):
                self.state = 2702
                localctx._wildcardedNameSegment = self.wildcardedNameSegment()
                localctx.Segments.append(localctx._wildcardedNameSegment)
                self.state = 2707
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedNamePrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Identifier = None # Token
            self.Keyword = None # KeywordNameContext
            self.ExtendedKeyword = None # ExtendedKeywordNameContext

        def IDENTIFIER(self):
            return self.getToken(HqlParser.IDENTIFIER, 0)

        def keywordName(self):
            return self.getTypedRuleContext(HqlParser.KeywordNameContext,0)


        def extendedKeywordName(self):
            return self.getTypedRuleContext(HqlParser.ExtendedKeywordNameContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_wildcardedNamePrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedNamePrefix" ):
                listener.enterWildcardedNamePrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedNamePrefix" ):
                listener.exitWildcardedNamePrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcardedNamePrefix" ):
                return visitor.visitWildcardedNamePrefix(self)
            else:
                return visitor.visitChildren(self)




    def wildcardedNamePrefix(self):

        localctx = HqlParser.WildcardedNamePrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_wildcardedNamePrefix)
        try:
            self.state = 2711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [321]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2708
                localctx.Identifier = self.match(HqlParser.IDENTIFIER)
                pass
            elif token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 113, 125, 127, 128, 129, 133, 141, 142, 146, 148, 149, 150, 154, 162, 163, 184, 185, 187, 188, 192, 193, 198, 199, 201, 205, 214, 215, 216, 219, 220, 221, 228, 233, 234, 238, 242, 254, 257, 258, 259, 260, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 289]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2709
                localctx.Keyword = self.keywordName()
                pass
            elif token in [39, 47, 57, 61, 62, 66, 71, 77, 86, 87, 90, 91, 105, 131, 134, 145, 156, 186, 195, 206, 222, 223, 224, 226, 227, 229, 231, 239, 241, 246, 247, 248, 249, 250, 251, 252, 261]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2710
                localctx.ExtendedKeyword = self.extendedKeywordName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedNameSegmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Identifier = None # Token
            self.Keyword = None # KeywordNameContext
            self.ExtendedKeyword = None # ExtendedKeywordNameContext
            self.Number = None # Token
            self.Star = None # Token

        def IDENTIFIER(self):
            return self.getToken(HqlParser.IDENTIFIER, 0)

        def keywordName(self):
            return self.getTypedRuleContext(HqlParser.KeywordNameContext,0)


        def extendedKeywordName(self):
            return self.getTypedRuleContext(HqlParser.ExtendedKeywordNameContext,0)


        def LONGLITERAL(self):
            return self.getToken(HqlParser.LONGLITERAL, 0)

        def ASTERISK(self):
            return self.getToken(HqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_wildcardedNameSegment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedNameSegment" ):
                listener.enterWildcardedNameSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedNameSegment" ):
                listener.exitWildcardedNameSegment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcardedNameSegment" ):
                return visitor.visitWildcardedNameSegment(self)
            else:
                return visitor.visitChildren(self)




    def wildcardedNameSegment(self):

        localctx = HqlParser.WildcardedNameSegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_wildcardedNameSegment)
        try:
            self.state = 2718
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [321]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2713
                localctx.Identifier = self.match(HqlParser.IDENTIFIER)
                pass
            elif token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 113, 125, 127, 128, 129, 133, 141, 142, 146, 148, 149, 150, 154, 162, 163, 184, 185, 187, 188, 192, 193, 198, 199, 201, 205, 214, 215, 216, 219, 220, 221, 228, 233, 234, 238, 242, 254, 257, 258, 259, 260, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 289]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2714
                localctx.Keyword = self.keywordName()
                pass
            elif token in [39, 47, 57, 61, 62, 66, 71, 77, 86, 87, 90, 91, 105, 131, 134, 145, 156, 186, 195, 206, 222, 223, 224, 226, 227, 229, 231, 239, 241, 246, 247, 248, 249, 250, 251, 252, 261]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2715
                localctx.ExtendedKeyword = self.extendedKeywordName()
                pass
            elif token in [310]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2716
                localctx.Number = self.match(HqlParser.LONGLITERAL)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2717
                localctx.Star = self.match(HqlParser.ASTERISK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Signed = None # SignedLiteralExpressionContext
            self.Unsigned = None # UnsignedLiteralExpressionContext

        def signedLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.SignedLiteralExpressionContext,0)


        def unsignedLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.UnsignedLiteralExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_literalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralExpression" ):
                return visitor.visitLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def literalExpression(self):

        localctx = HqlParser.LiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_literalExpression)
        try:
            self.state = 2722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11, 33]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2720
                localctx.Signed = self.signedLiteralExpression()
                pass
            elif token in [287, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2721
                localctx.Unsigned = self.unsignedLiteralExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsignedLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Long = None # LongLiteralExpressionContext
            self.Int = None # IntLiteralExpressionContext
            self.Real = None # RealLiteralExpressionContext
            self.Decimal = None # DecimalLiteralExpressionContext
            self.DateTime = None # DateTimeLiteralExpressionContext
            self.TimeSpan = None # TimeSpanLiteralExpressionContext
            self.Boolean = None # BooleanLiteralExpressionContext
            self.Guid = None # GuidLiteralExpressionContext
            self.Type = None # TypeLiteralExpressionContext
            self.String = None # StringLiteralExpressionContext
            self.Dynamic = None # DynamicLiteralExpressionContext

        def longLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.LongLiteralExpressionContext,0)


        def intLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.IntLiteralExpressionContext,0)


        def realLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.RealLiteralExpressionContext,0)


        def decimalLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.DecimalLiteralExpressionContext,0)


        def dateTimeLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.DateTimeLiteralExpressionContext,0)


        def timeSpanLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.TimeSpanLiteralExpressionContext,0)


        def booleanLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.BooleanLiteralExpressionContext,0)


        def guidLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.GuidLiteralExpressionContext,0)


        def typeLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.TypeLiteralExpressionContext,0)


        def stringLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.StringLiteralExpressionContext,0)


        def dynamicLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.DynamicLiteralExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_unsignedLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsignedLiteralExpression" ):
                listener.enterUnsignedLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsignedLiteralExpression" ):
                listener.exitUnsignedLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsignedLiteralExpression" ):
                return visitor.visitUnsignedLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def unsignedLiteralExpression(self):

        localctx = HqlParser.UnsignedLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_unsignedLiteralExpression)
        try:
            self.state = 2735
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [310]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2724
                localctx.Long = self.longLiteralExpression()
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2725
                localctx.Int = self.intLiteralExpression()
                pass
            elif token in [312]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2726
                localctx.Real = self.realLiteralExpression()
                pass
            elif token in [313]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2727
                localctx.Decimal = self.decimalLiteralExpression()
                pass
            elif token in [316]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2728
                localctx.DateTime = self.dateTimeLiteralExpression()
                pass
            elif token in [317]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2729
                localctx.TimeSpan = self.timeSpanLiteralExpression()
                pass
            elif token in [315]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2730
                localctx.Boolean = self.booleanLiteralExpression()
                pass
            elif token in [320]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2731
                localctx.Guid = self.guidLiteralExpression()
                pass
            elif token in [318]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2732
                localctx.Type = self.typeLiteralExpression()
                pass
            elif token in [314]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2733
                localctx.String = self.stringLiteralExpression()
                pass
            elif token in [287]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2734
                localctx.Dynamic = self.dynamicLiteralExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLikeLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Long = None # LongLiteralExpressionContext
            self.Int = None # IntLiteralExpressionContext
            self.Real = None # RealLiteralExpressionContext
            self.Decimal = None # DecimalLiteralExpressionContext
            self.Signed = None # SignedLiteralExpressionContext
            self.DateTime = None # DateTimeLiteralExpressionContext
            self.TimeSpan = None # TimeSpanLiteralExpressionContext

        def longLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.LongLiteralExpressionContext,0)


        def intLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.IntLiteralExpressionContext,0)


        def realLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.RealLiteralExpressionContext,0)


        def decimalLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.DecimalLiteralExpressionContext,0)


        def signedLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.SignedLiteralExpressionContext,0)


        def dateTimeLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.DateTimeLiteralExpressionContext,0)


        def timeSpanLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.TimeSpanLiteralExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_numberLikeLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLikeLiteralExpression" ):
                listener.enterNumberLikeLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLikeLiteralExpression" ):
                listener.exitNumberLikeLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLikeLiteralExpression" ):
                return visitor.visitNumberLikeLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def numberLikeLiteralExpression(self):

        localctx = HqlParser.NumberLikeLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_numberLikeLiteralExpression)
        try:
            self.state = 2744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [310]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2737
                localctx.Long = self.longLiteralExpression()
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2738
                localctx.Int = self.intLiteralExpression()
                pass
            elif token in [312]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2739
                localctx.Real = self.realLiteralExpression()
                pass
            elif token in [313]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2740
                localctx.Decimal = self.decimalLiteralExpression()
                pass
            elif token in [11, 33]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2741
                localctx.Signed = self.signedLiteralExpression()
                pass
            elif token in [316]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2742
                localctx.DateTime = self.dateTimeLiteralExpression()
                pass
            elif token in [317]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2743
                localctx.TimeSpan = self.timeSpanLiteralExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Long = None # LongLiteralExpressionContext
            self.Int = None # IntLiteralExpressionContext
            self.Real = None # RealLiteralExpressionContext
            self.Decimal = None # DecimalLiteralExpressionContext
            self.Signed = None # SignedLiteralExpressionContext

        def longLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.LongLiteralExpressionContext,0)


        def intLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.IntLiteralExpressionContext,0)


        def realLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.RealLiteralExpressionContext,0)


        def decimalLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.DecimalLiteralExpressionContext,0)


        def signedLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.SignedLiteralExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_numericLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteralExpression" ):
                listener.enterNumericLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteralExpression" ):
                listener.exitNumericLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteralExpression" ):
                return visitor.visitNumericLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def numericLiteralExpression(self):

        localctx = HqlParser.NumericLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_numericLiteralExpression)
        try:
            self.state = 2751
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [310]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2746
                localctx.Long = self.longLiteralExpression()
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2747
                localctx.Int = self.intLiteralExpression()
                pass
            elif token in [312]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2748
                localctx.Real = self.realLiteralExpression()
                pass
            elif token in [313]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2749
                localctx.Decimal = self.decimalLiteralExpression()
                pass
            elif token in [11, 33]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2750
                localctx.Signed = self.signedLiteralExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignedLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Long = None # SignedLongLiteralExpressionContext
            self.Real = None # SignedRealLiteralExpressionContext

        def signedLongLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.SignedLongLiteralExpressionContext,0)


        def signedRealLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.SignedRealLiteralExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_signedLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignedLiteralExpression" ):
                listener.enterSignedLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignedLiteralExpression" ):
                listener.exitSignedLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignedLiteralExpression" ):
                return visitor.visitSignedLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def signedLiteralExpression(self):

        localctx = HqlParser.SignedLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_signedLiteralExpression)
        try:
            self.state = 2755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2753
                localctx.Long = self.signedLongLiteralExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2754
                localctx.Real = self.signedRealLiteralExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LongLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def LONGLITERAL(self):
            return self.getToken(HqlParser.LONGLITERAL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_longLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLongLiteralExpression" ):
                listener.enterLongLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLongLiteralExpression" ):
                listener.exitLongLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLongLiteralExpression" ):
                return visitor.visitLongLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def longLiteralExpression(self):

        localctx = HqlParser.LongLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_longLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2757
            localctx.Token = self.match(HqlParser.LONGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def INTLITERAL(self):
            return self.getToken(HqlParser.INTLITERAL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_intLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntLiteralExpression" ):
                listener.enterIntLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntLiteralExpression" ):
                listener.exitIntLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntLiteralExpression" ):
                return visitor.visitIntLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def intLiteralExpression(self):

        localctx = HqlParser.IntLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_intLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2759
            localctx.Token = self.match(HqlParser.INTLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RealLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def REALLITERAL(self):
            return self.getToken(HqlParser.REALLITERAL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_realLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRealLiteralExpression" ):
                listener.enterRealLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRealLiteralExpression" ):
                listener.exitRealLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRealLiteralExpression" ):
                return visitor.visitRealLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def realLiteralExpression(self):

        localctx = HqlParser.RealLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_realLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2761
            localctx.Token = self.match(HqlParser.REALLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def DECIMALLITERAL(self):
            return self.getToken(HqlParser.DECIMALLITERAL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_decimalLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteralExpression" ):
                listener.enterDecimalLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteralExpression" ):
                listener.exitDecimalLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteralExpression" ):
                return visitor.visitDecimalLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def decimalLiteralExpression(self):

        localctx = HqlParser.DecimalLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_decimalLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2763
            localctx.Token = self.match(HqlParser.DECIMALLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateTimeLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def DATETIMELITERAL(self):
            return self.getToken(HqlParser.DATETIMELITERAL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_dateTimeLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeLiteralExpression" ):
                listener.enterDateTimeLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeLiteralExpression" ):
                listener.exitDateTimeLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateTimeLiteralExpression" ):
                return visitor.visitDateTimeLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def dateTimeLiteralExpression(self):

        localctx = HqlParser.DateTimeLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_dateTimeLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2765
            localctx.Token = self.match(HqlParser.DATETIMELITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeSpanLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def TIMESPANLITERAL(self):
            return self.getToken(HqlParser.TIMESPANLITERAL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_timeSpanLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeSpanLiteralExpression" ):
                listener.enterTimeSpanLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeSpanLiteralExpression" ):
                listener.exitTimeSpanLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeSpanLiteralExpression" ):
                return visitor.visitTimeSpanLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def timeSpanLiteralExpression(self):

        localctx = HqlParser.TimeSpanLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_timeSpanLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2767
            localctx.Token = self.match(HqlParser.TIMESPANLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def BOOLEANLITERAL(self):
            return self.getToken(HqlParser.BOOLEANLITERAL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_booleanLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteralExpression" ):
                listener.enterBooleanLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteralExpression" ):
                listener.exitBooleanLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteralExpression" ):
                return visitor.visitBooleanLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteralExpression(self):

        localctx = HqlParser.BooleanLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_booleanLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2769
            localctx.Token = self.match(HqlParser.BOOLEANLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuidLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def GUIDLITERAL(self):
            return self.getToken(HqlParser.GUIDLITERAL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_guidLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuidLiteralExpression" ):
                listener.enterGuidLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuidLiteralExpression" ):
                listener.exitGuidLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuidLiteralExpression" ):
                return visitor.visitGuidLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def guidLiteralExpression(self):

        localctx = HqlParser.GuidLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_guidLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2771
            localctx.Token = self.match(HqlParser.GUIDLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def TYPELITERAL(self):
            return self.getToken(HqlParser.TYPELITERAL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_typeLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeLiteralExpression" ):
                listener.enterTypeLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeLiteralExpression" ):
                listener.exitTypeLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeLiteralExpression" ):
                return visitor.visitTypeLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def typeLiteralExpression(self):

        localctx = HqlParser.TypeLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_typeLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2773
            localctx.Token = self.match(HqlParser.TYPELITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignedLongLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SignToken = None # Token
            self.LiteralToken = None # Token

        def LONGLITERAL(self):
            return self.getToken(HqlParser.LONGLITERAL, 0)

        def PLUS(self):
            return self.getToken(HqlParser.PLUS, 0)

        def DASH(self):
            return self.getToken(HqlParser.DASH, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_signedLongLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignedLongLiteralExpression" ):
                listener.enterSignedLongLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignedLongLiteralExpression" ):
                listener.exitSignedLongLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignedLongLiteralExpression" ):
                return visitor.visitSignedLongLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def signedLongLiteralExpression(self):

        localctx = HqlParser.SignedLongLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_signedLongLiteralExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2775
            localctx.SignToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==11 or _la==33):
                localctx.SignToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2776
            localctx.LiteralToken = self.match(HqlParser.LONGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignedRealLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SignToken = None # Token
            self.LiteralToken = None # Token

        def REALLITERAL(self):
            return self.getToken(HqlParser.REALLITERAL, 0)

        def PLUS(self):
            return self.getToken(HqlParser.PLUS, 0)

        def DASH(self):
            return self.getToken(HqlParser.DASH, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_signedRealLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignedRealLiteralExpression" ):
                listener.enterSignedRealLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignedRealLiteralExpression" ):
                listener.exitSignedRealLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignedRealLiteralExpression" ):
                return visitor.visitSignedRealLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def signedRealLiteralExpression(self):

        localctx = HqlParser.SignedRealLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_signedRealLiteralExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2778
            localctx.SignToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==11 or _la==33):
                localctx.SignToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2779
            localctx.LiteralToken = self.match(HqlParser.REALLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._STRINGLITERAL = None # Token
            self.Tokens = list() # of Tokens

        def STRINGLITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.STRINGLITERAL)
            else:
                return self.getToken(HqlParser.STRINGLITERAL, i)

        def getRuleIndex(self):
            return HqlParser.RULE_stringLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteralExpression" ):
                listener.enterStringLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteralExpression" ):
                listener.exitStringLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteralExpression" ):
                return visitor.visitStringLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteralExpression(self):

        localctx = HqlParser.StringLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_stringLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2781
            localctx._STRINGLITERAL = self.match(HqlParser.STRINGLITERAL)
            localctx.Tokens.append(localctx._STRINGLITERAL)
            self.state = 2785
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,258,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2782
                    localctx._STRINGLITERAL = self.match(HqlParser.STRINGLITERAL)
                    localctx.Tokens.append(localctx._STRINGLITERAL) 
                self.state = 2787
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,258,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Value = None # JsonValueContext

        def DYNAMIC(self):
            return self.getToken(HqlParser.DYNAMIC, 0)

        def OPENPAREN(self):
            return self.getToken(HqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(HqlParser.CLOSEPAREN, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(HqlParser.JsonValueContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_dynamicLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicLiteralExpression" ):
                listener.enterDynamicLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicLiteralExpression" ):
                listener.exitDynamicLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicLiteralExpression" ):
                return visitor.visitDynamicLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def dynamicLiteralExpression(self):

        localctx = HqlParser.DynamicLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_dynamicLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2788
            self.match(HqlParser.DYNAMIC)
            self.state = 2789
            self.match(HqlParser.OPENPAREN)
            self.state = 2790
            localctx.Value = self.jsonValue()
            self.state = 2791
            self.match(HqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Array = None # JsonArrayContext
            self.Boolean = None # JsonBooleanContext
            self.DateTime = None # JsonDateTimeContext
            self.Guid = None # JsonGuidContext
            self.Long = None # JsonLongContext
            self.Null = None # JsonNullContext
            self.Object = None # JsonObjectContext
            self.Real = None # JsonRealContext
            self.String = None # JsonStringContext
            self.Timespan = None # JsonTimeSpanContext
            self.Dynamic = None # DynamicLiteralExpressionContext

        def jsonArray(self):
            return self.getTypedRuleContext(HqlParser.JsonArrayContext,0)


        def jsonBoolean(self):
            return self.getTypedRuleContext(HqlParser.JsonBooleanContext,0)


        def jsonDateTime(self):
            return self.getTypedRuleContext(HqlParser.JsonDateTimeContext,0)


        def jsonGuid(self):
            return self.getTypedRuleContext(HqlParser.JsonGuidContext,0)


        def jsonLong(self):
            return self.getTypedRuleContext(HqlParser.JsonLongContext,0)


        def jsonNull(self):
            return self.getTypedRuleContext(HqlParser.JsonNullContext,0)


        def jsonObject(self):
            return self.getTypedRuleContext(HqlParser.JsonObjectContext,0)


        def jsonReal(self):
            return self.getTypedRuleContext(HqlParser.JsonRealContext,0)


        def jsonString(self):
            return self.getTypedRuleContext(HqlParser.JsonStringContext,0)


        def jsonTimeSpan(self):
            return self.getTypedRuleContext(HqlParser.JsonTimeSpanContext,0)


        def dynamicLiteralExpression(self):
            return self.getTypedRuleContext(HqlParser.DynamicLiteralExpressionContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_jsonValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValue" ):
                listener.enterJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValue" ):
                listener.exitJsonValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonValue" ):
                return visitor.visitJsonValue(self)
            else:
                return visitor.visitChildren(self)




    def jsonValue(self):

        localctx = HqlParser.JsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_jsonValue)
        try:
            self.state = 2804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2793
                localctx.Array = self.jsonArray()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2794
                localctx.Boolean = self.jsonBoolean()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2795
                localctx.DateTime = self.jsonDateTime()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2796
                localctx.Guid = self.jsonGuid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2797
                localctx.Long = self.jsonLong()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2798
                localctx.Null = self.jsonNull()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2799
                localctx.Object = self.jsonObject()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2800
                localctx.Real = self.jsonReal()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2801
                localctx.String = self.jsonString()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2802
                localctx.Timespan = self.jsonTimeSpan()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2803
                localctx.Dynamic = self.dynamicLiteralExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._jsonPair = None # JsonPairContext
            self.Pairs = list() # of JsonPairContexts

        def OPENBRACE(self):
            return self.getToken(HqlParser.OPENBRACE, 0)

        def CLOSEBRACE(self):
            return self.getToken(HqlParser.CLOSEBRACE, 0)

        def jsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.JsonPairContext)
            else:
                return self.getTypedRuleContext(HqlParser.JsonPairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_jsonObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObject" ):
                listener.enterJsonObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObject" ):
                listener.exitJsonObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonObject" ):
                return visitor.visitJsonObject(self)
            else:
                return visitor.visitChildren(self)




    def jsonObject(self):

        localctx = HqlParser.JsonObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_jsonObject)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2806
            self.match(HqlParser.OPENBRACE)
            self.state = 2815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==314:
                self.state = 2807
                localctx._jsonPair = self.jsonPair()
                localctx.Pairs.append(localctx._jsonPair)
                self.state = 2812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 2808
                    self.match(HqlParser.COMMA)
                    self.state = 2809
                    localctx._jsonPair = self.jsonPair()
                    localctx.Pairs.append(localctx._jsonPair)
                    self.state = 2814
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2817
            self.match(HqlParser.CLOSEBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # Token
            self.Value = None # JsonValueContext

        def COLON(self):
            return self.getToken(HqlParser.COLON, 0)

        def STRINGLITERAL(self):
            return self.getToken(HqlParser.STRINGLITERAL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(HqlParser.JsonValueContext,0)


        def getRuleIndex(self):
            return HqlParser.RULE_jsonPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonPair" ):
                listener.enterJsonPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonPair" ):
                listener.exitJsonPair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonPair" ):
                return visitor.visitJsonPair(self)
            else:
                return visitor.visitChildren(self)




    def jsonPair(self):

        localctx = HqlParser.JsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_jsonPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2819
            localctx.Name = self.match(HqlParser.STRINGLITERAL)
            self.state = 2820
            self.match(HqlParser.COLON)
            self.state = 2821
            localctx.Value = self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._jsonValue = None # JsonValueContext
            self.Values = list() # of JsonValueContexts

        def OPENBRACKET(self):
            return self.getToken(HqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(HqlParser.CLOSEBRACKET, 0)

        def jsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HqlParser.JsonValueContext)
            else:
                return self.getTypedRuleContext(HqlParser.JsonValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.COMMA)
            else:
                return self.getToken(HqlParser.COMMA, i)

        def getRuleIndex(self):
            return HqlParser.RULE_jsonArray

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArray" ):
                listener.enterJsonArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArray" ):
                listener.exitJsonArray(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonArray" ):
                return visitor.visitJsonArray(self)
            else:
                return visitor.visitChildren(self)




    def jsonArray(self):

        localctx = HqlParser.JsonArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_jsonArray)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2823
            self.match(HqlParser.OPENBRACKET)
            self.state = 2832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1610614784) != 0) or _la==184 or ((((_la - 287)) & ~0x3f) == 0 and ((1 << (_la - 287)) & 10645143553) != 0):
                self.state = 2824
                localctx._jsonValue = self.jsonValue()
                localctx.Values.append(localctx._jsonValue)
                self.state = 2829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 2825
                    self.match(HqlParser.COMMA)
                    self.state = 2826
                    localctx._jsonValue = self.jsonValue()
                    localctx.Values.append(localctx._jsonValue)
                    self.state = 2831
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2834
            self.match(HqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonBooleanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def BOOLEANLITERAL(self):
            return self.getToken(HqlParser.BOOLEANLITERAL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_jsonBoolean

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonBoolean" ):
                listener.enterJsonBoolean(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonBoolean" ):
                listener.exitJsonBoolean(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonBoolean" ):
                return visitor.visitJsonBoolean(self)
            else:
                return visitor.visitChildren(self)




    def jsonBoolean(self):

        localctx = HqlParser.JsonBooleanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_jsonBoolean)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2836
            localctx.Token = self.match(HqlParser.BOOLEANLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonDateTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def DATETIMELITERAL(self):
            return self.getToken(HqlParser.DATETIMELITERAL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_jsonDateTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonDateTime" ):
                listener.enterJsonDateTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonDateTime" ):
                listener.exitJsonDateTime(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonDateTime" ):
                return visitor.visitJsonDateTime(self)
            else:
                return visitor.visitChildren(self)




    def jsonDateTime(self):

        localctx = HqlParser.JsonDateTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_jsonDateTime)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2838
            localctx.Token = self.match(HqlParser.DATETIMELITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonGuidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def GUIDLITERAL(self):
            return self.getToken(HqlParser.GUIDLITERAL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_jsonGuid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonGuid" ):
                listener.enterJsonGuid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonGuid" ):
                listener.exitJsonGuid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonGuid" ):
                return visitor.visitJsonGuid(self)
            else:
                return visitor.visitChildren(self)




    def jsonGuid(self):

        localctx = HqlParser.JsonGuidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_jsonGuid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2840
            localctx.Token = self.match(HqlParser.GUIDLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonNullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def NULL(self):
            return self.getToken(HqlParser.NULL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_jsonNull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonNull" ):
                listener.enterJsonNull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonNull" ):
                listener.exitJsonNull(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonNull" ):
                return visitor.visitJsonNull(self)
            else:
                return visitor.visitChildren(self)




    def jsonNull(self):

        localctx = HqlParser.JsonNullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_jsonNull)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2842
            localctx.Token = self.match(HqlParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._STRINGLITERAL = None # Token
            self.Tokens = list() # of Tokens

        def STRINGLITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(HqlParser.STRINGLITERAL)
            else:
                return self.getToken(HqlParser.STRINGLITERAL, i)

        def getRuleIndex(self):
            return HqlParser.RULE_jsonString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonString" ):
                listener.enterJsonString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonString" ):
                listener.exitJsonString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonString" ):
                return visitor.visitJsonString(self)
            else:
                return visitor.visitChildren(self)




    def jsonString(self):

        localctx = HqlParser.JsonStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_jsonString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2844
            localctx._STRINGLITERAL = self.match(HqlParser.STRINGLITERAL)
            localctx.Tokens.append(localctx._STRINGLITERAL)
            self.state = 2848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==314:
                self.state = 2845
                localctx._STRINGLITERAL = self.match(HqlParser.STRINGLITERAL)
                localctx.Tokens.append(localctx._STRINGLITERAL)
                self.state = 2850
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonTimeSpanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def TIMESPANLITERAL(self):
            return self.getToken(HqlParser.TIMESPANLITERAL, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_jsonTimeSpan

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonTimeSpan" ):
                listener.enterJsonTimeSpan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonTimeSpan" ):
                listener.exitJsonTimeSpan(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonTimeSpan" ):
                return visitor.visitJsonTimeSpan(self)
            else:
                return visitor.visitChildren(self)




    def jsonTimeSpan(self):

        localctx = HqlParser.JsonTimeSpanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_jsonTimeSpan)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2851
            localctx.Token = self.match(HqlParser.TIMESPANLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonLongContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SignToken = None # Token
            self.LiteralToken = None # Token

        def LONGLITERAL(self):
            return self.getToken(HqlParser.LONGLITERAL, 0)

        def DASH(self):
            return self.getToken(HqlParser.DASH, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_jsonLong

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonLong" ):
                listener.enterJsonLong(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonLong" ):
                listener.exitJsonLong(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonLong" ):
                return visitor.visitJsonLong(self)
            else:
                return visitor.visitChildren(self)




    def jsonLong(self):

        localctx = HqlParser.JsonLongContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_jsonLong)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 2853
                localctx.SignToken = self.match(HqlParser.DASH)


            self.state = 2856
            localctx.LiteralToken = self.match(HqlParser.LONGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonRealContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SignToken = None # Token
            self.LiteralToken = None # Token

        def REALLITERAL(self):
            return self.getToken(HqlParser.REALLITERAL, 0)

        def DASH(self):
            return self.getToken(HqlParser.DASH, 0)

        def getRuleIndex(self):
            return HqlParser.RULE_jsonReal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonReal" ):
                listener.enterJsonReal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonReal" ):
                listener.exitJsonReal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonReal" ):
                return visitor.visitJsonReal(self)
            else:
                return visitor.visitChildren(self)




    def jsonReal(self):

        localctx = HqlParser.JsonRealContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_jsonReal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 2858
                localctx.SignToken = self.match(HqlParser.DASH)


            self.state = 2861
            localctx.LiteralToken = self.match(HqlParser.REALLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





